//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Business {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Data;
    using System.ComponentModel.DataAnnotations;
    using Symber.Web.Data;
    
    
    /// <summary>
    /// APDBDef 是一个自动生成的具有 Partial 修饰的类，用于定义 APTableDef 和 APRelationDef。你可以添加同名的 Partial 类来扩充功能。
    /// </summary>
    public partial class APDBDef : APDatabase {
        
        private static ResPickListTableDef _resPickList;
        
        private static ResPickListItemTableDef _resPickListItem;
        
        private static ActiveTableDef _active;
        
        private static ResUserTableDef _resUser;
        
        private static ResCompanyTableDef _resCompany;
        
        private static CroResourceTableDef _croResource;
        
        private static MicroCourseTableDef _microCourse;
        
        private static FilesTableDef _files;
        
        private static IndicationTableDef _indication;
        
        private static EvalGroupTableDef _evalGroup;
        
        private static EvalResultTableDef _evalResult;
        
        private static EvalResultItemTableDef _evalResultItem;
        
        private static WeiXinUserInfoTableDef _weiXinUserInfo;
        
        private static WeiXinPraiseTableDef _weiXinPraise;
        
        private static WeiXinFavoriteTableDef _weiXinFavorite;
        
        private static WeiXinPlayCountTableDef _weiXinPlayCount;
        
        private static NoticeTableDef _notice;
        
        private static WeiXinExpertTableDef _weiXinExpert;
        
        private static APDalProvider staticProvider = Provider;
        
        private APDalDef.ResPickListDal _resPickListDal;
        
        private APDalDef.ResPickListItemDal _resPickListItemDal;
        
        private APDalDef.ActiveDal _activeDal;
        
        private APDalDef.ResUserDal _resUserDal;
        
        private APDalDef.ResCompanyDal _resCompanyDal;
        
        private APDalDef.CroResourceDal _croResourceDal;
        
        private APDalDef.MicroCourseDal _microCourseDal;
        
        private APDalDef.FilesDal _filesDal;
        
        private APDalDef.IndicationDal _indicationDal;
        
        private APDalDef.EvalGroupDal _evalGroupDal;
        
        private APDalDef.EvalResultDal _evalResultDal;
        
        private APDalDef.EvalResultItemDal _evalResultItemDal;
        
        private APDalDef.WeiXinUserInfoDal _weiXinUserInfoDal;
        
        private APDalDef.WeiXinPraiseDal _weiXinPraiseDal;
        
        private APDalDef.WeiXinFavoriteDal _weiXinFavoriteDal;
        
        private APDalDef.WeiXinPlayCountDal _weiXinPlayCountDal;
        
        private APDalDef.NoticeDal _noticeDal;
        
        private APDalDef.WeiXinExpertDal _weiXinExpertDal;
        
        public APDBDef() : 
                base(staticProvider) {
        }
        
        public APDBDef(string providerName) : 
                base(providerName) {
        }
        
        /// <summary>
        /// 选项列表 TableDef
        /// </summary>
        public static ResPickListTableDef ResPickList {
            get {
                if ((_resPickList == null)) {
                    _resPickList = new ResPickListTableDef("ResPickList");
                }
                return _resPickList;
            }
        }
        
        /// <summary>
        /// 选项列表项 TableDef
        /// </summary>
        public static ResPickListItemTableDef ResPickListItem {
            get {
                if ((_resPickListItem == null)) {
                    _resPickListItem = new ResPickListItemTableDef("ResPickListItem");
                }
                return _resPickListItem;
            }
        }
        
        /// <summary>
        /// 项目 TableDef
        /// </summary>
        public static ActiveTableDef Active {
            get {
                if ((_active == null)) {
                    _active = new ActiveTableDef("Active");
                }
                return _active;
            }
        }
        
        /// <summary>
        /// 用户 TableDef
        /// </summary>
        public static ResUserTableDef ResUser {
            get {
                if ((_resUser == null)) {
                    _resUser = new ResUserTableDef("ResUser");
                }
                return _resUser;
            }
        }
        
        /// <summary>
        /// 单位 TableDef
        /// </summary>
        public static ResCompanyTableDef ResCompany {
            get {
                if ((_resCompany == null)) {
                    _resCompany = new ResCompanyTableDef("ResCompany");
                }
                return _resCompany;
            }
        }
        
        /// <summary>
        /// 微课作品 TableDef
        /// </summary>
        public static CroResourceTableDef CroResource {
            get {
                if ((_croResource == null)) {
                    _croResource = new CroResourceTableDef("CroResource");
                }
                return _croResource;
            }
        }
        
        /// <summary>
        /// 课程 TableDef
        /// </summary>
        public static MicroCourseTableDef MicroCourse {
            get {
                if ((_microCourse == null)) {
                    _microCourse = new MicroCourseTableDef("MicroCourse");
                }
                return _microCourse;
            }
        }
        
        /// <summary>
        ///  TableDef
        /// </summary>
        public static FilesTableDef Files {
            get {
                if ((_files == null)) {
                    _files = new FilesTableDef("Files");
                }
                return _files;
            }
        }
        
        /// <summary>
        /// 评审指标 TableDef
        /// </summary>
        public static IndicationTableDef Indication {
            get {
                if ((_indication == null)) {
                    _indication = new IndicationTableDef("Indication");
                }
                return _indication;
            }
        }
        
        /// <summary>
        /// 评审组 TableDef
        /// </summary>
        public static EvalGroupTableDef EvalGroup {
            get {
                if ((_evalGroup == null)) {
                    _evalGroup = new EvalGroupTableDef("EvalGroup");
                }
                return _evalGroup;
            }
        }
        
        /// <summary>
        /// 专家-考核结果 TableDef
        /// </summary>
        public static EvalResultTableDef EvalResult {
            get {
                if ((_evalResult == null)) {
                    _evalResult = new EvalResultTableDef("EvalResult");
                }
                return _evalResult;
            }
        }
        
        /// <summary>
        /// 考核-结果-结果项 TableDef
        /// </summary>
        public static EvalResultItemTableDef EvalResultItem {
            get {
                if ((_evalResultItem == null)) {
                    _evalResultItem = new EvalResultItemTableDef("EvalResultItem");
                }
                return _evalResultItem;
            }
        }
        
        /// <summary>
        /// 微信用户 TableDef
        /// </summary>
        public static WeiXinUserInfoTableDef WeiXinUserInfo {
            get {
                if ((_weiXinUserInfo == null)) {
                    _weiXinUserInfo = new WeiXinUserInfoTableDef("WeiXinUserInfo");
                }
                return _weiXinUserInfo;
            }
        }
        
        /// <summary>
        /// 微课点赞 TableDef
        /// </summary>
        public static WeiXinPraiseTableDef WeiXinPraise {
            get {
                if ((_weiXinPraise == null)) {
                    _weiXinPraise = new WeiXinPraiseTableDef("WeiXinPraise");
                }
                return _weiXinPraise;
            }
        }
        
        /// <summary>
        /// 微课收藏 TableDef
        /// </summary>
        public static WeiXinFavoriteTableDef WeiXinFavorite {
            get {
                if ((_weiXinFavorite == null)) {
                    _weiXinFavorite = new WeiXinFavoriteTableDef("WeiXinFavorite");
                }
                return _weiXinFavorite;
            }
        }
        
        /// <summary>
        /// 微课点击 TableDef
        /// </summary>
        public static WeiXinPlayCountTableDef WeiXinPlayCount {
            get {
                if ((_weiXinPlayCount == null)) {
                    _weiXinPlayCount = new WeiXinPlayCountTableDef("WeiXinPlayCount");
                }
                return _weiXinPlayCount;
            }
        }
        
        /// <summary>
        /// 消息 TableDef
        /// </summary>
        public static NoticeTableDef Notice {
            get {
                if ((_notice == null)) {
                    _notice = new NoticeTableDef("Notice");
                }
                return _notice;
            }
        }
        
        /// <summary>
        /// 微信专家表 TableDef
        /// </summary>
        public static WeiXinExpertTableDef WeiXinExpert {
            get {
                if ((_weiXinExpert == null)) {
                    _weiXinExpert = new WeiXinExpertTableDef("WeiXinExpert");
                }
                return _weiXinExpert;
            }
        }
        
        /// <summary>
        /// 选项列表 Dal
        /// </summary>
        public virtual APDalDef.ResPickListDal ResPickListDal {
            get {
                if ((_resPickListDal == null)) {
                    _resPickListDal = new APDalDef.ResPickListDal(this);
                }
                return _resPickListDal;
            }
        }
        
        /// <summary>
        /// 选项列表项 Dal
        /// </summary>
        public virtual APDalDef.ResPickListItemDal ResPickListItemDal {
            get {
                if ((_resPickListItemDal == null)) {
                    _resPickListItemDal = new APDalDef.ResPickListItemDal(this);
                }
                return _resPickListItemDal;
            }
        }
        
        /// <summary>
        /// 项目 Dal
        /// </summary>
        public virtual APDalDef.ActiveDal ActiveDal {
            get {
                if ((_activeDal == null)) {
                    _activeDal = new APDalDef.ActiveDal(this);
                }
                return _activeDal;
            }
        }
        
        /// <summary>
        /// 用户 Dal
        /// </summary>
        public virtual APDalDef.ResUserDal ResUserDal {
            get {
                if ((_resUserDal == null)) {
                    _resUserDal = new APDalDef.ResUserDal(this);
                }
                return _resUserDal;
            }
        }
        
        /// <summary>
        /// 单位 Dal
        /// </summary>
        public virtual APDalDef.ResCompanyDal ResCompanyDal {
            get {
                if ((_resCompanyDal == null)) {
                    _resCompanyDal = new APDalDef.ResCompanyDal(this);
                }
                return _resCompanyDal;
            }
        }
        
        /// <summary>
        /// 微课作品 Dal
        /// </summary>
        public virtual APDalDef.CroResourceDal CroResourceDal {
            get {
                if ((_croResourceDal == null)) {
                    _croResourceDal = new APDalDef.CroResourceDal(this);
                }
                return _croResourceDal;
            }
        }
        
        /// <summary>
        /// 课程 Dal
        /// </summary>
        public virtual APDalDef.MicroCourseDal MicroCourseDal {
            get {
                if ((_microCourseDal == null)) {
                    _microCourseDal = new APDalDef.MicroCourseDal(this);
                }
                return _microCourseDal;
            }
        }
        
        /// <summary>
        ///  Dal
        /// </summary>
        public virtual APDalDef.FilesDal FilesDal {
            get {
                if ((_filesDal == null)) {
                    _filesDal = new APDalDef.FilesDal(this);
                }
                return _filesDal;
            }
        }
        
        /// <summary>
        /// 评审指标 Dal
        /// </summary>
        public virtual APDalDef.IndicationDal IndicationDal {
            get {
                if ((_indicationDal == null)) {
                    _indicationDal = new APDalDef.IndicationDal(this);
                }
                return _indicationDal;
            }
        }
        
        /// <summary>
        /// 评审组 Dal
        /// </summary>
        public virtual APDalDef.EvalGroupDal EvalGroupDal {
            get {
                if ((_evalGroupDal == null)) {
                    _evalGroupDal = new APDalDef.EvalGroupDal(this);
                }
                return _evalGroupDal;
            }
        }
        
        /// <summary>
        /// 专家-考核结果 Dal
        /// </summary>
        public virtual APDalDef.EvalResultDal EvalResultDal {
            get {
                if ((_evalResultDal == null)) {
                    _evalResultDal = new APDalDef.EvalResultDal(this);
                }
                return _evalResultDal;
            }
        }
        
        /// <summary>
        /// 考核-结果-结果项 Dal
        /// </summary>
        public virtual APDalDef.EvalResultItemDal EvalResultItemDal {
            get {
                if ((_evalResultItemDal == null)) {
                    _evalResultItemDal = new APDalDef.EvalResultItemDal(this);
                }
                return _evalResultItemDal;
            }
        }
        
        /// <summary>
        /// 微信用户 Dal
        /// </summary>
        public virtual APDalDef.WeiXinUserInfoDal WeiXinUserInfoDal {
            get {
                if ((_weiXinUserInfoDal == null)) {
                    _weiXinUserInfoDal = new APDalDef.WeiXinUserInfoDal(this);
                }
                return _weiXinUserInfoDal;
            }
        }
        
        /// <summary>
        /// 微课点赞 Dal
        /// </summary>
        public virtual APDalDef.WeiXinPraiseDal WeiXinPraiseDal {
            get {
                if ((_weiXinPraiseDal == null)) {
                    _weiXinPraiseDal = new APDalDef.WeiXinPraiseDal(this);
                }
                return _weiXinPraiseDal;
            }
        }
        
        /// <summary>
        /// 微课收藏 Dal
        /// </summary>
        public virtual APDalDef.WeiXinFavoriteDal WeiXinFavoriteDal {
            get {
                if ((_weiXinFavoriteDal == null)) {
                    _weiXinFavoriteDal = new APDalDef.WeiXinFavoriteDal(this);
                }
                return _weiXinFavoriteDal;
            }
        }
        
        /// <summary>
        /// 微课点击 Dal
        /// </summary>
        public virtual APDalDef.WeiXinPlayCountDal WeiXinPlayCountDal {
            get {
                if ((_weiXinPlayCountDal == null)) {
                    _weiXinPlayCountDal = new APDalDef.WeiXinPlayCountDal(this);
                }
                return _weiXinPlayCountDal;
            }
        }
        
        /// <summary>
        /// 消息 Dal
        /// </summary>
        public virtual APDalDef.NoticeDal NoticeDal {
            get {
                if ((_noticeDal == null)) {
                    _noticeDal = new APDalDef.NoticeDal(this);
                }
                return _noticeDal;
            }
        }
        
        /// <summary>
        /// 微信专家表 Dal
        /// </summary>
        public virtual APDalDef.WeiXinExpertDal WeiXinExpertDal {
            get {
                if ((_weiXinExpertDal == null)) {
                    _weiXinExpertDal = new APDalDef.WeiXinExpertDal(this);
                }
                return _weiXinExpertDal;
            }
        }
        
        public override void Rollback() {
            base.Rollback();
        }
        
        public override void Close() {
            base.Close();
        }
        
        /// <summary>
        /// 初始化数据。
        /// </summary>
        public static void InitData() {
            APDBDef db = new APDBDef();
            db.BeginTrans();
            try {
                db.ResPickListDal.InitData(db);
                db.ResPickListItemDal.InitData(db);
                db.ActiveDal.InitData(db);
                db.ResUserDal.InitData(db);
                db.ResCompanyDal.InitData(db);
                db.CroResourceDal.InitData(db);
                db.MicroCourseDal.InitData(db);
                db.FilesDal.InitData(db);
                db.IndicationDal.InitData(db);
                db.EvalGroupDal.InitData(db);
                db.EvalResultDal.InitData(db);
                db.EvalResultItemDal.InitData(db);
                db.WeiXinUserInfoDal.InitData(db);
                db.WeiXinPraiseDal.InitData(db);
                db.WeiXinFavoriteDal.InitData(db);
                db.WeiXinPlayCountDal.InitData(db);
                db.NoticeDal.InitData(db);
                db.WeiXinExpertDal.InitData(db);
                db.Commit();
            }
            catch (System.Exception ) {
                db.Rollback();
                throw;
            }
            finally {
                db.Close();
            }
        }
        
        [Serializable()]
        public partial class ResPickListTableDef : APTableDef {
            
            private Int64APColumnDef _pickListId;
            
            private StringAPColumnDef _innerKey;
            
            private StringAPColumnDef _name;
            
            private BooleanAPColumnDef _adjustable;
            
            private BooleanAPColumnDef _strengthen;
            
            private StringAPColumnDef _description;
            
            private Int64APColumnDef _creator;
            
            private DateTimeAPColumnDef _createdTime;
            
            private Int64APColumnDef _lastModifier;
            
            private DateTimeAPColumnDef _lastModifiedTime;
            
            public ResPickListTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected ResPickListTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// PickListId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef PickListId {
                get {
                    if (Object.ReferenceEquals(_pickListId, null)) {
                        _pickListId = new Int64APColumnDef(this, "PickListId", false);
                        _pickListId.Display = "PickListId";
                    }
                    return _pickListId;
                }
            }
            
            /// <summary>
            /// InnerKey ColumnDef
            /// </summary>
            public virtual StringAPColumnDef InnerKey {
                get {
                    if (Object.ReferenceEquals(_innerKey, null)) {
                        _innerKey = new StringAPColumnDef(this, "InnerKey", false, 40);
                        _innerKey.Display = "InnerKey";
                    }
                    return _innerKey;
                }
            }
            
            /// <summary>
            /// Name ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Name {
                get {
                    if (Object.ReferenceEquals(_name, null)) {
                        _name = new StringAPColumnDef(this, "Name", false, 255);
                        _name.Display = "Name";
                    }
                    return _name;
                }
            }
            
            /// <summary>
            /// Adjustable ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef Adjustable {
                get {
                    if (Object.ReferenceEquals(_adjustable, null)) {
                        _adjustable = new BooleanAPColumnDef(this, "Adjustable", false);
                        _adjustable.Display = "Adjustable";
                    }
                    return _adjustable;
                }
            }
            
            /// <summary>
            /// Strengthen ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef Strengthen {
                get {
                    if (Object.ReferenceEquals(_strengthen, null)) {
                        _strengthen = new BooleanAPColumnDef(this, "Strengthen", false);
                        _strengthen.Display = "Strengthen";
                    }
                    return _strengthen;
                }
            }
            
            /// <summary>
            /// Description ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Description {
                get {
                    if (Object.ReferenceEquals(_description, null)) {
                        _description = new StringAPColumnDef(this, "Description", false, 1000);
                        _description.Display = "Description";
                    }
                    return _description;
                }
            }
            
            /// <summary>
            /// Creator ColumnDef
            /// </summary>
            public virtual Int64APColumnDef Creator {
                get {
                    if (Object.ReferenceEquals(_creator, null)) {
                        _creator = new Int64APColumnDef(this, "Creator", false);
                        _creator.Display = "Creator";
                    }
                    return _creator;
                }
            }
            
            /// <summary>
            /// CreatedTime ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef CreatedTime {
                get {
                    if (Object.ReferenceEquals(_createdTime, null)) {
                        _createdTime = new DateTimeAPColumnDef(this, "CreatedTime", false);
                        _createdTime.Display = "CreatedTime";
                    }
                    return _createdTime;
                }
            }
            
            /// <summary>
            /// LastModifier ColumnDef
            /// </summary>
            public virtual Int64APColumnDef LastModifier {
                get {
                    if (Object.ReferenceEquals(_lastModifier, null)) {
                        _lastModifier = new Int64APColumnDef(this, "LastModifier", false);
                        _lastModifier.Display = "LastModifier";
                    }
                    return _lastModifier;
                }
            }
            
            /// <summary>
            /// LastModifiedTime ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef LastModifiedTime {
                get {
                    if (Object.ReferenceEquals(_lastModifiedTime, null)) {
                        _lastModifiedTime = new DateTimeAPColumnDef(this, "LastModifiedTime", false);
                        _lastModifiedTime.Display = "LastModifiedTime";
                    }
                    return _lastModifiedTime;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual ResPickListTableDef As(string name) {
                return new ResPickListTableDef("ResPickList", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, ResPickList data, bool throwIfValidColumnName) {
                data.PickListId = PickListId.GetValue<long>(reader, throwIfValidColumnName);
                data.InnerKey = InnerKey.GetValue<string>(reader, throwIfValidColumnName);
                data.Name = Name.GetValue<string>(reader, throwIfValidColumnName);
                data.Adjustable = Adjustable.GetValue<bool>(reader, throwIfValidColumnName);
                data.Strengthen = Strengthen.GetValue<bool>(reader, throwIfValidColumnName);
                data.Description = Description.GetValue<string>(reader, throwIfValidColumnName);
                data.Creator = Creator.GetValue<long>(reader, throwIfValidColumnName);
                data.CreatedTime = CreatedTime.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.LastModifier = LastModifier.GetValue<long>(reader, throwIfValidColumnName);
                data.LastModifiedTime = LastModifiedTime.GetValue<System.DateTime>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual ResPickList Map(IDataReader reader) {
                ResPickList data = new ResPickList();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual ResPickList TolerantMap(IDataReader reader) {
                ResPickList data = new ResPickList();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<ResPickList> MapList(IDataReader reader) {
                List<ResPickList> list = new List<ResPickList>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<ResPickList> TolerantMapList(IDataReader reader) {
                List<ResPickList> list = new List<ResPickList>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class ResPickListItemTableDef : APTableDef {
            
            private Int64APColumnDef _pickListItemId;
            
            private Int64APColumnDef _pickListId;
            
            private StringAPColumnDef _name;
            
            private Int64APColumnDef _strengthenValue;
            
            private StringAPColumnDef _code;
            
            private BooleanAPColumnDef _isDefault;
            
            private Int64APColumnDef _creator;
            
            private DateTimeAPColumnDef _createdTime;
            
            private Int64APColumnDef _lastModifier;
            
            private DateTimeAPColumnDef _lastModifiedTime;
            
            public ResPickListItemTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected ResPickListItemTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// PickListItemId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef PickListItemId {
                get {
                    if (Object.ReferenceEquals(_pickListItemId, null)) {
                        _pickListItemId = new Int64APColumnDef(this, "PickListItemId", false);
                        _pickListItemId.Display = "PickListItemId";
                    }
                    return _pickListItemId;
                }
            }
            
            /// <summary>
            /// PickListId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef PickListId {
                get {
                    if (Object.ReferenceEquals(_pickListId, null)) {
                        _pickListId = new Int64APColumnDef(this, "PickListId", false);
                        _pickListId.Display = "PickListId";
                    }
                    return _pickListId;
                }
            }
            
            /// <summary>
            /// Name ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Name {
                get {
                    if (Object.ReferenceEquals(_name, null)) {
                        _name = new StringAPColumnDef(this, "Name", false, 255);
                        _name.Display = "Name";
                    }
                    return _name;
                }
            }
            
            /// <summary>
            /// StrengthenValue ColumnDef
            /// </summary>
            public virtual Int64APColumnDef StrengthenValue {
                get {
                    if (Object.ReferenceEquals(_strengthenValue, null)) {
                        _strengthenValue = new Int64APColumnDef(this, "StrengthenValue", false);
                        _strengthenValue.Display = "StrengthenValue";
                    }
                    return _strengthenValue;
                }
            }
            
            /// <summary>
            /// Code ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Code {
                get {
                    if (Object.ReferenceEquals(_code, null)) {
                        _code = new StringAPColumnDef(this, "Code", false, 100);
                        _code.Display = "Code";
                    }
                    return _code;
                }
            }
            
            /// <summary>
            /// IsDefault ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef IsDefault {
                get {
                    if (Object.ReferenceEquals(_isDefault, null)) {
                        _isDefault = new BooleanAPColumnDef(this, "IsDefault", false);
                        _isDefault.Display = "IsDefault";
                    }
                    return _isDefault;
                }
            }
            
            /// <summary>
            /// Creator ColumnDef
            /// </summary>
            public virtual Int64APColumnDef Creator {
                get {
                    if (Object.ReferenceEquals(_creator, null)) {
                        _creator = new Int64APColumnDef(this, "Creator", false);
                        _creator.Display = "Creator";
                    }
                    return _creator;
                }
            }
            
            /// <summary>
            /// CreatedTime ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef CreatedTime {
                get {
                    if (Object.ReferenceEquals(_createdTime, null)) {
                        _createdTime = new DateTimeAPColumnDef(this, "CreatedTime", false);
                        _createdTime.Display = "CreatedTime";
                    }
                    return _createdTime;
                }
            }
            
            /// <summary>
            /// LastModifier ColumnDef
            /// </summary>
            public virtual Int64APColumnDef LastModifier {
                get {
                    if (Object.ReferenceEquals(_lastModifier, null)) {
                        _lastModifier = new Int64APColumnDef(this, "LastModifier", false);
                        _lastModifier.Display = "LastModifier";
                    }
                    return _lastModifier;
                }
            }
            
            /// <summary>
            /// LastModifiedTime ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef LastModifiedTime {
                get {
                    if (Object.ReferenceEquals(_lastModifiedTime, null)) {
                        _lastModifiedTime = new DateTimeAPColumnDef(this, "LastModifiedTime", false);
                        _lastModifiedTime.Display = "LastModifiedTime";
                    }
                    return _lastModifiedTime;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual ResPickListItemTableDef As(string name) {
                return new ResPickListItemTableDef("ResPickListItem", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, ResPickListItem data, bool throwIfValidColumnName) {
                data.PickListItemId = PickListItemId.GetValue<long>(reader, throwIfValidColumnName);
                data.PickListId = PickListId.GetValue<long>(reader, throwIfValidColumnName);
                data.Name = Name.GetValue<string>(reader, throwIfValidColumnName);
                data.StrengthenValue = StrengthenValue.GetValue<long>(reader, throwIfValidColumnName);
                data.Code = Code.GetValue<string>(reader, throwIfValidColumnName);
                data.IsDefault = IsDefault.GetValue<bool>(reader, throwIfValidColumnName);
                data.Creator = Creator.GetValue<long>(reader, throwIfValidColumnName);
                data.CreatedTime = CreatedTime.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.LastModifier = LastModifier.GetValue<long>(reader, throwIfValidColumnName);
                data.LastModifiedTime = LastModifiedTime.GetValue<System.DateTime>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual ResPickListItem Map(IDataReader reader) {
                ResPickListItem data = new ResPickListItem();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual ResPickListItem TolerantMap(IDataReader reader) {
                ResPickListItem data = new ResPickListItem();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<ResPickListItem> MapList(IDataReader reader) {
                List<ResPickListItem> list = new List<ResPickListItem>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<ResPickListItem> TolerantMapList(IDataReader reader) {
                List<ResPickListItem> list = new List<ResPickListItem>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class ActiveTableDef : APTableDef {
            
            private Int64APColumnDef _activeId;
            
            private StringAPColumnDef _activeName;
            
            private StringAPColumnDef _description;
            
            private Int32APColumnDef _year;
            
            private StringAPColumnDef _company;
            
            private Int64APColumnDef _levelPKID;
            
            private Int64APColumnDef _semesterPKID;
            
            private Int64APColumnDef _publicStatePKID;
            
            private Int64APColumnDef _downloadStatePKID;
            
            private DateTimeAPColumnDef _startDate;
            
            private DateTimeAPColumnDef _endDate;
            
            private DateTimeAPColumnDef _uploadStartDate;
            
            private DateTimeAPColumnDef _uploadEndDate;
            
            private BooleanAPColumnDef _isCurrent;
            
            public ActiveTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected ActiveTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// ActiveId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef ActiveId {
                get {
                    if (Object.ReferenceEquals(_activeId, null)) {
                        _activeId = new Int64APColumnDef(this, "id", false);
                        _activeId.Display = "项目ID";
                    }
                    return _activeId;
                }
            }
            
            /// <summary>
            /// ActiveName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ActiveName {
                get {
                    if (Object.ReferenceEquals(_activeName, null)) {
                        _activeName = new StringAPColumnDef(this, "ActiveName", false, 100);
                        _activeName.Display = "项目名称";
                        _activeName.Required = true;
                    }
                    return _activeName;
                }
            }
            
            /// <summary>
            /// Description ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Description {
                get {
                    if (Object.ReferenceEquals(_description, null)) {
                        _description = new StringAPColumnDef(this, "Description", false, 255);
                        _description.Display = "描述";
                        _description.Required = true;
                    }
                    return _description;
                }
            }
            
            /// <summary>
            /// Year ColumnDef
            /// </summary>
            public virtual Int32APColumnDef Year {
                get {
                    if (Object.ReferenceEquals(_year, null)) {
                        _year = new Int32APColumnDef(this, "Year", false);
                        _year.Display = "项目年份";
                        _year.Required = true;
                    }
                    return _year;
                }
            }
            
            /// <summary>
            /// Company ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Company {
                get {
                    if (Object.ReferenceEquals(_company, null)) {
                        _company = new StringAPColumnDef(this, "Company", false, 100);
                        _company.Display = "主办单位";
                        _company.Required = true;
                    }
                    return _company;
                }
            }
            
            /// <summary>
            /// LevelPKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef LevelPKID {
                get {
                    if (Object.ReferenceEquals(_levelPKID, null)) {
                        _levelPKID = new Int64APColumnDef(this, "LevelPKID", false);
                        _levelPKID.Display = "项目级别";
                    }
                    return _levelPKID;
                }
            }
            
            /// <summary>
            /// SemesterPKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef SemesterPKID {
                get {
                    if (Object.ReferenceEquals(_semesterPKID, null)) {
                        _semesterPKID = new Int64APColumnDef(this, "SemesterPKID", false);
                        _semesterPKID.Display = "学期";
                    }
                    return _semesterPKID;
                }
            }
            
            /// <summary>
            /// PublicStatePKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef PublicStatePKID {
                get {
                    if (Object.ReferenceEquals(_publicStatePKID, null)) {
                        _publicStatePKID = new Int64APColumnDef(this, "PublicStatePKID", false);
                        _publicStatePKID.Display = "公开设置";
                    }
                    return _publicStatePKID;
                }
            }
            
            /// <summary>
            /// DownloadStatePKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef DownloadStatePKID {
                get {
                    if (Object.ReferenceEquals(_downloadStatePKID, null)) {
                        _downloadStatePKID = new Int64APColumnDef(this, "DownloadStatePKID", false);
                        _downloadStatePKID.Display = "下载设置";
                    }
                    return _downloadStatePKID;
                }
            }
            
            /// <summary>
            /// StartDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef StartDate {
                get {
                    if (Object.ReferenceEquals(_startDate, null)) {
                        _startDate = new DateTimeAPColumnDef(this, "StartDate", false);
                        _startDate.Display = "起始时间";
                    }
                    return _startDate;
                }
            }
            
            /// <summary>
            /// EndDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef EndDate {
                get {
                    if (Object.ReferenceEquals(_endDate, null)) {
                        _endDate = new DateTimeAPColumnDef(this, "EndDate", false);
                        _endDate.Display = "结束时间";
                    }
                    return _endDate;
                }
            }
            
            /// <summary>
            /// UploadStartDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef UploadStartDate {
                get {
                    if (Object.ReferenceEquals(_uploadStartDate, null)) {
                        _uploadStartDate = new DateTimeAPColumnDef(this, "UploadStartDate", false);
                        _uploadStartDate.Display = "上传起始时间";
                    }
                    return _uploadStartDate;
                }
            }
            
            /// <summary>
            /// UploadEndDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef UploadEndDate {
                get {
                    if (Object.ReferenceEquals(_uploadEndDate, null)) {
                        _uploadEndDate = new DateTimeAPColumnDef(this, "UploadEndDate", false);
                        _uploadEndDate.Display = "上传结束时间";
                    }
                    return _uploadEndDate;
                }
            }
            
            /// <summary>
            /// IsCurrent ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef IsCurrent {
                get {
                    if (Object.ReferenceEquals(_isCurrent, null)) {
                        _isCurrent = new BooleanAPColumnDef(this, "IsCurrent", false);
                        _isCurrent.Display = "是否当前项目";
                    }
                    return _isCurrent;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual ActiveTableDef As(string name) {
                return new ActiveTableDef("Active", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, Active data, bool throwIfValidColumnName) {
                data.ActiveId = ActiveId.GetValue<long>(reader, throwIfValidColumnName);
                data.ActiveName = ActiveName.GetValue<string>(reader, throwIfValidColumnName);
                data.Description = Description.GetValue<string>(reader, throwIfValidColumnName);
                data.Year = Year.GetValue<int>(reader, throwIfValidColumnName);
                data.Company = Company.GetValue<string>(reader, throwIfValidColumnName);
                data.LevelPKID = LevelPKID.GetValue<long>(reader, throwIfValidColumnName);
                data.SemesterPKID = SemesterPKID.GetValue<long>(reader, throwIfValidColumnName);
                data.PublicStatePKID = PublicStatePKID.GetValue<long>(reader, throwIfValidColumnName, 10450);
                data.DownloadStatePKID = DownloadStatePKID.GetValue<long>(reader, throwIfValidColumnName, 10452);
                data.StartDate = StartDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.EndDate = EndDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.UploadStartDate = UploadStartDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.UploadEndDate = UploadEndDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.IsCurrent = IsCurrent.GetValue<bool>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual Active Map(IDataReader reader) {
                Active data = new Active();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual Active TolerantMap(IDataReader reader) {
                Active data = new Active();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<Active> MapList(IDataReader reader) {
                List<Active> list = new List<Active>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<Active> TolerantMapList(IDataReader reader) {
                List<Active> list = new List<Active>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class ResUserTableDef : APTableDef {
            
            private Int64APColumnDef _userId;
            
            private StringAPColumnDef _userName;
            
            private StringAPColumnDef _password;
            
            private StringAPColumnDef _passwordHash;
            
            private StringAPColumnDef _securityStamp;
            
            private StringAPColumnDef _question;
            
            private StringAPColumnDef _answer;
            
            private Int64APColumnDef _userTypePKID;
            
            private StringAPColumnDef _realName;
            
            private StringAPColumnDef _photoPath;
            
            private Int64APColumnDef _genderPKID;
            
            private StringAPColumnDef _iDCard;
            
            private StringAPColumnDef _email;
            
            private Int64APColumnDef _companyId;
            
            private Int64APColumnDef _provinceId;
            
            private Int64APColumnDef _areaId;
            
            private BooleanAPColumnDef _actived;
            
            private BooleanAPColumnDef _removed;
            
            private DateTimeAPColumnDef _registerTime;
            
            private DateTimeAPColumnDef _lastLoginTime;
            
            private Int32APColumnDef _loginCount;
            
            private StringAPColumnDef _mD5;
            
            public ResUserTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected ResUserTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// UserId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef UserId {
                get {
                    if (Object.ReferenceEquals(_userId, null)) {
                        _userId = new Int64APColumnDef(this, "UserId", false);
                        _userId.Display = "用户ID";
                    }
                    return _userId;
                }
            }
            
            /// <summary>
            /// UserName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef UserName {
                get {
                    if (Object.ReferenceEquals(_userName, null)) {
                        _userName = new StringAPColumnDef(this, "UserName", false, 255);
                        _userName.Display = "用户名";
                        _userName.Required = true;
                    }
                    return _userName;
                }
            }
            
            /// <summary>
            /// Password ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Password {
                get {
                    if (Object.ReferenceEquals(_password, null)) {
                        _password = new StringAPColumnDef(this, "Password", false, 255);
                        _password.Display = "密码";
                        _password.Required = true;
                    }
                    return _password;
                }
            }
            
            /// <summary>
            /// PasswordHash ColumnDef
            /// </summary>
            public virtual StringAPColumnDef PasswordHash {
                get {
                    if (Object.ReferenceEquals(_passwordHash, null)) {
                        _passwordHash = new StringAPColumnDef(this, "PasswordHash", false, 255);
                        _passwordHash.Display = "密码哈希";
                    }
                    return _passwordHash;
                }
            }
            
            /// <summary>
            /// SecurityStamp ColumnDef
            /// </summary>
            public virtual StringAPColumnDef SecurityStamp {
                get {
                    if (Object.ReferenceEquals(_securityStamp, null)) {
                        _securityStamp = new StringAPColumnDef(this, "SecurityStamp", false, 255);
                        _securityStamp.Display = "Salt";
                    }
                    return _securityStamp;
                }
            }
            
            /// <summary>
            /// Question ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Question {
                get {
                    if (Object.ReferenceEquals(_question, null)) {
                        _question = new StringAPColumnDef(this, "Question", false, 255);
                        _question.Display = "密码问题";
                    }
                    return _question;
                }
            }
            
            /// <summary>
            /// Answer ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Answer {
                get {
                    if (Object.ReferenceEquals(_answer, null)) {
                        _answer = new StringAPColumnDef(this, "Answer", false, 255);
                        _answer.Display = "密码答案";
                    }
                    return _answer;
                }
            }
            
            /// <summary>
            /// UserTypePKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef UserTypePKID {
                get {
                    if (Object.ReferenceEquals(_userTypePKID, null)) {
                        _userTypePKID = new Int64APColumnDef(this, "UserTypePKID", false);
                        _userTypePKID.Display = "用户角色";
                    }
                    return _userTypePKID;
                }
            }
            
            /// <summary>
            /// RealName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef RealName {
                get {
                    if (Object.ReferenceEquals(_realName, null)) {
                        _realName = new StringAPColumnDef(this, "RealName", false, 255);
                        _realName.Display = "实名";
                    }
                    return _realName;
                }
            }
            
            /// <summary>
            /// PhotoPath ColumnDef
            /// </summary>
            public virtual StringAPColumnDef PhotoPath {
                get {
                    if (Object.ReferenceEquals(_photoPath, null)) {
                        _photoPath = new StringAPColumnDef(this, "PhotoPath", false, 255);
                        _photoPath.Display = "头像";
                    }
                    return _photoPath;
                }
            }
            
            /// <summary>
            /// GenderPKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef GenderPKID {
                get {
                    if (Object.ReferenceEquals(_genderPKID, null)) {
                        _genderPKID = new Int64APColumnDef(this, "GenderPKID", false);
                        _genderPKID.Display = "性别";
                        _genderPKID.Required = true;
                    }
                    return _genderPKID;
                }
            }
            
            /// <summary>
            /// IDCard ColumnDef
            /// </summary>
            public virtual StringAPColumnDef IDCard {
                get {
                    if (Object.ReferenceEquals(_iDCard, null)) {
                        _iDCard = new StringAPColumnDef(this, "IDCard", false, 255);
                        _iDCard.Display = "身份证";
                    }
                    return _iDCard;
                }
            }
            
            /// <summary>
            /// Email ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Email {
                get {
                    if (Object.ReferenceEquals(_email, null)) {
                        _email = new StringAPColumnDef(this, "Email", false, 255);
                        _email.Display = "电子邮件";
                    }
                    return _email;
                }
            }
            
            /// <summary>
            /// CompanyId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef CompanyId {
                get {
                    if (Object.ReferenceEquals(_companyId, null)) {
                        _companyId = new Int64APColumnDef(this, "CompanyId", false);
                        _companyId.Display = "CompanyId";
                    }
                    return _companyId;
                }
            }
            
            /// <summary>
            /// ProvinceId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef ProvinceId {
                get {
                    if (Object.ReferenceEquals(_provinceId, null)) {
                        _provinceId = new Int64APColumnDef(this, "ProvinceId", false);
                        _provinceId.Display = "ProvinceId";
                    }
                    return _provinceId;
                }
            }
            
            /// <summary>
            /// AreaId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef AreaId {
                get {
                    if (Object.ReferenceEquals(_areaId, null)) {
                        _areaId = new Int64APColumnDef(this, "AreaId", false);
                        _areaId.Display = "AreaId";
                    }
                    return _areaId;
                }
            }
            
            /// <summary>
            /// Actived ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef Actived {
                get {
                    if (Object.ReferenceEquals(_actived, null)) {
                        _actived = new BooleanAPColumnDef(this, "Actived", false);
                        _actived.Display = "有效";
                    }
                    return _actived;
                }
            }
            
            /// <summary>
            /// Removed ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef Removed {
                get {
                    if (Object.ReferenceEquals(_removed, null)) {
                        _removed = new BooleanAPColumnDef(this, "Removed", false);
                        _removed.Display = "删除";
                    }
                    return _removed;
                }
            }
            
            /// <summary>
            /// RegisterTime ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef RegisterTime {
                get {
                    if (Object.ReferenceEquals(_registerTime, null)) {
                        _registerTime = new DateTimeAPColumnDef(this, "RegisterTime", false);
                        _registerTime.Display = "注册时间";
                    }
                    return _registerTime;
                }
            }
            
            /// <summary>
            /// LastLoginTime ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef LastLoginTime {
                get {
                    if (Object.ReferenceEquals(_lastLoginTime, null)) {
                        _lastLoginTime = new DateTimeAPColumnDef(this, "LastLoginTime", false);
                        _lastLoginTime.Display = "最后登录时间";
                    }
                    return _lastLoginTime;
                }
            }
            
            /// <summary>
            /// LoginCount ColumnDef
            /// </summary>
            public virtual Int32APColumnDef LoginCount {
                get {
                    if (Object.ReferenceEquals(_loginCount, null)) {
                        _loginCount = new Int32APColumnDef(this, "LoginCount", false);
                        _loginCount.Display = "登录次数";
                    }
                    return _loginCount;
                }
            }
            
            /// <summary>
            /// MD5 ColumnDef
            /// </summary>
            public virtual StringAPColumnDef MD5 {
                get {
                    if (Object.ReferenceEquals(_mD5, null)) {
                        _mD5 = new StringAPColumnDef(this, "MD5", false, 255);
                        _mD5.Display = "MD5";
                    }
                    return _mD5;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual ResUserTableDef As(string name) {
                return new ResUserTableDef("ResUser", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, ResUser data, bool throwIfValidColumnName) {
                data.UserId = UserId.GetValue<long>(reader, throwIfValidColumnName);
                data.UserName = UserName.GetValue<string>(reader, throwIfValidColumnName);
                data.Password = Password.GetValue<string>(reader, throwIfValidColumnName);
                data.PasswordHash = PasswordHash.GetValue<string>(reader, throwIfValidColumnName);
                data.SecurityStamp = SecurityStamp.GetValue<string>(reader, throwIfValidColumnName);
                data.Question = Question.GetValue<string>(reader, throwIfValidColumnName);
                data.Answer = Answer.GetValue<string>(reader, throwIfValidColumnName);
                data.UserTypePKID = UserTypePKID.GetValue<long>(reader, throwIfValidColumnName);
                data.RealName = RealName.GetValue<string>(reader, throwIfValidColumnName);
                data.PhotoPath = PhotoPath.GetValue<string>(reader, throwIfValidColumnName);
                data.GenderPKID = GenderPKID.GetValue<long>(reader, throwIfValidColumnName);
                data.IDCard = IDCard.GetValue<string>(reader, throwIfValidColumnName);
                data.Email = Email.GetValue<string>(reader, throwIfValidColumnName);
                data.CompanyId = CompanyId.GetValue<long>(reader, throwIfValidColumnName);
                data.ProvinceId = ProvinceId.GetValue<long>(reader, throwIfValidColumnName);
                data.AreaId = AreaId.GetValue<long>(reader, throwIfValidColumnName);
                data.Actived = Actived.GetValue<bool>(reader, throwIfValidColumnName);
                data.Removed = Removed.GetValue<bool>(reader, throwIfValidColumnName);
                data.RegisterTime = RegisterTime.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.LastLoginTime = LastLoginTime.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.LoginCount = LoginCount.GetValue<int>(reader, throwIfValidColumnName);
                data.MD5 = MD5.GetValue<string>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual ResUser Map(IDataReader reader) {
                ResUser data = new ResUser();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual ResUser TolerantMap(IDataReader reader) {
                ResUser data = new ResUser();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<ResUser> MapList(IDataReader reader) {
                List<ResUser> list = new List<ResUser>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<ResUser> TolerantMapList(IDataReader reader) {
                List<ResUser> list = new List<ResUser>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class ResCompanyTableDef : APTableDef {
            
            private Int64APColumnDef _companyId;
            
            private Int64APColumnDef _parentId;
            
            private StringAPColumnDef _path;
            
            private StringAPColumnDef _companyName;
            
            private StringAPColumnDef _address;
            
            private StringAPColumnDef _email;
            
            private StringAPColumnDef _phone;
            
            public ResCompanyTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected ResCompanyTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// CompanyId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef CompanyId {
                get {
                    if (Object.ReferenceEquals(_companyId, null)) {
                        _companyId = new Int64APColumnDef(this, "CompanyId", false);
                        _companyId.Display = "单位ID";
                    }
                    return _companyId;
                }
            }
            
            /// <summary>
            /// ParentId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef ParentId {
                get {
                    if (Object.ReferenceEquals(_parentId, null)) {
                        _parentId = new Int64APColumnDef(this, "ParentId", false);
                        _parentId.Display = "父ID";
                    }
                    return _parentId;
                }
            }
            
            /// <summary>
            /// Path ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Path {
                get {
                    if (Object.ReferenceEquals(_path, null)) {
                        _path = new StringAPColumnDef(this, "Path", false, 500);
                        _path.Display = "路径";
                        _path.Required = true;
                    }
                    return _path;
                }
            }
            
            /// <summary>
            /// CompanyName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef CompanyName {
                get {
                    if (Object.ReferenceEquals(_companyName, null)) {
                        _companyName = new StringAPColumnDef(this, "CompanyName", false, 255);
                        _companyName.Display = "单位名称";
                        _companyName.Required = true;
                    }
                    return _companyName;
                }
            }
            
            /// <summary>
            /// Address ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Address {
                get {
                    if (Object.ReferenceEquals(_address, null)) {
                        _address = new StringAPColumnDef(this, "Address", false, 255);
                        _address.Display = "地址";
                    }
                    return _address;
                }
            }
            
            /// <summary>
            /// Email ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Email {
                get {
                    if (Object.ReferenceEquals(_email, null)) {
                        _email = new StringAPColumnDef(this, "Email", false, 255);
                        _email.Display = "电子邮件";
                    }
                    return _email;
                }
            }
            
            /// <summary>
            /// Phone ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Phone {
                get {
                    if (Object.ReferenceEquals(_phone, null)) {
                        _phone = new StringAPColumnDef(this, "Phone", false, 255);
                        _phone.Display = "电话";
                    }
                    return _phone;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual ResCompanyTableDef As(string name) {
                return new ResCompanyTableDef("ResCompany", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, ResCompany data, bool throwIfValidColumnName) {
                data.CompanyId = CompanyId.GetValue<long>(reader, throwIfValidColumnName);
                data.ParentId = ParentId.GetValue<long>(reader, throwIfValidColumnName);
                data.Path = Path.GetValue<string>(reader, throwIfValidColumnName);
                data.CompanyName = CompanyName.GetValue<string>(reader, throwIfValidColumnName);
                data.Address = Address.GetValue<string>(reader, throwIfValidColumnName);
                data.Email = Email.GetValue<string>(reader, throwIfValidColumnName);
                data.Phone = Phone.GetValue<string>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual ResCompany Map(IDataReader reader) {
                ResCompany data = new ResCompany();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual ResCompany TolerantMap(IDataReader reader) {
                ResCompany data = new ResCompany();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<ResCompany> MapList(IDataReader reader) {
                List<ResCompany> list = new List<ResCompany>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<ResCompany> TolerantMapList(IDataReader reader) {
                List<ResCompany> list = new List<ResCompany>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class CroResourceTableDef : APTableDef {
            
            private Int64APColumnDef _crosourceId;
            
            private StringAPColumnDef _title;
            
            private StringAPColumnDef _author;
            
            private StringAPColumnDef _keywords;
            
            private StringAPColumnDef _description;
            
            private Int64APColumnDef _provinceId;
            
            private Int64APColumnDef _areaId;
            
            private Int64APColumnDef _companyId;
            
            private Int64APColumnDef _activeId;
            
            private StringAPColumnDef _authorCompany;
            
            private StringAPColumnDef _authorAddress;
            
            private StringAPColumnDef _authorEmail;
            
            private StringAPColumnDef _authorPhone;
            
            private Int64APColumnDef _stagePKID;
            
            private Int64APColumnDef _gradePKID;
            
            private Int64APColumnDef _resourceTypePKID;
            
            private Int64APColumnDef _subjectPKID;
            
            private Int64APColumnDef _courseTypePKID;
            
            private Int64APColumnDef _statePKID;
            
            private Int64APColumnDef _publicStatePKID;
            
            private Int64APColumnDef _downloadStatePKID;
            
            private Int64APColumnDef _winLevelPKID;
            
            private Int32APColumnDef _downCount;
            
            private Int32APColumnDef _favoriteCount;
            
            private Int32APColumnDef _viewCount;
            
            private Int32APColumnDef _commentCount;
            
            private Int32APColumnDef _eliteScore;
            
            private Int32APColumnDef _praiseCount;
            
            private Int64APColumnDef _auditor;
            
            private DateTimeAPColumnDef _auditedTime;
            
            private StringAPColumnDef _auditOpinion;
            
            private Int64APColumnDef _creator;
            
            private DateTimeAPColumnDef _createdTime;
            
            private Int64APColumnDef _lastModifier;
            
            private DateTimeAPColumnDef _lastModifiedTime;
            
            private DoubleAPColumnDef _score;
            
            private Int32APColumnDef _weiXinFavoriteCount;
            
            private Int32APColumnDef _weiXInPraiseCount;
            
            public CroResourceTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected CroResourceTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// CrosourceId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef CrosourceId {
                get {
                    if (Object.ReferenceEquals(_crosourceId, null)) {
                        _crosourceId = new Int64APColumnDef(this, "CrosourceId", false);
                        _crosourceId.Display = "作品ID";
                    }
                    return _crosourceId;
                }
            }
            
            /// <summary>
            /// Title ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Title {
                get {
                    if (Object.ReferenceEquals(_title, null)) {
                        _title = new StringAPColumnDef(this, "Title", false, 250);
                        _title.Display = "标题";
                        _title.Required = true;
                    }
                    return _title;
                }
            }
            
            /// <summary>
            /// Author ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Author {
                get {
                    if (Object.ReferenceEquals(_author, null)) {
                        _author = new StringAPColumnDef(this, "Author", false, 50);
                        _author.Display = "作者";
                        _author.Required = true;
                    }
                    return _author;
                }
            }
            
            /// <summary>
            /// Keywords ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Keywords {
                get {
                    if (Object.ReferenceEquals(_keywords, null)) {
                        _keywords = new StringAPColumnDef(this, "Keywords", false, 50);
                        _keywords.Display = "关键字";
                        _keywords.Required = true;
                    }
                    return _keywords;
                }
            }
            
            /// <summary>
            /// Description ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Description {
                get {
                    if (Object.ReferenceEquals(_description, null)) {
                        _description = new StringAPColumnDef(this, "Description", false, 30000);
                        _description.Display = "微课信息简介";
                    }
                    return _description;
                }
            }
            
            /// <summary>
            /// ProvinceId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef ProvinceId {
                get {
                    if (Object.ReferenceEquals(_provinceId, null)) {
                        _provinceId = new Int64APColumnDef(this, "ProvinceId", false);
                        _provinceId.Display = "所属省份";
                    }
                    return _provinceId;
                }
            }
            
            /// <summary>
            /// AreaId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef AreaId {
                get {
                    if (Object.ReferenceEquals(_areaId, null)) {
                        _areaId = new Int64APColumnDef(this, "AreaId", false);
                        _areaId.Display = "所属地区";
                    }
                    return _areaId;
                }
            }
            
            /// <summary>
            /// CompanyId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef CompanyId {
                get {
                    if (Object.ReferenceEquals(_companyId, null)) {
                        _companyId = new Int64APColumnDef(this, "CompanyId", false);
                        _companyId.Display = "所属学校";
                    }
                    return _companyId;
                }
            }
            
            /// <summary>
            /// ActiveId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef ActiveId {
                get {
                    if (Object.ReferenceEquals(_activeId, null)) {
                        _activeId = new Int64APColumnDef(this, "ActiveId", false);
                        _activeId.Display = "所属项目";
                    }
                    return _activeId;
                }
            }
            
            /// <summary>
            /// AuthorCompany ColumnDef
            /// </summary>
            public virtual StringAPColumnDef AuthorCompany {
                get {
                    if (Object.ReferenceEquals(_authorCompany, null)) {
                        _authorCompany = new StringAPColumnDef(this, "AuthorCompany", false, 50);
                        _authorCompany.Display = "作者单位";
                        _authorCompany.Required = true;
                    }
                    return _authorCompany;
                }
            }
            
            /// <summary>
            /// AuthorAddress ColumnDef
            /// </summary>
            public virtual StringAPColumnDef AuthorAddress {
                get {
                    if (Object.ReferenceEquals(_authorAddress, null)) {
                        _authorAddress = new StringAPColumnDef(this, "AuthorAddress", false, 50);
                        _authorAddress.Display = "指导教师";
                    }
                    return _authorAddress;
                }
            }
            
            /// <summary>
            /// AuthorEmail ColumnDef
            /// </summary>
            public virtual StringAPColumnDef AuthorEmail {
                get {
                    if (Object.ReferenceEquals(_authorEmail, null)) {
                        _authorEmail = new StringAPColumnDef(this, "AuthorEmail", false, 50);
                        _authorEmail.Display = "作者邮箱";
                    }
                    return _authorEmail;
                }
            }
            
            /// <summary>
            /// AuthorPhone ColumnDef
            /// </summary>
            public virtual StringAPColumnDef AuthorPhone {
                get {
                    if (Object.ReferenceEquals(_authorPhone, null)) {
                        _authorPhone = new StringAPColumnDef(this, "AuthorPhone", false, 50);
                        _authorPhone.Display = "作者电话";
                    }
                    return _authorPhone;
                }
            }
            
            /// <summary>
            /// StagePKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef StagePKID {
                get {
                    if (Object.ReferenceEquals(_stagePKID, null)) {
                        _stagePKID = new Int64APColumnDef(this, "StagePKID", false);
                        _stagePKID.Display = "学段";
                        _stagePKID.Required = true;
                    }
                    return _stagePKID;
                }
            }
            
            /// <summary>
            /// GradePKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef GradePKID {
                get {
                    if (Object.ReferenceEquals(_gradePKID, null)) {
                        _gradePKID = new Int64APColumnDef(this, "GradePKID", false);
                        _gradePKID.Display = "年级";
                        _gradePKID.Required = true;
                    }
                    return _gradePKID;
                }
            }
            
            /// <summary>
            /// ResourceTypePKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef ResourceTypePKID {
                get {
                    if (Object.ReferenceEquals(_resourceTypePKID, null)) {
                        _resourceTypePKID = new Int64APColumnDef(this, "ResourceTypePKID", false);
                        _resourceTypePKID.Display = "作品类型";
                    }
                    return _resourceTypePKID;
                }
            }
            
            /// <summary>
            /// SubjectPKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef SubjectPKID {
                get {
                    if (Object.ReferenceEquals(_subjectPKID, null)) {
                        _subjectPKID = new Int64APColumnDef(this, "SubjectPKID", false);
                        _subjectPKID.Display = "学科";
                        _subjectPKID.Required = true;
                    }
                    return _subjectPKID;
                }
            }
            
            /// <summary>
            /// CourseTypePKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef CourseTypePKID {
                get {
                    if (Object.ReferenceEquals(_courseTypePKID, null)) {
                        _courseTypePKID = new Int64APColumnDef(this, "CourseTypePKID", false);
                        _courseTypePKID.Display = "微课类型";
                        _courseTypePKID.Required = true;
                    }
                    return _courseTypePKID;
                }
            }
            
            /// <summary>
            /// StatePKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef StatePKID {
                get {
                    if (Object.ReferenceEquals(_statePKID, null)) {
                        _statePKID = new Int64APColumnDef(this, "StatePKID", false);
                        _statePKID.Display = "状态";
                    }
                    return _statePKID;
                }
            }
            
            /// <summary>
            /// PublicStatePKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef PublicStatePKID {
                get {
                    if (Object.ReferenceEquals(_publicStatePKID, null)) {
                        _publicStatePKID = new Int64APColumnDef(this, "PublicStatePKID", false);
                        _publicStatePKID.Display = "公开设置";
                    }
                    return _publicStatePKID;
                }
            }
            
            /// <summary>
            /// DownloadStatePKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef DownloadStatePKID {
                get {
                    if (Object.ReferenceEquals(_downloadStatePKID, null)) {
                        _downloadStatePKID = new Int64APColumnDef(this, "DownloadStatePKID", false);
                        _downloadStatePKID.Display = "下载设置";
                    }
                    return _downloadStatePKID;
                }
            }
            
            /// <summary>
            /// WinLevelPKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef WinLevelPKID {
                get {
                    if (Object.ReferenceEquals(_winLevelPKID, null)) {
                        _winLevelPKID = new Int64APColumnDef(this, "WinLevelPKID", false);
                        _winLevelPKID.Display = "获奖等级";
                    }
                    return _winLevelPKID;
                }
            }
            
            /// <summary>
            /// DownCount ColumnDef
            /// </summary>
            public virtual Int32APColumnDef DownCount {
                get {
                    if (Object.ReferenceEquals(_downCount, null)) {
                        _downCount = new Int32APColumnDef(this, "DownCount", false);
                        _downCount.Display = "下载次数";
                    }
                    return _downCount;
                }
            }
            
            /// <summary>
            /// FavoriteCount ColumnDef
            /// </summary>
            public virtual Int32APColumnDef FavoriteCount {
                get {
                    if (Object.ReferenceEquals(_favoriteCount, null)) {
                        _favoriteCount = new Int32APColumnDef(this, "FavoriteCount", false);
                        _favoriteCount.Display = "收藏次数";
                    }
                    return _favoriteCount;
                }
            }
            
            /// <summary>
            /// ViewCount ColumnDef
            /// </summary>
            public virtual Int32APColumnDef ViewCount {
                get {
                    if (Object.ReferenceEquals(_viewCount, null)) {
                        _viewCount = new Int32APColumnDef(this, "ViewCount", false);
                        _viewCount.Display = "点击次数";
                    }
                    return _viewCount;
                }
            }
            
            /// <summary>
            /// CommentCount ColumnDef
            /// </summary>
            public virtual Int32APColumnDef CommentCount {
                get {
                    if (Object.ReferenceEquals(_commentCount, null)) {
                        _commentCount = new Int32APColumnDef(this, "CommentCount", false);
                        _commentCount.Display = "评论次数";
                    }
                    return _commentCount;
                }
            }
            
            /// <summary>
            /// EliteScore ColumnDef
            /// </summary>
            public virtual Int32APColumnDef EliteScore {
                get {
                    if (Object.ReferenceEquals(_eliteScore, null)) {
                        _eliteScore = new Int32APColumnDef(this, "EliteScore", false);
                        _eliteScore.Display = "加精分数";
                    }
                    return _eliteScore;
                }
            }
            
            /// <summary>
            /// PraiseCount ColumnDef
            /// </summary>
            public virtual Int32APColumnDef PraiseCount {
                get {
                    if (Object.ReferenceEquals(_praiseCount, null)) {
                        _praiseCount = new Int32APColumnDef(this, "PraiseCount", false);
                        _praiseCount.Display = "点赞次数";
                    }
                    return _praiseCount;
                }
            }
            
            /// <summary>
            /// Auditor ColumnDef
            /// </summary>
            public virtual Int64APColumnDef Auditor {
                get {
                    if (Object.ReferenceEquals(_auditor, null)) {
                        _auditor = new Int64APColumnDef(this, "Auditor", false);
                        _auditor.Display = "审核人ID";
                    }
                    return _auditor;
                }
            }
            
            /// <summary>
            /// AuditedTime ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef AuditedTime {
                get {
                    if (Object.ReferenceEquals(_auditedTime, null)) {
                        _auditedTime = new DateTimeAPColumnDef(this, "AuditedTime", true);
                        _auditedTime.Display = "审核时间";
                    }
                    return _auditedTime;
                }
            }
            
            /// <summary>
            /// AuditOpinion ColumnDef
            /// </summary>
            public virtual StringAPColumnDef AuditOpinion {
                get {
                    if (Object.ReferenceEquals(_auditOpinion, null)) {
                        _auditOpinion = new StringAPColumnDef(this, "AuditOpinion", false, 255);
                        _auditOpinion.Display = "审核意见";
                    }
                    return _auditOpinion;
                }
            }
            
            /// <summary>
            /// Creator ColumnDef
            /// </summary>
            public virtual Int64APColumnDef Creator {
                get {
                    if (Object.ReferenceEquals(_creator, null)) {
                        _creator = new Int64APColumnDef(this, "Creator", false);
                        _creator.Display = "Creator";
                    }
                    return _creator;
                }
            }
            
            /// <summary>
            /// CreatedTime ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef CreatedTime {
                get {
                    if (Object.ReferenceEquals(_createdTime, null)) {
                        _createdTime = new DateTimeAPColumnDef(this, "CreatedTime", false);
                        _createdTime.Display = "CreatedTime";
                    }
                    return _createdTime;
                }
            }
            
            /// <summary>
            /// LastModifier ColumnDef
            /// </summary>
            public virtual Int64APColumnDef LastModifier {
                get {
                    if (Object.ReferenceEquals(_lastModifier, null)) {
                        _lastModifier = new Int64APColumnDef(this, "LastModifier", false);
                        _lastModifier.Display = "LastModifier";
                    }
                    return _lastModifier;
                }
            }
            
            /// <summary>
            /// LastModifiedTime ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef LastModifiedTime {
                get {
                    if (Object.ReferenceEquals(_lastModifiedTime, null)) {
                        _lastModifiedTime = new DateTimeAPColumnDef(this, "LastModifiedTime", false);
                        _lastModifiedTime.Display = "LastModifiedTime";
                    }
                    return _lastModifiedTime;
                }
            }
            
            /// <summary>
            /// Score ColumnDef
            /// </summary>
            public virtual DoubleAPColumnDef Score {
                get {
                    if (Object.ReferenceEquals(_score, null)) {
                        _score = new DoubleAPColumnDef(this, "Score", false);
                        _score.Display = "作品得分";
                    }
                    return _score;
                }
            }
            
            /// <summary>
            /// WeiXinFavoriteCount ColumnDef
            /// </summary>
            public virtual Int32APColumnDef WeiXinFavoriteCount {
                get {
                    if (Object.ReferenceEquals(_weiXinFavoriteCount, null)) {
                        _weiXinFavoriteCount = new Int32APColumnDef(this, "WeiXinFavoriteCount", false);
                        _weiXinFavoriteCount.Display = "微信收藏次数";
                    }
                    return _weiXinFavoriteCount;
                }
            }
            
            /// <summary>
            /// WeiXInPraiseCount ColumnDef
            /// </summary>
            public virtual Int32APColumnDef WeiXInPraiseCount {
                get {
                    if (Object.ReferenceEquals(_weiXInPraiseCount, null)) {
                        _weiXInPraiseCount = new Int32APColumnDef(this, "WeiXInPraiseCount", false);
                        _weiXInPraiseCount.Display = "微信点赞次数";
                    }
                    return _weiXInPraiseCount;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual CroResourceTableDef As(string name) {
                return new CroResourceTableDef("CroResource", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, CroResource data, bool throwIfValidColumnName) {
                data.CrosourceId = CrosourceId.GetValue<long>(reader, throwIfValidColumnName);
                data.Title = Title.GetValue<string>(reader, throwIfValidColumnName);
                data.Author = Author.GetValue<string>(reader, throwIfValidColumnName);
                data.Keywords = Keywords.GetValue<string>(reader, throwIfValidColumnName);
                data.Description = Description.GetValue<string>(reader, throwIfValidColumnName);
                data.ProvinceId = ProvinceId.GetValue<long>(reader, throwIfValidColumnName);
                data.AreaId = AreaId.GetValue<long>(reader, throwIfValidColumnName);
                data.CompanyId = CompanyId.GetValue<long>(reader, throwIfValidColumnName);
                data.ActiveId = ActiveId.GetValue<long>(reader, throwIfValidColumnName);
                data.AuthorCompany = AuthorCompany.GetValue<string>(reader, throwIfValidColumnName);
                data.AuthorAddress = AuthorAddress.GetValue<string>(reader, throwIfValidColumnName);
                data.AuthorEmail = AuthorEmail.GetValue<string>(reader, throwIfValidColumnName);
                data.AuthorPhone = AuthorPhone.GetValue<string>(reader, throwIfValidColumnName);
                data.StagePKID = StagePKID.GetValue<long>(reader, throwIfValidColumnName);
                data.GradePKID = GradePKID.GetValue<long>(reader, throwIfValidColumnName);
                data.ResourceTypePKID = ResourceTypePKID.GetValue<long>(reader, throwIfValidColumnName);
                data.SubjectPKID = SubjectPKID.GetValue<long>(reader, throwIfValidColumnName);
                data.CourseTypePKID = CourseTypePKID.GetValue<long>(reader, throwIfValidColumnName);
                data.StatePKID = StatePKID.GetValue<long>(reader, throwIfValidColumnName);
                data.PublicStatePKID = PublicStatePKID.GetValue<long>(reader, throwIfValidColumnName, 10450);
                data.DownloadStatePKID = DownloadStatePKID.GetValue<long>(reader, throwIfValidColumnName, 10452);
                data.WinLevelPKID = WinLevelPKID.GetValue<long>(reader, throwIfValidColumnName, 0);
                data.DownCount = DownCount.GetValue<int>(reader, throwIfValidColumnName);
                data.FavoriteCount = FavoriteCount.GetValue<int>(reader, throwIfValidColumnName);
                data.ViewCount = ViewCount.GetValue<int>(reader, throwIfValidColumnName);
                data.CommentCount = CommentCount.GetValue<int>(reader, throwIfValidColumnName);
                data.EliteScore = EliteScore.GetValue<int>(reader, throwIfValidColumnName);
                data.PraiseCount = PraiseCount.GetValue<int>(reader, throwIfValidColumnName, 0);
                data.Auditor = Auditor.GetValue<long>(reader, throwIfValidColumnName);
                data.AuditedTime = AuditedTime.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.AuditOpinion = AuditOpinion.GetValue<string>(reader, throwIfValidColumnName);
                data.Creator = Creator.GetValue<long>(reader, throwIfValidColumnName);
                data.CreatedTime = CreatedTime.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.LastModifier = LastModifier.GetValue<long>(reader, throwIfValidColumnName);
                data.LastModifiedTime = LastModifiedTime.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.Score = Score.GetValue<double>(reader, throwIfValidColumnName);
                data.WeiXinFavoriteCount = WeiXinFavoriteCount.GetValue<int>(reader, throwIfValidColumnName);
                data.WeiXInPraiseCount = WeiXInPraiseCount.GetValue<int>(reader, throwIfValidColumnName, 0);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual CroResource Map(IDataReader reader) {
                CroResource data = new CroResource();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual CroResource TolerantMap(IDataReader reader) {
                CroResource data = new CroResource();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<CroResource> MapList(IDataReader reader) {
                List<CroResource> list = new List<CroResource>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<CroResource> TolerantMapList(IDataReader reader) {
                List<CroResource> list = new List<CroResource>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class MicroCourseTableDef : APTableDef {
            
            private Int64APColumnDef _courseId;
            
            private StringAPColumnDef _courseTitle;
            
            private Int64APColumnDef _resourceId;
            
            private Int64APColumnDef _videoId;
            
            private Int64APColumnDef _coverId;
            
            private Int64APColumnDef _designId;
            
            private Int64APColumnDef _summaryId;
            
            private Int64APColumnDef _coursewareId;
            
            private Int64APColumnDef _attachmentId;
            
            private Int64APColumnDef _charpterSortId;
            
            private Int32APColumnDef _playCount;
            
            private Int32APColumnDef _downCount;
            
            private Int32APColumnDef _starCount;
            
            private Int32APColumnDef _weiXinPlayCount;
            
            public MicroCourseTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected MicroCourseTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// CourseId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef CourseId {
                get {
                    if (Object.ReferenceEquals(_courseId, null)) {
                        _courseId = new Int64APColumnDef(this, "CourseId", false);
                        _courseId.Display = "CourseId";
                    }
                    return _courseId;
                }
            }
            
            /// <summary>
            /// CourseTitle ColumnDef
            /// </summary>
            public virtual StringAPColumnDef CourseTitle {
                get {
                    if (Object.ReferenceEquals(_courseTitle, null)) {
                        _courseTitle = new StringAPColumnDef(this, "CourseTitle", false, 50);
                        _courseTitle.Display = "微课标题";
                        _courseTitle.Required = true;
                    }
                    return _courseTitle;
                }
            }
            
            /// <summary>
            /// ResourceId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef ResourceId {
                get {
                    if (Object.ReferenceEquals(_resourceId, null)) {
                        _resourceId = new Int64APColumnDef(this, "ResourceId", false);
                        _resourceId.Display = "微课程作品";
                        _resourceId.Required = true;
                    }
                    return _resourceId;
                }
            }
            
            /// <summary>
            /// VideoId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef VideoId {
                get {
                    if (Object.ReferenceEquals(_videoId, null)) {
                        _videoId = new Int64APColumnDef(this, "VideoId", false);
                        _videoId.Display = "视频文件";
                        _videoId.Required = true;
                    }
                    return _videoId;
                }
            }
            
            /// <summary>
            /// CoverId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef CoverId {
                get {
                    if (Object.ReferenceEquals(_coverId, null)) {
                        _coverId = new Int64APColumnDef(this, "CoverId", false);
                        _coverId.Display = "封面文件";
                    }
                    return _coverId;
                }
            }
            
            /// <summary>
            /// DesignId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef DesignId {
                get {
                    if (Object.ReferenceEquals(_designId, null)) {
                        _designId = new Int64APColumnDef(this, "DesignId", false);
                        _designId.Display = "设计";
                    }
                    return _designId;
                }
            }
            
            /// <summary>
            /// SummaryId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef SummaryId {
                get {
                    if (Object.ReferenceEquals(_summaryId, null)) {
                        _summaryId = new Int64APColumnDef(this, "SummaryId", false);
                        _summaryId.Display = "反思";
                    }
                    return _summaryId;
                }
            }
            
            /// <summary>
            /// CoursewareId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef CoursewareId {
                get {
                    if (Object.ReferenceEquals(_coursewareId, null)) {
                        _coursewareId = new Int64APColumnDef(this, "CoursewareId", false);
                        _coursewareId.Display = "课件";
                    }
                    return _coursewareId;
                }
            }
            
            /// <summary>
            /// AttachmentId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef AttachmentId {
                get {
                    if (Object.ReferenceEquals(_attachmentId, null)) {
                        _attachmentId = new Int64APColumnDef(this, "AttachmentId", false);
                        _attachmentId.Display = "附件";
                    }
                    return _attachmentId;
                }
            }
            
            /// <summary>
            /// CharpterSortId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef CharpterSortId {
                get {
                    if (Object.ReferenceEquals(_charpterSortId, null)) {
                        _charpterSortId = new Int64APColumnDef(this, "CharpterSortId", false);
                        _charpterSortId.Display = "CharpterSortId";
                    }
                    return _charpterSortId;
                }
            }
            
            /// <summary>
            /// PlayCount ColumnDef
            /// </summary>
            public virtual Int32APColumnDef PlayCount {
                get {
                    if (Object.ReferenceEquals(_playCount, null)) {
                        _playCount = new Int32APColumnDef(this, "PlayCount", false);
                        _playCount.Display = "播放次数";
                    }
                    return _playCount;
                }
            }
            
            /// <summary>
            /// DownCount ColumnDef
            /// </summary>
            public virtual Int32APColumnDef DownCount {
                get {
                    if (Object.ReferenceEquals(_downCount, null)) {
                        _downCount = new Int32APColumnDef(this, "DownCount", false);
                        _downCount.Display = "下载次数";
                    }
                    return _downCount;
                }
            }
            
            /// <summary>
            /// StarCount ColumnDef
            /// </summary>
            public virtual Int32APColumnDef StarCount {
                get {
                    if (Object.ReferenceEquals(_starCount, null)) {
                        _starCount = new Int32APColumnDef(this, "StarCount", false);
                        _starCount.Display = "评分次数";
                    }
                    return _starCount;
                }
            }
            
            /// <summary>
            /// WeiXinPlayCount ColumnDef
            /// </summary>
            public virtual Int32APColumnDef WeiXinPlayCount {
                get {
                    if (Object.ReferenceEquals(_weiXinPlayCount, null)) {
                        _weiXinPlayCount = new Int32APColumnDef(this, "WeiXinPlayCount", false);
                        _weiXinPlayCount.Display = "微信播放次数";
                    }
                    return _weiXinPlayCount;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual MicroCourseTableDef As(string name) {
                return new MicroCourseTableDef("MicroCourse", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, MicroCourse data, bool throwIfValidColumnName) {
                data.CourseId = CourseId.GetValue<long>(reader, throwIfValidColumnName);
                data.CourseTitle = CourseTitle.GetValue<string>(reader, throwIfValidColumnName);
                data.ResourceId = ResourceId.GetValue<long>(reader, throwIfValidColumnName);
                data.VideoId = VideoId.GetValue<long>(reader, throwIfValidColumnName);
                data.CoverId = CoverId.GetValue<long>(reader, throwIfValidColumnName);
                data.DesignId = DesignId.GetValue<long>(reader, throwIfValidColumnName);
                data.SummaryId = SummaryId.GetValue<long>(reader, throwIfValidColumnName);
                data.CoursewareId = CoursewareId.GetValue<long>(reader, throwIfValidColumnName);
                data.AttachmentId = AttachmentId.GetValue<long>(reader, throwIfValidColumnName);
                data.CharpterSortId = CharpterSortId.GetValue<long>(reader, throwIfValidColumnName);
                data.PlayCount = PlayCount.GetValue<int>(reader, throwIfValidColumnName);
                data.DownCount = DownCount.GetValue<int>(reader, throwIfValidColumnName);
                data.StarCount = StarCount.GetValue<int>(reader, throwIfValidColumnName);
                data.WeiXinPlayCount = WeiXinPlayCount.GetValue<int>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual MicroCourse Map(IDataReader reader) {
                MicroCourse data = new MicroCourse();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual MicroCourse TolerantMap(IDataReader reader) {
                MicroCourse data = new MicroCourse();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<MicroCourse> MapList(IDataReader reader) {
                List<MicroCourse> list = new List<MicroCourse>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<MicroCourse> TolerantMapList(IDataReader reader) {
                List<MicroCourse> list = new List<MicroCourse>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class FilesTableDef : APTableDef {
            
            private Int64APColumnDef _fileId;
            
            private StringAPColumnDef _fileName;
            
            private StringAPColumnDef _extName;
            
            private StringAPColumnDef _filePath;
            
            private Int64APColumnDef _fileSize;
            
            private StringAPColumnDef _md5;
            
            private StringAPColumnDef _code;
            
            public FilesTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected FilesTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// FileId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef FileId {
                get {
                    if (Object.ReferenceEquals(_fileId, null)) {
                        _fileId = new Int64APColumnDef(this, "FileId", false);
                        _fileId.Display = "文件ID";
                    }
                    return _fileId;
                }
            }
            
            /// <summary>
            /// FileName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef FileName {
                get {
                    if (Object.ReferenceEquals(_fileName, null)) {
                        _fileName = new StringAPColumnDef(this, "FileName", false, 100);
                        _fileName.Display = "文件名称";
                        _fileName.Required = true;
                    }
                    return _fileName;
                }
            }
            
            /// <summary>
            /// ExtName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ExtName {
                get {
                    if (Object.ReferenceEquals(_extName, null)) {
                        _extName = new StringAPColumnDef(this, "ExtName", false, 20);
                        _extName.Display = "后缀名称";
                        _extName.Required = true;
                    }
                    return _extName;
                }
            }
            
            /// <summary>
            /// FilePath ColumnDef
            /// </summary>
            public virtual StringAPColumnDef FilePath {
                get {
                    if (Object.ReferenceEquals(_filePath, null)) {
                        _filePath = new StringAPColumnDef(this, "FilePath", false, 255);
                        _filePath.Display = "作品路径";
                        _filePath.Required = true;
                    }
                    return _filePath;
                }
            }
            
            /// <summary>
            /// FileSize ColumnDef
            /// </summary>
            public virtual Int64APColumnDef FileSize {
                get {
                    if (Object.ReferenceEquals(_fileSize, null)) {
                        _fileSize = new Int64APColumnDef(this, "FileSize", false);
                        _fileSize.Display = "文件大小";
                        _fileSize.Required = true;
                    }
                    return _fileSize;
                }
            }
            
            /// <summary>
            /// Md5 ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Md5 {
                get {
                    if (Object.ReferenceEquals(_md5, null)) {
                        _md5 = new StringAPColumnDef(this, "Md5", false, 50);
                        _md5.Display = "Md5";
                        _md5.Required = true;
                    }
                    return _md5;
                }
            }
            
            /// <summary>
            /// Code ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Code {
                get {
                    if (Object.ReferenceEquals(_code, null)) {
                        _code = new StringAPColumnDef(this, "Code", false, 20);
                        _code.Display = "Code";
                    }
                    return _code;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual FilesTableDef As(string name) {
                return new FilesTableDef("Files", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, Files data, bool throwIfValidColumnName) {
                data.FileId = FileId.GetValue<long>(reader, throwIfValidColumnName);
                data.FileName = FileName.GetValue<string>(reader, throwIfValidColumnName);
                data.ExtName = ExtName.GetValue<string>(reader, throwIfValidColumnName);
                data.FilePath = FilePath.GetValue<string>(reader, throwIfValidColumnName);
                data.FileSize = FileSize.GetValue<long>(reader, throwIfValidColumnName);
                data.Md5 = Md5.GetValue<string>(reader, throwIfValidColumnName);
                data.Code = Code.GetValue<string>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual Files Map(IDataReader reader) {
                Files data = new Files();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual Files TolerantMap(IDataReader reader) {
                Files data = new Files();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<Files> MapList(IDataReader reader) {
                List<Files> list = new List<Files>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<Files> TolerantMapList(IDataReader reader) {
                List<Files> list = new List<Files>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class IndicationTableDef : APTableDef {
            
            private Int64APColumnDef _indicationId;
            
            private StringAPColumnDef _indicationName;
            
            private StringAPColumnDef _description;
            
            private Int64APColumnDef _typePKID;
            
            private Int64APColumnDef _levelPKID;
            
            private Int32APColumnDef _score;
            
            private Int32APColumnDef _status;
            
            private Int64APColumnDef _activeId;
            
            public IndicationTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected IndicationTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// IndicationId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef IndicationId {
                get {
                    if (Object.ReferenceEquals(_indicationId, null)) {
                        _indicationId = new Int64APColumnDef(this, "ID", false);
                        _indicationId.Display = "ID";
                    }
                    return _indicationId;
                }
            }
            
            /// <summary>
            /// IndicationName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef IndicationName {
                get {
                    if (Object.ReferenceEquals(_indicationName, null)) {
                        _indicationName = new StringAPColumnDef(this, "Name", false, 50);
                        _indicationName.Display = "指标子项";
                        _indicationName.Required = true;
                    }
                    return _indicationName;
                }
            }
            
            /// <summary>
            /// Description ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Description {
                get {
                    if (Object.ReferenceEquals(_description, null)) {
                        _description = new StringAPColumnDef(this, "Description", false, 40000);
                        _description.Display = "指标描述";
                        _description.Required = true;
                    }
                    return _description;
                }
            }
            
            /// <summary>
            /// TypePKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef TypePKID {
                get {
                    if (Object.ReferenceEquals(_typePKID, null)) {
                        _typePKID = new Int64APColumnDef(this, "TypePKID", false);
                        _typePKID.Display = "评价项目";
                    }
                    return _typePKID;
                }
            }
            
            /// <summary>
            /// LevelPKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef LevelPKID {
                get {
                    if (Object.ReferenceEquals(_levelPKID, null)) {
                        _levelPKID = new Int64APColumnDef(this, "LevelPKID", false);
                        _levelPKID.Display = "评审级别";
                    }
                    return _levelPKID;
                }
            }
            
            /// <summary>
            /// Score ColumnDef
            /// </summary>
            public virtual Int32APColumnDef Score {
                get {
                    if (Object.ReferenceEquals(_score, null)) {
                        _score = new Int32APColumnDef(this, "Score", false);
                        _score.Display = "最大分值";
                    }
                    return _score;
                }
            }
            
            /// <summary>
            /// Status ColumnDef
            /// </summary>
            public virtual Int32APColumnDef Status {
                get {
                    if (Object.ReferenceEquals(_status, null)) {
                        _status = new Int32APColumnDef(this, "Status", false);
                        _status.Display = "Status";
                    }
                    return _status;
                }
            }
            
            /// <summary>
            /// ActiveId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef ActiveId {
                get {
                    if (Object.ReferenceEquals(_activeId, null)) {
                        _activeId = new Int64APColumnDef(this, "ActiveId", false);
                        _activeId.Display = "所属活动";
                    }
                    return _activeId;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual IndicationTableDef As(string name) {
                return new IndicationTableDef("Indication", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, Indication data, bool throwIfValidColumnName) {
                data.IndicationId = IndicationId.GetValue<long>(reader, throwIfValidColumnName);
                data.IndicationName = IndicationName.GetValue<string>(reader, throwIfValidColumnName);
                data.Description = Description.GetValue<string>(reader, throwIfValidColumnName);
                data.TypePKID = TypePKID.GetValue<long>(reader, throwIfValidColumnName);
                data.LevelPKID = LevelPKID.GetValue<long>(reader, throwIfValidColumnName);
                data.Score = Score.GetValue<int>(reader, throwIfValidColumnName);
                data.Status = Status.GetValue<int>(reader, throwIfValidColumnName);
                data.ActiveId = ActiveId.GetValue<long>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual Indication Map(IDataReader reader) {
                Indication data = new Indication();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual Indication TolerantMap(IDataReader reader) {
                Indication data = new Indication();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<Indication> MapList(IDataReader reader) {
                List<Indication> list = new List<Indication>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<Indication> TolerantMapList(IDataReader reader) {
                List<Indication> list = new List<Indication>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class EvalGroupTableDef : APTableDef {
            
            private Int64APColumnDef _groupId;
            
            private StringAPColumnDef _groupName;
            
            private Int64APColumnDef _levelPKID;
            
            private DateTimeAPColumnDef _startDate;
            
            private DateTimeAPColumnDef _endDate;
            
            private Int64APColumnDef _activeId;
            
            private Int64APColumnDef _provinceId;
            
            private Int64APColumnDef _areaId;
            
            private Int64APColumnDef _companyId;
            
            public EvalGroupTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected EvalGroupTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// GroupId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef GroupId {
                get {
                    if (Object.ReferenceEquals(_groupId, null)) {
                        _groupId = new Int64APColumnDef(this, "ID", false);
                        _groupId.Display = "ID";
                    }
                    return _groupId;
                }
            }
            
            /// <summary>
            /// GroupName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef GroupName {
                get {
                    if (Object.ReferenceEquals(_groupName, null)) {
                        _groupName = new StringAPColumnDef(this, "Name", false, 100);
                        _groupName.Display = "组名称";
                        _groupName.Required = true;
                    }
                    return _groupName;
                }
            }
            
            /// <summary>
            /// LevelPKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef LevelPKID {
                get {
                    if (Object.ReferenceEquals(_levelPKID, null)) {
                        _levelPKID = new Int64APColumnDef(this, "LevelPKID", false);
                        _levelPKID.Display = "评审级别";
                    }
                    return _levelPKID;
                }
            }
            
            /// <summary>
            /// StartDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef StartDate {
                get {
                    if (Object.ReferenceEquals(_startDate, null)) {
                        _startDate = new DateTimeAPColumnDef(this, "StartDate", false);
                        _startDate.Display = "起始时间";
                    }
                    return _startDate;
                }
            }
            
            /// <summary>
            /// EndDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef EndDate {
                get {
                    if (Object.ReferenceEquals(_endDate, null)) {
                        _endDate = new DateTimeAPColumnDef(this, "EndDate", false);
                        _endDate.Display = "结束时间";
                    }
                    return _endDate;
                }
            }
            
            /// <summary>
            /// ActiveId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef ActiveId {
                get {
                    if (Object.ReferenceEquals(_activeId, null)) {
                        _activeId = new Int64APColumnDef(this, "ActiveId", false);
                        _activeId.Display = "所属活动";
                    }
                    return _activeId;
                }
            }
            
            /// <summary>
            /// ProvinceId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef ProvinceId {
                get {
                    if (Object.ReferenceEquals(_provinceId, null)) {
                        _provinceId = new Int64APColumnDef(this, "ProvinceId", false);
                        _provinceId.Display = "省份";
                    }
                    return _provinceId;
                }
            }
            
            /// <summary>
            /// AreaId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef AreaId {
                get {
                    if (Object.ReferenceEquals(_areaId, null)) {
                        _areaId = new Int64APColumnDef(this, "AreaId", false);
                        _areaId.Display = "地区";
                    }
                    return _areaId;
                }
            }
            
            /// <summary>
            /// CompanyId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef CompanyId {
                get {
                    if (Object.ReferenceEquals(_companyId, null)) {
                        _companyId = new Int64APColumnDef(this, "CompanyId", false);
                        _companyId.Display = "单位";
                    }
                    return _companyId;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual EvalGroupTableDef As(string name) {
                return new EvalGroupTableDef("EvalGroup", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, EvalGroup data, bool throwIfValidColumnName) {
                data.GroupId = GroupId.GetValue<long>(reader, throwIfValidColumnName);
                data.GroupName = GroupName.GetValue<string>(reader, throwIfValidColumnName);
                data.LevelPKID = LevelPKID.GetValue<long>(reader, throwIfValidColumnName);
                data.StartDate = StartDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.EndDate = EndDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.ActiveId = ActiveId.GetValue<long>(reader, throwIfValidColumnName);
                data.ProvinceId = ProvinceId.GetValue<long>(reader, throwIfValidColumnName);
                data.AreaId = AreaId.GetValue<long>(reader, throwIfValidColumnName);
                data.CompanyId = CompanyId.GetValue<long>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual EvalGroup Map(IDataReader reader) {
                EvalGroup data = new EvalGroup();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual EvalGroup TolerantMap(IDataReader reader) {
                EvalGroup data = new EvalGroup();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<EvalGroup> MapList(IDataReader reader) {
                List<EvalGroup> list = new List<EvalGroup>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<EvalGroup> TolerantMapList(IDataReader reader) {
                List<EvalGroup> list = new List<EvalGroup>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class EvalResultTableDef : APTableDef {
            
            private Int64APColumnDef _resultId;
            
            private Int64APColumnDef _expertId;
            
            private Int64APColumnDef _groupId;
            
            private Int64APColumnDef _resourceId;
            
            private DateTimeAPColumnDef _accessDate;
            
            private DoubleAPColumnDef _score;
            
            private StringAPColumnDef _comment;
            
            public EvalResultTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected EvalResultTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// ResultId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef ResultId {
                get {
                    if (Object.ReferenceEquals(_resultId, null)) {
                        _resultId = new Int64APColumnDef(this, "ID", false);
                        _resultId.Display = "评价结果ID";
                    }
                    return _resultId;
                }
            }
            
            /// <summary>
            /// ExpertId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef ExpertId {
                get {
                    if (Object.ReferenceEquals(_expertId, null)) {
                        _expertId = new Int64APColumnDef(this, "ExpertId", false);
                        _expertId.Display = "评审人";
                    }
                    return _expertId;
                }
            }
            
            /// <summary>
            /// GroupId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef GroupId {
                get {
                    if (Object.ReferenceEquals(_groupId, null)) {
                        _groupId = new Int64APColumnDef(this, "GroupId", false);
                        _groupId.Display = "评审组ID";
                    }
                    return _groupId;
                }
            }
            
            /// <summary>
            /// ResourceId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef ResourceId {
                get {
                    if (Object.ReferenceEquals(_resourceId, null)) {
                        _resourceId = new Int64APColumnDef(this, "ResourceId", false);
                        _resourceId.Display = "被考核作品ID";
                    }
                    return _resourceId;
                }
            }
            
            /// <summary>
            /// AccessDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef AccessDate {
                get {
                    if (Object.ReferenceEquals(_accessDate, null)) {
                        _accessDate = new DateTimeAPColumnDef(this, "AccessDate", false);
                        _accessDate.Display = "评审时间";
                    }
                    return _accessDate;
                }
            }
            
            /// <summary>
            /// Score ColumnDef
            /// </summary>
            public virtual DoubleAPColumnDef Score {
                get {
                    if (Object.ReferenceEquals(_score, null)) {
                        _score = new DoubleAPColumnDef(this, "Score", false);
                        _score.Display = "得分";
                    }
                    return _score;
                }
            }
            
            /// <summary>
            /// Comment ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Comment {
                get {
                    if (Object.ReferenceEquals(_comment, null)) {
                        _comment = new StringAPColumnDef(this, "Comment", false, 4000);
                        _comment.Display = "专家评语";
                    }
                    return _comment;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual EvalResultTableDef As(string name) {
                return new EvalResultTableDef("EvalResult", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, EvalResult data, bool throwIfValidColumnName) {
                data.ResultId = ResultId.GetValue<long>(reader, throwIfValidColumnName);
                data.ExpertId = ExpertId.GetValue<long>(reader, throwIfValidColumnName);
                data.GroupId = GroupId.GetValue<long>(reader, throwIfValidColumnName);
                data.ResourceId = ResourceId.GetValue<long>(reader, throwIfValidColumnName);
                data.AccessDate = AccessDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.Score = Score.GetValue<double>(reader, throwIfValidColumnName);
                data.Comment = Comment.GetValue<string>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual EvalResult Map(IDataReader reader) {
                EvalResult data = new EvalResult();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual EvalResult TolerantMap(IDataReader reader) {
                EvalResult data = new EvalResult();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<EvalResult> MapList(IDataReader reader) {
                List<EvalResult> list = new List<EvalResult>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<EvalResult> TolerantMapList(IDataReader reader) {
                List<EvalResult> list = new List<EvalResult>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class EvalResultItemTableDef : APTableDef {
            
            private Int64APColumnDef _resultItemId;
            
            private Int64APColumnDef _resultId;
            
            private Int64APColumnDef _indicationId;
            
            private DoubleAPColumnDef _score;
            
            public EvalResultItemTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected EvalResultItemTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// ResultItemId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef ResultItemId {
                get {
                    if (Object.ReferenceEquals(_resultItemId, null)) {
                        _resultItemId = new Int64APColumnDef(this, "ID", false);
                        _resultItemId.Display = "结果项ID";
                    }
                    return _resultItemId;
                }
            }
            
            /// <summary>
            /// ResultId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef ResultId {
                get {
                    if (Object.ReferenceEquals(_resultId, null)) {
                        _resultId = new Int64APColumnDef(this, "ResultId", false);
                        _resultId.Display = "所属考核结果ID";
                    }
                    return _resultId;
                }
            }
            
            /// <summary>
            /// IndicationId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef IndicationId {
                get {
                    if (Object.ReferenceEquals(_indicationId, null)) {
                        _indicationId = new Int64APColumnDef(this, "IndicationId", false);
                        _indicationId.Display = "IndicationId";
                    }
                    return _indicationId;
                }
            }
            
            /// <summary>
            /// Score ColumnDef
            /// </summary>
            public virtual DoubleAPColumnDef Score {
                get {
                    if (Object.ReferenceEquals(_score, null)) {
                        _score = new DoubleAPColumnDef(this, "Score", false);
                        _score.Display = "得分";
                    }
                    return _score;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual EvalResultItemTableDef As(string name) {
                return new EvalResultItemTableDef("EvalResultItem", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, EvalResultItem data, bool throwIfValidColumnName) {
                data.ResultItemId = ResultItemId.GetValue<long>(reader, throwIfValidColumnName);
                data.ResultId = ResultId.GetValue<long>(reader, throwIfValidColumnName);
                data.IndicationId = IndicationId.GetValue<long>(reader, throwIfValidColumnName);
                data.Score = Score.GetValue<double>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual EvalResultItem Map(IDataReader reader) {
                EvalResultItem data = new EvalResultItem();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual EvalResultItem TolerantMap(IDataReader reader) {
                EvalResultItem data = new EvalResultItem();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<EvalResultItem> MapList(IDataReader reader) {
                List<EvalResultItem> list = new List<EvalResultItem>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<EvalResultItem> TolerantMapList(IDataReader reader) {
                List<EvalResultItem> list = new List<EvalResultItem>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class WeiXinUserInfoTableDef : APTableDef {
            
            private Int64APColumnDef _id;
            
            private StringAPColumnDef _openId;
            
            private StringAPColumnDef _nickName;
            
            private Int32APColumnDef _gender;
            
            private StringAPColumnDef _prov;
            
            private StringAPColumnDef _city;
            
            private StringAPColumnDef _country;
            
            private DateTimeAPColumnDef _createDate;
            
            public WeiXinUserInfoTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected WeiXinUserInfoTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// Id ColumnDef
            /// </summary>
            public virtual Int64APColumnDef Id {
                get {
                    if (Object.ReferenceEquals(_id, null)) {
                        _id = new Int64APColumnDef(this, "Id", false);
                        _id.Display = "ID";
                    }
                    return _id;
                }
            }
            
            /// <summary>
            /// OpenId ColumnDef
            /// </summary>
            public virtual StringAPColumnDef OpenId {
                get {
                    if (Object.ReferenceEquals(_openId, null)) {
                        _openId = new StringAPColumnDef(this, "OpenId", false, 150);
                        _openId.Display = "OpenId";
                    }
                    return _openId;
                }
            }
            
            /// <summary>
            /// NickName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef NickName {
                get {
                    if (Object.ReferenceEquals(_nickName, null)) {
                        _nickName = new StringAPColumnDef(this, "NickName", false, 100);
                        _nickName.Display = "NickName";
                    }
                    return _nickName;
                }
            }
            
            /// <summary>
            /// Gender ColumnDef
            /// </summary>
            public virtual Int32APColumnDef Gender {
                get {
                    if (Object.ReferenceEquals(_gender, null)) {
                        _gender = new Int32APColumnDef(this, "Gender", false);
                        _gender.Display = "Gender";
                    }
                    return _gender;
                }
            }
            
            /// <summary>
            /// Prov ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Prov {
                get {
                    if (Object.ReferenceEquals(_prov, null)) {
                        _prov = new StringAPColumnDef(this, "Prov", false, 100);
                        _prov.Display = "Prov";
                    }
                    return _prov;
                }
            }
            
            /// <summary>
            /// City ColumnDef
            /// </summary>
            public virtual StringAPColumnDef City {
                get {
                    if (Object.ReferenceEquals(_city, null)) {
                        _city = new StringAPColumnDef(this, "City", false, 100);
                        _city.Display = "City";
                    }
                    return _city;
                }
            }
            
            /// <summary>
            /// Country ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Country {
                get {
                    if (Object.ReferenceEquals(_country, null)) {
                        _country = new StringAPColumnDef(this, "Country", false, 100);
                        _country.Display = "Country";
                    }
                    return _country;
                }
            }
            
            /// <summary>
            /// CreateDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef CreateDate {
                get {
                    if (Object.ReferenceEquals(_createDate, null)) {
                        _createDate = new DateTimeAPColumnDef(this, "CreateDate", false);
                        _createDate.Display = "CreateDate";
                    }
                    return _createDate;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual WeiXinUserInfoTableDef As(string name) {
                return new WeiXinUserInfoTableDef("WeiXinUserInfo", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, WeiXinUserInfo data, bool throwIfValidColumnName) {
                data.Id = Id.GetValue<long>(reader, throwIfValidColumnName);
                data.OpenId = OpenId.GetValue<string>(reader, throwIfValidColumnName);
                data.NickName = NickName.GetValue<string>(reader, throwIfValidColumnName);
                data.Gender = Gender.GetValue<int>(reader, throwIfValidColumnName);
                data.Prov = Prov.GetValue<string>(reader, throwIfValidColumnName);
                data.City = City.GetValue<string>(reader, throwIfValidColumnName);
                data.Country = Country.GetValue<string>(reader, throwIfValidColumnName);
                data.CreateDate = CreateDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual WeiXinUserInfo Map(IDataReader reader) {
                WeiXinUserInfo data = new WeiXinUserInfo();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual WeiXinUserInfo TolerantMap(IDataReader reader) {
                WeiXinUserInfo data = new WeiXinUserInfo();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<WeiXinUserInfo> MapList(IDataReader reader) {
                List<WeiXinUserInfo> list = new List<WeiXinUserInfo>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<WeiXinUserInfo> TolerantMapList(IDataReader reader) {
                List<WeiXinUserInfo> list = new List<WeiXinUserInfo>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class WeiXinPraiseTableDef : APTableDef {
            
            private Int64APColumnDef _occurId;
            
            private StringAPColumnDef _openId;
            
            private Int64APColumnDef _resId;
            
            private DateTimeAPColumnDef _occurTime;
            
            public WeiXinPraiseTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected WeiXinPraiseTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// OccurId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef OccurId {
                get {
                    if (Object.ReferenceEquals(_occurId, null)) {
                        _occurId = new Int64APColumnDef(this, "OccurId", false);
                        _occurId.Display = "ID";
                    }
                    return _occurId;
                }
            }
            
            /// <summary>
            /// OpenId ColumnDef
            /// </summary>
            public virtual StringAPColumnDef OpenId {
                get {
                    if (Object.ReferenceEquals(_openId, null)) {
                        _openId = new StringAPColumnDef(this, "OpenId", false, 150);
                        _openId.Display = "OpenId";
                    }
                    return _openId;
                }
            }
            
            /// <summary>
            /// ResId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef ResId {
                get {
                    if (Object.ReferenceEquals(_resId, null)) {
                        _resId = new Int64APColumnDef(this, "ResId", false);
                        _resId.Display = "ResId";
                    }
                    return _resId;
                }
            }
            
            /// <summary>
            /// OccurTime ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef OccurTime {
                get {
                    if (Object.ReferenceEquals(_occurTime, null)) {
                        _occurTime = new DateTimeAPColumnDef(this, "OccurTime", false);
                        _occurTime.Display = "时间";
                    }
                    return _occurTime;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual WeiXinPraiseTableDef As(string name) {
                return new WeiXinPraiseTableDef("WeiXinPraise", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, WeiXinPraise data, bool throwIfValidColumnName) {
                data.OccurId = OccurId.GetValue<long>(reader, throwIfValidColumnName);
                data.OpenId = OpenId.GetValue<string>(reader, throwIfValidColumnName);
                data.ResId = ResId.GetValue<long>(reader, throwIfValidColumnName);
                data.OccurTime = OccurTime.GetValue<System.DateTime>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual WeiXinPraise Map(IDataReader reader) {
                WeiXinPraise data = new WeiXinPraise();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual WeiXinPraise TolerantMap(IDataReader reader) {
                WeiXinPraise data = new WeiXinPraise();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<WeiXinPraise> MapList(IDataReader reader) {
                List<WeiXinPraise> list = new List<WeiXinPraise>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<WeiXinPraise> TolerantMapList(IDataReader reader) {
                List<WeiXinPraise> list = new List<WeiXinPraise>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class WeiXinFavoriteTableDef : APTableDef {
            
            private Int64APColumnDef _occurId;
            
            private StringAPColumnDef _openId;
            
            private Int64APColumnDef _resId;
            
            private DateTimeAPColumnDef _occurTime;
            
            public WeiXinFavoriteTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected WeiXinFavoriteTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// OccurId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef OccurId {
                get {
                    if (Object.ReferenceEquals(_occurId, null)) {
                        _occurId = new Int64APColumnDef(this, "OccurId", false);
                        _occurId.Display = "ID";
                    }
                    return _occurId;
                }
            }
            
            /// <summary>
            /// OpenId ColumnDef
            /// </summary>
            public virtual StringAPColumnDef OpenId {
                get {
                    if (Object.ReferenceEquals(_openId, null)) {
                        _openId = new StringAPColumnDef(this, "OpenId", false, 150);
                        _openId.Display = "OpenId";
                    }
                    return _openId;
                }
            }
            
            /// <summary>
            /// ResId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef ResId {
                get {
                    if (Object.ReferenceEquals(_resId, null)) {
                        _resId = new Int64APColumnDef(this, "ResId", false);
                        _resId.Display = "WksId";
                    }
                    return _resId;
                }
            }
            
            /// <summary>
            /// OccurTime ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef OccurTime {
                get {
                    if (Object.ReferenceEquals(_occurTime, null)) {
                        _occurTime = new DateTimeAPColumnDef(this, "OccurTime", false);
                        _occurTime.Display = "时间";
                    }
                    return _occurTime;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual WeiXinFavoriteTableDef As(string name) {
                return new WeiXinFavoriteTableDef("WeiXinFavorite", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, WeiXinFavorite data, bool throwIfValidColumnName) {
                data.OccurId = OccurId.GetValue<long>(reader, throwIfValidColumnName);
                data.OpenId = OpenId.GetValue<string>(reader, throwIfValidColumnName);
                data.ResId = ResId.GetValue<long>(reader, throwIfValidColumnName);
                data.OccurTime = OccurTime.GetValue<System.DateTime>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual WeiXinFavorite Map(IDataReader reader) {
                WeiXinFavorite data = new WeiXinFavorite();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual WeiXinFavorite TolerantMap(IDataReader reader) {
                WeiXinFavorite data = new WeiXinFavorite();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<WeiXinFavorite> MapList(IDataReader reader) {
                List<WeiXinFavorite> list = new List<WeiXinFavorite>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<WeiXinFavorite> TolerantMapList(IDataReader reader) {
                List<WeiXinFavorite> list = new List<WeiXinFavorite>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class WeiXinPlayCountTableDef : APTableDef {
            
            private Int64APColumnDef _occurId;
            
            private StringAPColumnDef _openId;
            
            private Int64APColumnDef _resourceId;
            
            private Int64APColumnDef _courseId;
            
            private DateTimeAPColumnDef _occurTime;
            
            public WeiXinPlayCountTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected WeiXinPlayCountTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// OccurId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef OccurId {
                get {
                    if (Object.ReferenceEquals(_occurId, null)) {
                        _occurId = new Int64APColumnDef(this, "OccurId", false);
                        _occurId.Display = "ID";
                    }
                    return _occurId;
                }
            }
            
            /// <summary>
            /// OpenId ColumnDef
            /// </summary>
            public virtual StringAPColumnDef OpenId {
                get {
                    if (Object.ReferenceEquals(_openId, null)) {
                        _openId = new StringAPColumnDef(this, "OpenId", false, 150);
                        _openId.Display = "OpenId";
                    }
                    return _openId;
                }
            }
            
            /// <summary>
            /// ResourceId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef ResourceId {
                get {
                    if (Object.ReferenceEquals(_resourceId, null)) {
                        _resourceId = new Int64APColumnDef(this, "ResourceId", false);
                        _resourceId.Display = "作品ID";
                        _resourceId.Required = true;
                    }
                    return _resourceId;
                }
            }
            
            /// <summary>
            /// CourseId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef CourseId {
                get {
                    if (Object.ReferenceEquals(_courseId, null)) {
                        _courseId = new Int64APColumnDef(this, "CourseId", false);
                        _courseId.Display = "微课ID";
                        _courseId.Required = true;
                    }
                    return _courseId;
                }
            }
            
            /// <summary>
            /// OccurTime ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef OccurTime {
                get {
                    if (Object.ReferenceEquals(_occurTime, null)) {
                        _occurTime = new DateTimeAPColumnDef(this, "OccurTime", false);
                        _occurTime.Display = "时间";
                    }
                    return _occurTime;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual WeiXinPlayCountTableDef As(string name) {
                return new WeiXinPlayCountTableDef("WeiXinPlayCount", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, WeiXinPlayCount data, bool throwIfValidColumnName) {
                data.OccurId = OccurId.GetValue<long>(reader, throwIfValidColumnName);
                data.OpenId = OpenId.GetValue<string>(reader, throwIfValidColumnName);
                data.ResourceId = ResourceId.GetValue<long>(reader, throwIfValidColumnName);
                data.CourseId = CourseId.GetValue<long>(reader, throwIfValidColumnName);
                data.OccurTime = OccurTime.GetValue<System.DateTime>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual WeiXinPlayCount Map(IDataReader reader) {
                WeiXinPlayCount data = new WeiXinPlayCount();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual WeiXinPlayCount TolerantMap(IDataReader reader) {
                WeiXinPlayCount data = new WeiXinPlayCount();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<WeiXinPlayCount> MapList(IDataReader reader) {
                List<WeiXinPlayCount> list = new List<WeiXinPlayCount>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<WeiXinPlayCount> TolerantMapList(IDataReader reader) {
                List<WeiXinPlayCount> list = new List<WeiXinPlayCount>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class NoticeTableDef : APTableDef {
            
            private Int64APColumnDef _noticeId;
            
            private StringAPColumnDef _title;
            
            private StringAPColumnDef _content;
            
            private DateTimeAPColumnDef _publishDate;
            
            public NoticeTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected NoticeTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// NoticeId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef NoticeId {
                get {
                    if (Object.ReferenceEquals(_noticeId, null)) {
                        _noticeId = new Int64APColumnDef(this, "NoticeId", false);
                        _noticeId.Display = "NoticeId";
                    }
                    return _noticeId;
                }
            }
            
            /// <summary>
            /// Title ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Title {
                get {
                    if (Object.ReferenceEquals(_title, null)) {
                        _title = new StringAPColumnDef(this, "Title", false, 150);
                        _title.Display = "Title";
                    }
                    return _title;
                }
            }
            
            /// <summary>
            /// Content ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Content {
                get {
                    if (Object.ReferenceEquals(_content, null)) {
                        _content = new StringAPColumnDef(this, "Content", false, 20000);
                        _content.Display = "Content";
                    }
                    return _content;
                }
            }
            
            /// <summary>
            /// PublishDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef PublishDate {
                get {
                    if (Object.ReferenceEquals(_publishDate, null)) {
                        _publishDate = new DateTimeAPColumnDef(this, "PublishDate", false);
                        _publishDate.Display = "发布日期";
                    }
                    return _publishDate;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual NoticeTableDef As(string name) {
                return new NoticeTableDef("Notice", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, Notice data, bool throwIfValidColumnName) {
                data.NoticeId = NoticeId.GetValue<long>(reader, throwIfValidColumnName);
                data.Title = Title.GetValue<string>(reader, throwIfValidColumnName);
                data.Content = Content.GetValue<string>(reader, throwIfValidColumnName);
                data.PublishDate = PublishDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual Notice Map(IDataReader reader) {
                Notice data = new Notice();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual Notice TolerantMap(IDataReader reader) {
                Notice data = new Notice();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<Notice> MapList(IDataReader reader) {
                List<Notice> list = new List<Notice>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<Notice> TolerantMapList(IDataReader reader) {
                List<Notice> list = new List<Notice>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class WeiXinExpertTableDef : APTableDef {
            
            private Int64APColumnDef _wxExpertId;
            
            private StringAPColumnDef _openId;
            
            private Int64APColumnDef _userId;
            
            public WeiXinExpertTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected WeiXinExpertTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// WxExpertId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef WxExpertId {
                get {
                    if (Object.ReferenceEquals(_wxExpertId, null)) {
                        _wxExpertId = new Int64APColumnDef(this, "WxExpertId", false);
                        _wxExpertId.Display = "WxExpertId";
                    }
                    return _wxExpertId;
                }
            }
            
            /// <summary>
            /// OpenId ColumnDef
            /// </summary>
            public virtual StringAPColumnDef OpenId {
                get {
                    if (Object.ReferenceEquals(_openId, null)) {
                        _openId = new StringAPColumnDef(this, "OpenId", false, 150);
                        _openId.Display = "OpenId";
                    }
                    return _openId;
                }
            }
            
            /// <summary>
            /// UserId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef UserId {
                get {
                    if (Object.ReferenceEquals(_userId, null)) {
                        _userId = new Int64APColumnDef(this, "UserId", false);
                        _userId.Display = "UserId";
                    }
                    return _userId;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual WeiXinExpertTableDef As(string name) {
                return new WeiXinExpertTableDef("WeiXinExpert", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, WeiXinExpert data, bool throwIfValidColumnName) {
                data.WxExpertId = WxExpertId.GetValue<long>(reader, throwIfValidColumnName);
                data.OpenId = OpenId.GetValue<string>(reader, throwIfValidColumnName);
                data.UserId = UserId.GetValue<long>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual WeiXinExpert Map(IDataReader reader) {
                WeiXinExpert data = new WeiXinExpert();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual WeiXinExpert TolerantMap(IDataReader reader) {
                WeiXinExpert data = new WeiXinExpert();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<WeiXinExpert> MapList(IDataReader reader) {
                List<WeiXinExpert> list = new List<WeiXinExpert>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<WeiXinExpert> TolerantMapList(IDataReader reader) {
                List<WeiXinExpert> list = new List<WeiXinExpert>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
    }
    
    /// <summary>
    /// APDBDef 是一个自动生成的具有 Partial 修饰的类，用于定义所有 从 APDal 继承来的 Dal 类。你可以添加同名的 Partial 类来扩充功能。
    /// </summary>
    public partial class APDalDef {
        
        /// <summary>
        /// 选项列表 DalBase
        /// </summary>
        public partial class ResPickListDalBase : APDal {
            
            public ResPickListDalBase() {
            }
            
            public ResPickListDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(ResPickList data) {
                if ((data.PickListId == 0)) {
                    data.PickListId = ((long)(GetNewId(APDBDef.ResPickList.PickListId)));
                }
                var query = APQuery.insert(APDBDef.ResPickList).values(APDBDef.ResPickList.PickListId.SetValue(data.PickListId), APDBDef.ResPickList.InnerKey.SetValue(data.InnerKey), APDBDef.ResPickList.Name.SetValue(data.Name), APDBDef.ResPickList.Adjustable.SetValue(data.Adjustable), APDBDef.ResPickList.Strengthen.SetValue(data.Strengthen), APDBDef.ResPickList.Description.SetValue(data.Description), APDBDef.ResPickList.Creator.SetValue(data.Creator), APDBDef.ResPickList.CreatedTime.SetValue(data.CreatedTime), APDBDef.ResPickList.LastModifier.SetValue(data.LastModifier), APDBDef.ResPickList.LastModifiedTime.SetValue(data.LastModifiedTime));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(ResPickList data) {
                var query = APQuery.update(APDBDef.ResPickList).values(APDBDef.ResPickList.InnerKey.SetValue(data.InnerKey), APDBDef.ResPickList.Name.SetValue(data.Name), APDBDef.ResPickList.Adjustable.SetValue(data.Adjustable), APDBDef.ResPickList.Strengthen.SetValue(data.Strengthen), APDBDef.ResPickList.Description.SetValue(data.Description), APDBDef.ResPickList.Creator.SetValue(data.Creator), APDBDef.ResPickList.CreatedTime.SetValue(data.CreatedTime), APDBDef.ResPickList.LastModifier.SetValue(data.LastModifier), APDBDef.ResPickList.LastModifiedTime.SetValue(data.LastModifiedTime)).where((APDBDef.ResPickList.PickListId == data.PickListId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long pickListId, Object metadata) {
                var query = APQuery.update(APDBDef.ResPickList).values(APSqlSetPhraseSelector.Select(APDBDef.ResPickList, metadata)).where((APDBDef.ResPickList.PickListId == pickListId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long pickListId) {
                var query = APQuery.delete(APDBDef.ResPickList).where((APDBDef.ResPickList.PickListId == pickListId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.ResPickList).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.ResPickList.Asterisk.Count()).from(APDBDef.ResPickList).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual ResPickList PrimaryGet(long pickListId) {
                var query = APQuery.select(APDBDef.ResPickList.Asterisk).from(APDBDef.ResPickList).where((APDBDef.ResPickList.PickListId == pickListId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.ResPickList.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<ResPickList> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.ResPickList.Asterisk).from(APDBDef.ResPickList);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.ResPickList.PickListId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.ResPickList.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<ResPickList> GetInitData() {
                return new List<ResPickList>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<ResPickList> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    ResPickList data = list[i];
                    if ((PrimaryGet(data.PickListId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 选项列表 Dal
        /// </summary>
        public partial class ResPickListDal : ResPickListDalBase {
            
            public ResPickListDal() {
            }
            
            public ResPickListDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 选项列表项 DalBase
        /// </summary>
        public partial class ResPickListItemDalBase : APDal {
            
            public ResPickListItemDalBase() {
            }
            
            public ResPickListItemDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(ResPickListItem data) {
                if ((data.PickListItemId == 0)) {
                    data.PickListItemId = ((long)(GetNewId(APDBDef.ResPickListItem.PickListItemId)));
                }
                var query = APQuery.insert(APDBDef.ResPickListItem).values(APDBDef.ResPickListItem.PickListItemId.SetValue(data.PickListItemId), APDBDef.ResPickListItem.PickListId.SetValue(data.PickListId), APDBDef.ResPickListItem.Name.SetValue(data.Name), APDBDef.ResPickListItem.StrengthenValue.SetValue(data.StrengthenValue), APDBDef.ResPickListItem.Code.SetValue(data.Code), APDBDef.ResPickListItem.IsDefault.SetValue(data.IsDefault), APDBDef.ResPickListItem.Creator.SetValue(data.Creator), APDBDef.ResPickListItem.CreatedTime.SetValue(data.CreatedTime), APDBDef.ResPickListItem.LastModifier.SetValue(data.LastModifier), APDBDef.ResPickListItem.LastModifiedTime.SetValue(data.LastModifiedTime));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(ResPickListItem data) {
                var query = APQuery.update(APDBDef.ResPickListItem).values(APDBDef.ResPickListItem.Name.SetValue(data.Name), APDBDef.ResPickListItem.StrengthenValue.SetValue(data.StrengthenValue), APDBDef.ResPickListItem.Code.SetValue(data.Code), APDBDef.ResPickListItem.IsDefault.SetValue(data.IsDefault), APDBDef.ResPickListItem.Creator.SetValue(data.Creator), APDBDef.ResPickListItem.CreatedTime.SetValue(data.CreatedTime), APDBDef.ResPickListItem.LastModifier.SetValue(data.LastModifier), APDBDef.ResPickListItem.LastModifiedTime.SetValue(data.LastModifiedTime)).where((APDBDef.ResPickListItem.PickListItemId == data.PickListItemId), (APDBDef.ResPickListItem.PickListId == data.PickListId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long pickListItemId, long pickListId, Object metadata) {
                var query = APQuery.update(APDBDef.ResPickListItem).values(APSqlSetPhraseSelector.Select(APDBDef.ResPickListItem, metadata)).where((APDBDef.ResPickListItem.PickListItemId == pickListItemId), (APDBDef.ResPickListItem.PickListId == pickListId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long pickListItemId, long pickListId) {
                var query = APQuery.delete(APDBDef.ResPickListItem).where((APDBDef.ResPickListItem.PickListItemId == pickListItemId), (APDBDef.ResPickListItem.PickListId == pickListId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.ResPickListItem).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.ResPickListItem.Asterisk.Count()).from(APDBDef.ResPickListItem).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual ResPickListItem PrimaryGet(long pickListItemId, long pickListId) {
                var query = APQuery.select(APDBDef.ResPickListItem.Asterisk).from(APDBDef.ResPickListItem).where((APDBDef.ResPickListItem.PickListItemId == pickListItemId), (APDBDef.ResPickListItem.PickListId == pickListId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.ResPickListItem.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<ResPickListItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.ResPickListItem.Asterisk).from(APDBDef.ResPickListItem);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.ResPickListItem.PickListItemId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.ResPickListItem.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<ResPickListItem> GetInitData() {
                return new List<ResPickListItem>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<ResPickListItem> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    ResPickListItem data = list[i];
                    if ((PrimaryGet(data.PickListItemId, data.PickListId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 选项列表项 Dal
        /// </summary>
        public partial class ResPickListItemDal : ResPickListItemDalBase {
            
            public ResPickListItemDal() {
            }
            
            public ResPickListItemDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 项目 DalBase
        /// </summary>
        public partial class ActiveDalBase : APDal {
            
            public ActiveDalBase() {
            }
            
            public ActiveDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(Active data) {
                if ((data.ActiveId == 0)) {
                    data.ActiveId = ((long)(GetNewId(APDBDef.Active.ActiveId)));
                }
                var query = APQuery.insert(APDBDef.Active).values(APDBDef.Active.ActiveId.SetValue(data.ActiveId), APDBDef.Active.ActiveName.SetValue(data.ActiveName), APDBDef.Active.Description.SetValue(data.Description), APDBDef.Active.Year.SetValue(data.Year), APDBDef.Active.Company.SetValue(data.Company), APDBDef.Active.LevelPKID.SetValue(data.LevelPKID), APDBDef.Active.SemesterPKID.SetValue(data.SemesterPKID), APDBDef.Active.PublicStatePKID.SetValue(data.PublicStatePKID), APDBDef.Active.DownloadStatePKID.SetValue(data.DownloadStatePKID), APDBDef.Active.StartDate.SetValue(data.StartDate), APDBDef.Active.EndDate.SetValue(data.EndDate), APDBDef.Active.UploadStartDate.SetValue(data.UploadStartDate), APDBDef.Active.UploadEndDate.SetValue(data.UploadEndDate), APDBDef.Active.IsCurrent.SetValue(data.IsCurrent));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(Active data) {
                var query = APQuery.update(APDBDef.Active).values(APDBDef.Active.ActiveName.SetValue(data.ActiveName), APDBDef.Active.Description.SetValue(data.Description), APDBDef.Active.Year.SetValue(data.Year), APDBDef.Active.Company.SetValue(data.Company), APDBDef.Active.LevelPKID.SetValue(data.LevelPKID), APDBDef.Active.SemesterPKID.SetValue(data.SemesterPKID), APDBDef.Active.PublicStatePKID.SetValue(data.PublicStatePKID), APDBDef.Active.DownloadStatePKID.SetValue(data.DownloadStatePKID), APDBDef.Active.StartDate.SetValue(data.StartDate), APDBDef.Active.EndDate.SetValue(data.EndDate), APDBDef.Active.UploadStartDate.SetValue(data.UploadStartDate), APDBDef.Active.UploadEndDate.SetValue(data.UploadEndDate), APDBDef.Active.IsCurrent.SetValue(data.IsCurrent)).where((APDBDef.Active.ActiveId == data.ActiveId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long activeId, Object metadata) {
                var query = APQuery.update(APDBDef.Active).values(APSqlSetPhraseSelector.Select(APDBDef.Active, metadata)).where((APDBDef.Active.ActiveId == activeId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long activeId) {
                var query = APQuery.delete(APDBDef.Active).where((APDBDef.Active.ActiveId == activeId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.Active).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.Active.Asterisk.Count()).from(APDBDef.Active).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual Active PrimaryGet(long activeId) {
                var query = APQuery.select(APDBDef.Active.Asterisk).from(APDBDef.Active).where((APDBDef.Active.ActiveId == activeId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.Active.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<Active> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.Active.Asterisk).from(APDBDef.Active);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.Active.ActiveId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.Active.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<Active> GetInitData() {
                return new List<Active>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<Active> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    Active data = list[i];
                    if ((PrimaryGet(data.ActiveId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 项目 Dal
        /// </summary>
        public partial class ActiveDal : ActiveDalBase {
            
            public ActiveDal() {
            }
            
            public ActiveDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 用户 DalBase
        /// </summary>
        public partial class ResUserDalBase : APDal {
            
            public ResUserDalBase() {
            }
            
            public ResUserDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(ResUser data) {
                if ((data.UserId == 0)) {
                    data.UserId = ((long)(GetNewId(APDBDef.ResUser.UserId)));
                }
                var query = APQuery.insert(APDBDef.ResUser).values(APDBDef.ResUser.UserId.SetValue(data.UserId), APDBDef.ResUser.UserName.SetValue(data.UserName), APDBDef.ResUser.Password.SetValue(data.Password), APDBDef.ResUser.PasswordHash.SetValue(data.PasswordHash), APDBDef.ResUser.SecurityStamp.SetValue(data.SecurityStamp), APDBDef.ResUser.Question.SetValue(data.Question), APDBDef.ResUser.Answer.SetValue(data.Answer), APDBDef.ResUser.UserTypePKID.SetValue(data.UserTypePKID), APDBDef.ResUser.RealName.SetValue(data.RealName), APDBDef.ResUser.PhotoPath.SetValue(data.PhotoPath), APDBDef.ResUser.GenderPKID.SetValue(data.GenderPKID), APDBDef.ResUser.IDCard.SetValue(data.IDCard), APDBDef.ResUser.Email.SetValue(data.Email), APDBDef.ResUser.CompanyId.SetValue(data.CompanyId), APDBDef.ResUser.ProvinceId.SetValue(data.ProvinceId), APDBDef.ResUser.AreaId.SetValue(data.AreaId), APDBDef.ResUser.Actived.SetValue(data.Actived), APDBDef.ResUser.Removed.SetValue(data.Removed), APDBDef.ResUser.RegisterTime.SetValue(data.RegisterTime), APDBDef.ResUser.LastLoginTime.SetValue(data.LastLoginTime), APDBDef.ResUser.LoginCount.SetValue(data.LoginCount), APDBDef.ResUser.MD5.SetValue(data.MD5));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(ResUser data) {
                var query = APQuery.update(APDBDef.ResUser).values(APDBDef.ResUser.UserName.SetValue(data.UserName), APDBDef.ResUser.Password.SetValue(data.Password), APDBDef.ResUser.PasswordHash.SetValue(data.PasswordHash), APDBDef.ResUser.SecurityStamp.SetValue(data.SecurityStamp), APDBDef.ResUser.Question.SetValue(data.Question), APDBDef.ResUser.Answer.SetValue(data.Answer), APDBDef.ResUser.UserTypePKID.SetValue(data.UserTypePKID), APDBDef.ResUser.RealName.SetValue(data.RealName), APDBDef.ResUser.PhotoPath.SetValue(data.PhotoPath), APDBDef.ResUser.GenderPKID.SetValue(data.GenderPKID), APDBDef.ResUser.IDCard.SetValue(data.IDCard), APDBDef.ResUser.Email.SetValue(data.Email), APDBDef.ResUser.CompanyId.SetValue(data.CompanyId), APDBDef.ResUser.ProvinceId.SetValue(data.ProvinceId), APDBDef.ResUser.AreaId.SetValue(data.AreaId), APDBDef.ResUser.Actived.SetValue(data.Actived), APDBDef.ResUser.Removed.SetValue(data.Removed), APDBDef.ResUser.RegisterTime.SetValue(data.RegisterTime), APDBDef.ResUser.LastLoginTime.SetValue(data.LastLoginTime), APDBDef.ResUser.LoginCount.SetValue(data.LoginCount), APDBDef.ResUser.MD5.SetValue(data.MD5)).where((APDBDef.ResUser.UserId == data.UserId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long userId, Object metadata) {
                var query = APQuery.update(APDBDef.ResUser).values(APSqlSetPhraseSelector.Select(APDBDef.ResUser, metadata)).where((APDBDef.ResUser.UserId == userId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long userId) {
                var query = APQuery.delete(APDBDef.ResUser).where((APDBDef.ResUser.UserId == userId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.ResUser).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.ResUser.Asterisk.Count()).from(APDBDef.ResUser).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual ResUser PrimaryGet(long userId) {
                var query = APQuery.select(APDBDef.ResUser.Asterisk).from(APDBDef.ResUser).where((APDBDef.ResUser.UserId == userId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.ResUser.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<ResUser> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.ResUser.Asterisk).from(APDBDef.ResUser);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.ResUser.UserId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.ResUser.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<ResUser> GetInitData() {
                return new List<ResUser>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<ResUser> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    ResUser data = list[i];
                    if ((PrimaryGet(data.UserId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 用户 Dal
        /// </summary>
        public partial class ResUserDal : ResUserDalBase {
            
            public ResUserDal() {
            }
            
            public ResUserDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 单位 DalBase
        /// </summary>
        public partial class ResCompanyDalBase : APDal {
            
            public ResCompanyDalBase() {
            }
            
            public ResCompanyDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(ResCompany data) {
                if ((data.CompanyId == 0)) {
                    data.CompanyId = ((long)(GetNewId(APDBDef.ResCompany.CompanyId)));
                }
                var query = APQuery.insert(APDBDef.ResCompany).values(APDBDef.ResCompany.CompanyId.SetValue(data.CompanyId), APDBDef.ResCompany.ParentId.SetValue(data.ParentId), APDBDef.ResCompany.Path.SetValue(data.Path), APDBDef.ResCompany.CompanyName.SetValue(data.CompanyName), APDBDef.ResCompany.Address.SetValue(data.Address), APDBDef.ResCompany.Email.SetValue(data.Email), APDBDef.ResCompany.Phone.SetValue(data.Phone));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(ResCompany data) {
                var query = APQuery.update(APDBDef.ResCompany).values(APDBDef.ResCompany.ParentId.SetValue(data.ParentId), APDBDef.ResCompany.Path.SetValue(data.Path), APDBDef.ResCompany.CompanyName.SetValue(data.CompanyName), APDBDef.ResCompany.Address.SetValue(data.Address), APDBDef.ResCompany.Email.SetValue(data.Email), APDBDef.ResCompany.Phone.SetValue(data.Phone)).where((APDBDef.ResCompany.CompanyId == data.CompanyId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long companyId, Object metadata) {
                var query = APQuery.update(APDBDef.ResCompany).values(APSqlSetPhraseSelector.Select(APDBDef.ResCompany, metadata)).where((APDBDef.ResCompany.CompanyId == companyId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long companyId) {
                var query = APQuery.delete(APDBDef.ResCompany).where((APDBDef.ResCompany.CompanyId == companyId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.ResCompany).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.ResCompany.Asterisk.Count()).from(APDBDef.ResCompany).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual ResCompany PrimaryGet(long companyId) {
                var query = APQuery.select(APDBDef.ResCompany.Asterisk).from(APDBDef.ResCompany).where((APDBDef.ResCompany.CompanyId == companyId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.ResCompany.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<ResCompany> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.ResCompany.Asterisk).from(APDBDef.ResCompany);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.ResCompany.CompanyId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.ResCompany.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<ResCompany> GetInitData() {
                return new List<ResCompany>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<ResCompany> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    ResCompany data = list[i];
                    if ((PrimaryGet(data.CompanyId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 单位 Dal
        /// </summary>
        public partial class ResCompanyDal : ResCompanyDalBase {
            
            public ResCompanyDal() {
            }
            
            public ResCompanyDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 微课作品 DalBase
        /// </summary>
        public partial class CroResourceDalBase : APDal {
            
            public CroResourceDalBase() {
            }
            
            public CroResourceDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(CroResource data) {
                if ((data.CrosourceId == 0)) {
                    data.CrosourceId = ((long)(GetNewId(APDBDef.CroResource.CrosourceId)));
                }
                var query = APQuery.insert(APDBDef.CroResource).values(APDBDef.CroResource.CrosourceId.SetValue(data.CrosourceId), APDBDef.CroResource.Title.SetValue(data.Title), APDBDef.CroResource.Author.SetValue(data.Author), APDBDef.CroResource.Keywords.SetValue(data.Keywords), APDBDef.CroResource.Description.SetValue(data.Description), APDBDef.CroResource.ProvinceId.SetValue(data.ProvinceId), APDBDef.CroResource.AreaId.SetValue(data.AreaId), APDBDef.CroResource.CompanyId.SetValue(data.CompanyId), APDBDef.CroResource.ActiveId.SetValue(data.ActiveId), APDBDef.CroResource.AuthorCompany.SetValue(data.AuthorCompany), APDBDef.CroResource.AuthorAddress.SetValue(data.AuthorAddress), APDBDef.CroResource.AuthorEmail.SetValue(data.AuthorEmail), APDBDef.CroResource.AuthorPhone.SetValue(data.AuthorPhone), APDBDef.CroResource.StagePKID.SetValue(data.StagePKID), APDBDef.CroResource.GradePKID.SetValue(data.GradePKID), APDBDef.CroResource.ResourceTypePKID.SetValue(data.ResourceTypePKID), APDBDef.CroResource.SubjectPKID.SetValue(data.SubjectPKID), APDBDef.CroResource.CourseTypePKID.SetValue(data.CourseTypePKID), APDBDef.CroResource.StatePKID.SetValue(data.StatePKID), APDBDef.CroResource.PublicStatePKID.SetValue(data.PublicStatePKID), APDBDef.CroResource.DownloadStatePKID.SetValue(data.DownloadStatePKID), APDBDef.CroResource.WinLevelPKID.SetValue(data.WinLevelPKID), APDBDef.CroResource.DownCount.SetValue(data.DownCount), APDBDef.CroResource.FavoriteCount.SetValue(data.FavoriteCount), APDBDef.CroResource.ViewCount.SetValue(data.ViewCount), APDBDef.CroResource.CommentCount.SetValue(data.CommentCount), APDBDef.CroResource.EliteScore.SetValue(data.EliteScore), APDBDef.CroResource.PraiseCount.SetValue(data.PraiseCount), APDBDef.CroResource.Auditor.SetValue(data.Auditor), APDBDef.CroResource.AuditedTime.SetValue(data.AuditedTime), APDBDef.CroResource.AuditOpinion.SetValue(data.AuditOpinion), APDBDef.CroResource.Creator.SetValue(data.Creator), APDBDef.CroResource.CreatedTime.SetValue(data.CreatedTime), APDBDef.CroResource.LastModifier.SetValue(data.LastModifier), APDBDef.CroResource.LastModifiedTime.SetValue(data.LastModifiedTime), APDBDef.CroResource.Score.SetValue(data.Score), APDBDef.CroResource.WeiXinFavoriteCount.SetValue(data.WeiXinFavoriteCount), APDBDef.CroResource.WeiXInPraiseCount.SetValue(data.WeiXInPraiseCount));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(CroResource data) {
                var query = APQuery.update(APDBDef.CroResource).values(APDBDef.CroResource.Title.SetValue(data.Title), APDBDef.CroResource.Author.SetValue(data.Author), APDBDef.CroResource.Keywords.SetValue(data.Keywords), APDBDef.CroResource.Description.SetValue(data.Description), APDBDef.CroResource.ProvinceId.SetValue(data.ProvinceId), APDBDef.CroResource.AreaId.SetValue(data.AreaId), APDBDef.CroResource.CompanyId.SetValue(data.CompanyId), APDBDef.CroResource.ActiveId.SetValue(data.ActiveId), APDBDef.CroResource.AuthorCompany.SetValue(data.AuthorCompany), APDBDef.CroResource.AuthorAddress.SetValue(data.AuthorAddress), APDBDef.CroResource.AuthorEmail.SetValue(data.AuthorEmail), APDBDef.CroResource.AuthorPhone.SetValue(data.AuthorPhone), APDBDef.CroResource.StagePKID.SetValue(data.StagePKID), APDBDef.CroResource.GradePKID.SetValue(data.GradePKID), APDBDef.CroResource.ResourceTypePKID.SetValue(data.ResourceTypePKID), APDBDef.CroResource.SubjectPKID.SetValue(data.SubjectPKID), APDBDef.CroResource.CourseTypePKID.SetValue(data.CourseTypePKID), APDBDef.CroResource.StatePKID.SetValue(data.StatePKID), APDBDef.CroResource.PublicStatePKID.SetValue(data.PublicStatePKID), APDBDef.CroResource.DownloadStatePKID.SetValue(data.DownloadStatePKID), APDBDef.CroResource.WinLevelPKID.SetValue(data.WinLevelPKID), APDBDef.CroResource.DownCount.SetValue(data.DownCount), APDBDef.CroResource.FavoriteCount.SetValue(data.FavoriteCount), APDBDef.CroResource.ViewCount.SetValue(data.ViewCount), APDBDef.CroResource.CommentCount.SetValue(data.CommentCount), APDBDef.CroResource.EliteScore.SetValue(data.EliteScore), APDBDef.CroResource.PraiseCount.SetValue(data.PraiseCount), APDBDef.CroResource.Auditor.SetValue(data.Auditor), APDBDef.CroResource.AuditedTime.SetValue(data.AuditedTime), APDBDef.CroResource.AuditOpinion.SetValue(data.AuditOpinion), APDBDef.CroResource.Creator.SetValue(data.Creator), APDBDef.CroResource.CreatedTime.SetValue(data.CreatedTime), APDBDef.CroResource.LastModifier.SetValue(data.LastModifier), APDBDef.CroResource.LastModifiedTime.SetValue(data.LastModifiedTime), APDBDef.CroResource.Score.SetValue(data.Score), APDBDef.CroResource.WeiXinFavoriteCount.SetValue(data.WeiXinFavoriteCount), APDBDef.CroResource.WeiXInPraiseCount.SetValue(data.WeiXInPraiseCount)).where((APDBDef.CroResource.CrosourceId == data.CrosourceId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long crosourceId, Object metadata) {
                var query = APQuery.update(APDBDef.CroResource).values(APSqlSetPhraseSelector.Select(APDBDef.CroResource, metadata)).where((APDBDef.CroResource.CrosourceId == crosourceId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long crosourceId) {
                var query = APQuery.delete(APDBDef.CroResource).where((APDBDef.CroResource.CrosourceId == crosourceId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.CroResource).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.CroResource.Asterisk.Count()).from(APDBDef.CroResource).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual CroResource PrimaryGet(long crosourceId) {
                var query = APQuery.select(APDBDef.CroResource.Asterisk).from(APDBDef.CroResource).where((APDBDef.CroResource.CrosourceId == crosourceId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.CroResource.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<CroResource> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.CroResource.Asterisk).from(APDBDef.CroResource);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.CroResource.CrosourceId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.CroResource.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<CroResource> GetInitData() {
                return new List<CroResource>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<CroResource> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    CroResource data = list[i];
                    if ((PrimaryGet(data.CrosourceId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 微课作品 Dal
        /// </summary>
        public partial class CroResourceDal : CroResourceDalBase {
            
            public CroResourceDal() {
            }
            
            public CroResourceDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 课程 DalBase
        /// </summary>
        public partial class MicroCourseDalBase : APDal {
            
            public MicroCourseDalBase() {
            }
            
            public MicroCourseDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(MicroCourse data) {
                if ((data.CourseId == 0)) {
                    data.CourseId = ((long)(GetNewId(APDBDef.MicroCourse.CourseId)));
                }
                var query = APQuery.insert(APDBDef.MicroCourse).values(APDBDef.MicroCourse.CourseId.SetValue(data.CourseId), APDBDef.MicroCourse.CourseTitle.SetValue(data.CourseTitle), APDBDef.MicroCourse.ResourceId.SetValue(data.ResourceId), APDBDef.MicroCourse.VideoId.SetValue(data.VideoId), APDBDef.MicroCourse.CoverId.SetValue(data.CoverId), APDBDef.MicroCourse.DesignId.SetValue(data.DesignId), APDBDef.MicroCourse.SummaryId.SetValue(data.SummaryId), APDBDef.MicroCourse.CoursewareId.SetValue(data.CoursewareId), APDBDef.MicroCourse.AttachmentId.SetValue(data.AttachmentId), APDBDef.MicroCourse.CharpterSortId.SetValue(data.CharpterSortId), APDBDef.MicroCourse.PlayCount.SetValue(data.PlayCount), APDBDef.MicroCourse.DownCount.SetValue(data.DownCount), APDBDef.MicroCourse.StarCount.SetValue(data.StarCount), APDBDef.MicroCourse.WeiXinPlayCount.SetValue(data.WeiXinPlayCount));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(MicroCourse data) {
                var query = APQuery.update(APDBDef.MicroCourse).values(APDBDef.MicroCourse.CourseTitle.SetValue(data.CourseTitle), APDBDef.MicroCourse.ResourceId.SetValue(data.ResourceId), APDBDef.MicroCourse.VideoId.SetValue(data.VideoId), APDBDef.MicroCourse.CoverId.SetValue(data.CoverId), APDBDef.MicroCourse.DesignId.SetValue(data.DesignId), APDBDef.MicroCourse.SummaryId.SetValue(data.SummaryId), APDBDef.MicroCourse.CoursewareId.SetValue(data.CoursewareId), APDBDef.MicroCourse.AttachmentId.SetValue(data.AttachmentId), APDBDef.MicroCourse.CharpterSortId.SetValue(data.CharpterSortId), APDBDef.MicroCourse.PlayCount.SetValue(data.PlayCount), APDBDef.MicroCourse.DownCount.SetValue(data.DownCount), APDBDef.MicroCourse.StarCount.SetValue(data.StarCount), APDBDef.MicroCourse.WeiXinPlayCount.SetValue(data.WeiXinPlayCount)).where((APDBDef.MicroCourse.CourseId == data.CourseId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long courseId, Object metadata) {
                var query = APQuery.update(APDBDef.MicroCourse).values(APSqlSetPhraseSelector.Select(APDBDef.MicroCourse, metadata)).where((APDBDef.MicroCourse.CourseId == courseId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long courseId) {
                var query = APQuery.delete(APDBDef.MicroCourse).where((APDBDef.MicroCourse.CourseId == courseId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.MicroCourse).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.MicroCourse.Asterisk.Count()).from(APDBDef.MicroCourse).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual MicroCourse PrimaryGet(long courseId) {
                var query = APQuery.select(APDBDef.MicroCourse.Asterisk).from(APDBDef.MicroCourse).where((APDBDef.MicroCourse.CourseId == courseId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.MicroCourse.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<MicroCourse> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.MicroCourse.Asterisk).from(APDBDef.MicroCourse);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.MicroCourse.CourseId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.MicroCourse.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<MicroCourse> GetInitData() {
                return new List<MicroCourse>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<MicroCourse> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    MicroCourse data = list[i];
                    if ((PrimaryGet(data.CourseId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 课程 Dal
        /// </summary>
        public partial class MicroCourseDal : MicroCourseDalBase {
            
            public MicroCourseDal() {
            }
            
            public MicroCourseDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        ///  DalBase
        /// </summary>
        public partial class FilesDalBase : APDal {
            
            public FilesDalBase() {
            }
            
            public FilesDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(Files data) {
                if ((data.FileId == 0)) {
                    data.FileId = ((long)(GetNewId(APDBDef.Files.FileId)));
                }
                var query = APQuery.insert(APDBDef.Files).values(APDBDef.Files.FileId.SetValue(data.FileId), APDBDef.Files.FileName.SetValue(data.FileName), APDBDef.Files.ExtName.SetValue(data.ExtName), APDBDef.Files.FilePath.SetValue(data.FilePath), APDBDef.Files.FileSize.SetValue(data.FileSize), APDBDef.Files.Md5.SetValue(data.Md5), APDBDef.Files.Code.SetValue(data.Code));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(Files data) {
                var query = APQuery.update(APDBDef.Files).values(APDBDef.Files.FileName.SetValue(data.FileName), APDBDef.Files.ExtName.SetValue(data.ExtName), APDBDef.Files.FilePath.SetValue(data.FilePath), APDBDef.Files.FileSize.SetValue(data.FileSize), APDBDef.Files.Md5.SetValue(data.Md5), APDBDef.Files.Code.SetValue(data.Code)).where((APDBDef.Files.FileId == data.FileId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long fileId, Object metadata) {
                var query = APQuery.update(APDBDef.Files).values(APSqlSetPhraseSelector.Select(APDBDef.Files, metadata)).where((APDBDef.Files.FileId == fileId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long fileId) {
                var query = APQuery.delete(APDBDef.Files).where((APDBDef.Files.FileId == fileId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.Files).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.Files.Asterisk.Count()).from(APDBDef.Files).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual Files PrimaryGet(long fileId) {
                var query = APQuery.select(APDBDef.Files.Asterisk).from(APDBDef.Files).where((APDBDef.Files.FileId == fileId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.Files.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<Files> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.Files.Asterisk).from(APDBDef.Files);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.Files.FileId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.Files.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<Files> GetInitData() {
                return new List<Files>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<Files> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    Files data = list[i];
                    if ((PrimaryGet(data.FileId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        ///  Dal
        /// </summary>
        public partial class FilesDal : FilesDalBase {
            
            public FilesDal() {
            }
            
            public FilesDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 评审指标 DalBase
        /// </summary>
        public partial class IndicationDalBase : APDal {
            
            public IndicationDalBase() {
            }
            
            public IndicationDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(Indication data) {
                if ((data.IndicationId == 0)) {
                    data.IndicationId = ((long)(GetNewId(APDBDef.Indication.IndicationId)));
                }
                var query = APQuery.insert(APDBDef.Indication).values(APDBDef.Indication.IndicationId.SetValue(data.IndicationId), APDBDef.Indication.IndicationName.SetValue(data.IndicationName), APDBDef.Indication.Description.SetValue(data.Description), APDBDef.Indication.TypePKID.SetValue(data.TypePKID), APDBDef.Indication.LevelPKID.SetValue(data.LevelPKID), APDBDef.Indication.Score.SetValue(data.Score), APDBDef.Indication.Status.SetValue(data.Status), APDBDef.Indication.ActiveId.SetValue(data.ActiveId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(Indication data) {
                var query = APQuery.update(APDBDef.Indication).values(APDBDef.Indication.IndicationName.SetValue(data.IndicationName), APDBDef.Indication.Description.SetValue(data.Description), APDBDef.Indication.TypePKID.SetValue(data.TypePKID), APDBDef.Indication.LevelPKID.SetValue(data.LevelPKID), APDBDef.Indication.Score.SetValue(data.Score), APDBDef.Indication.Status.SetValue(data.Status), APDBDef.Indication.ActiveId.SetValue(data.ActiveId)).where((APDBDef.Indication.IndicationId == data.IndicationId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long indicationId, Object metadata) {
                var query = APQuery.update(APDBDef.Indication).values(APSqlSetPhraseSelector.Select(APDBDef.Indication, metadata)).where((APDBDef.Indication.IndicationId == indicationId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long indicationId) {
                var query = APQuery.delete(APDBDef.Indication).where((APDBDef.Indication.IndicationId == indicationId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.Indication).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.Indication.Asterisk.Count()).from(APDBDef.Indication).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual Indication PrimaryGet(long indicationId) {
                var query = APQuery.select(APDBDef.Indication.Asterisk).from(APDBDef.Indication).where((APDBDef.Indication.IndicationId == indicationId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.Indication.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<Indication> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.Indication.Asterisk).from(APDBDef.Indication);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.Indication.IndicationId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.Indication.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<Indication> GetInitData() {
                return new List<Indication>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<Indication> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    Indication data = list[i];
                    if ((PrimaryGet(data.IndicationId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 评审指标 Dal
        /// </summary>
        public partial class IndicationDal : IndicationDalBase {
            
            public IndicationDal() {
            }
            
            public IndicationDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 评审组 DalBase
        /// </summary>
        public partial class EvalGroupDalBase : APDal {
            
            public EvalGroupDalBase() {
            }
            
            public EvalGroupDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(EvalGroup data) {
                if ((data.GroupId == 0)) {
                    data.GroupId = ((long)(GetNewId(APDBDef.EvalGroup.GroupId)));
                }
                var query = APQuery.insert(APDBDef.EvalGroup).values(APDBDef.EvalGroup.GroupId.SetValue(data.GroupId), APDBDef.EvalGroup.GroupName.SetValue(data.GroupName), APDBDef.EvalGroup.LevelPKID.SetValue(data.LevelPKID), APDBDef.EvalGroup.StartDate.SetValue(data.StartDate), APDBDef.EvalGroup.EndDate.SetValue(data.EndDate), APDBDef.EvalGroup.ActiveId.SetValue(data.ActiveId), APDBDef.EvalGroup.ProvinceId.SetValue(data.ProvinceId), APDBDef.EvalGroup.AreaId.SetValue(data.AreaId), APDBDef.EvalGroup.CompanyId.SetValue(data.CompanyId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(EvalGroup data) {
                var query = APQuery.update(APDBDef.EvalGroup).values(APDBDef.EvalGroup.GroupName.SetValue(data.GroupName), APDBDef.EvalGroup.LevelPKID.SetValue(data.LevelPKID), APDBDef.EvalGroup.StartDate.SetValue(data.StartDate), APDBDef.EvalGroup.EndDate.SetValue(data.EndDate), APDBDef.EvalGroup.ActiveId.SetValue(data.ActiveId), APDBDef.EvalGroup.ProvinceId.SetValue(data.ProvinceId), APDBDef.EvalGroup.AreaId.SetValue(data.AreaId), APDBDef.EvalGroup.CompanyId.SetValue(data.CompanyId)).where((APDBDef.EvalGroup.GroupId == data.GroupId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long groupId, Object metadata) {
                var query = APQuery.update(APDBDef.EvalGroup).values(APSqlSetPhraseSelector.Select(APDBDef.EvalGroup, metadata)).where((APDBDef.EvalGroup.GroupId == groupId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long groupId) {
                var query = APQuery.delete(APDBDef.EvalGroup).where((APDBDef.EvalGroup.GroupId == groupId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.EvalGroup).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.EvalGroup.Asterisk.Count()).from(APDBDef.EvalGroup).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual EvalGroup PrimaryGet(long groupId) {
                var query = APQuery.select(APDBDef.EvalGroup.Asterisk).from(APDBDef.EvalGroup).where((APDBDef.EvalGroup.GroupId == groupId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.EvalGroup.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<EvalGroup> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.EvalGroup.Asterisk).from(APDBDef.EvalGroup);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.EvalGroup.GroupId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.EvalGroup.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<EvalGroup> GetInitData() {
                return new List<EvalGroup>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<EvalGroup> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    EvalGroup data = list[i];
                    if ((PrimaryGet(data.GroupId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 评审组 Dal
        /// </summary>
        public partial class EvalGroupDal : EvalGroupDalBase {
            
            public EvalGroupDal() {
            }
            
            public EvalGroupDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 专家-考核结果 DalBase
        /// </summary>
        public partial class EvalResultDalBase : APDal {
            
            public EvalResultDalBase() {
            }
            
            public EvalResultDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(EvalResult data) {
                if ((data.ResultId == 0)) {
                    data.ResultId = ((long)(GetNewId(APDBDef.EvalResult.ResultId)));
                }
                var query = APQuery.insert(APDBDef.EvalResult).values(APDBDef.EvalResult.ResultId.SetValue(data.ResultId), APDBDef.EvalResult.ExpertId.SetValue(data.ExpertId), APDBDef.EvalResult.GroupId.SetValue(data.GroupId), APDBDef.EvalResult.ResourceId.SetValue(data.ResourceId), APDBDef.EvalResult.AccessDate.SetValue(data.AccessDate), APDBDef.EvalResult.Score.SetValue(data.Score), APDBDef.EvalResult.Comment.SetValue(data.Comment));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(EvalResult data) {
                var query = APQuery.update(APDBDef.EvalResult).values(APDBDef.EvalResult.ExpertId.SetValue(data.ExpertId), APDBDef.EvalResult.GroupId.SetValue(data.GroupId), APDBDef.EvalResult.ResourceId.SetValue(data.ResourceId), APDBDef.EvalResult.AccessDate.SetValue(data.AccessDate), APDBDef.EvalResult.Score.SetValue(data.Score), APDBDef.EvalResult.Comment.SetValue(data.Comment)).where((APDBDef.EvalResult.ResultId == data.ResultId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long resultId, Object metadata) {
                var query = APQuery.update(APDBDef.EvalResult).values(APSqlSetPhraseSelector.Select(APDBDef.EvalResult, metadata)).where((APDBDef.EvalResult.ResultId == resultId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long resultId) {
                var query = APQuery.delete(APDBDef.EvalResult).where((APDBDef.EvalResult.ResultId == resultId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.EvalResult).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.EvalResult.Asterisk.Count()).from(APDBDef.EvalResult).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual EvalResult PrimaryGet(long resultId) {
                var query = APQuery.select(APDBDef.EvalResult.Asterisk).from(APDBDef.EvalResult).where((APDBDef.EvalResult.ResultId == resultId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.EvalResult.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<EvalResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.EvalResult.Asterisk).from(APDBDef.EvalResult);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.EvalResult.ResultId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.EvalResult.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<EvalResult> GetInitData() {
                return new List<EvalResult>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<EvalResult> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    EvalResult data = list[i];
                    if ((PrimaryGet(data.ResultId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 专家-考核结果 Dal
        /// </summary>
        public partial class EvalResultDal : EvalResultDalBase {
            
            public EvalResultDal() {
            }
            
            public EvalResultDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 考核-结果-结果项 DalBase
        /// </summary>
        public partial class EvalResultItemDalBase : APDal {
            
            public EvalResultItemDalBase() {
            }
            
            public EvalResultItemDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(EvalResultItem data) {
                if ((data.ResultItemId == 0)) {
                    data.ResultItemId = ((long)(GetNewId(APDBDef.EvalResultItem.ResultItemId)));
                }
                var query = APQuery.insert(APDBDef.EvalResultItem).values(APDBDef.EvalResultItem.ResultItemId.SetValue(data.ResultItemId), APDBDef.EvalResultItem.ResultId.SetValue(data.ResultId), APDBDef.EvalResultItem.IndicationId.SetValue(data.IndicationId), APDBDef.EvalResultItem.Score.SetValue(data.Score));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(EvalResultItem data) {
                var query = APQuery.update(APDBDef.EvalResultItem).values(APDBDef.EvalResultItem.ResultId.SetValue(data.ResultId), APDBDef.EvalResultItem.IndicationId.SetValue(data.IndicationId), APDBDef.EvalResultItem.Score.SetValue(data.Score)).where((APDBDef.EvalResultItem.ResultItemId == data.ResultItemId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long resultItemId, Object metadata) {
                var query = APQuery.update(APDBDef.EvalResultItem).values(APSqlSetPhraseSelector.Select(APDBDef.EvalResultItem, metadata)).where((APDBDef.EvalResultItem.ResultItemId == resultItemId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long resultItemId) {
                var query = APQuery.delete(APDBDef.EvalResultItem).where((APDBDef.EvalResultItem.ResultItemId == resultItemId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.EvalResultItem).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.EvalResultItem.Asterisk.Count()).from(APDBDef.EvalResultItem).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual EvalResultItem PrimaryGet(long resultItemId) {
                var query = APQuery.select(APDBDef.EvalResultItem.Asterisk).from(APDBDef.EvalResultItem).where((APDBDef.EvalResultItem.ResultItemId == resultItemId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.EvalResultItem.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<EvalResultItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.EvalResultItem.Asterisk).from(APDBDef.EvalResultItem);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.EvalResultItem.ResultItemId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.EvalResultItem.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<EvalResultItem> GetInitData() {
                return new List<EvalResultItem>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<EvalResultItem> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    EvalResultItem data = list[i];
                    if ((PrimaryGet(data.ResultItemId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 考核-结果-结果项 Dal
        /// </summary>
        public partial class EvalResultItemDal : EvalResultItemDalBase {
            
            public EvalResultItemDal() {
            }
            
            public EvalResultItemDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 微信用户 DalBase
        /// </summary>
        public partial class WeiXinUserInfoDalBase : APDal {
            
            public WeiXinUserInfoDalBase() {
            }
            
            public WeiXinUserInfoDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(WeiXinUserInfo data) {
                if ((data.Id == 0)) {
                    data.Id = ((long)(GetNewId(APDBDef.WeiXinUserInfo.Id)));
                }
                var query = APQuery.insert(APDBDef.WeiXinUserInfo).values(APDBDef.WeiXinUserInfo.Id.SetValue(data.Id), APDBDef.WeiXinUserInfo.OpenId.SetValue(data.OpenId), APDBDef.WeiXinUserInfo.NickName.SetValue(data.NickName), APDBDef.WeiXinUserInfo.Gender.SetValue(data.Gender), APDBDef.WeiXinUserInfo.Prov.SetValue(data.Prov), APDBDef.WeiXinUserInfo.City.SetValue(data.City), APDBDef.WeiXinUserInfo.Country.SetValue(data.Country), APDBDef.WeiXinUserInfo.CreateDate.SetValue(data.CreateDate));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(WeiXinUserInfo data) {
                var query = APQuery.update(APDBDef.WeiXinUserInfo).values(APDBDef.WeiXinUserInfo.OpenId.SetValue(data.OpenId), APDBDef.WeiXinUserInfo.NickName.SetValue(data.NickName), APDBDef.WeiXinUserInfo.Gender.SetValue(data.Gender), APDBDef.WeiXinUserInfo.Prov.SetValue(data.Prov), APDBDef.WeiXinUserInfo.City.SetValue(data.City), APDBDef.WeiXinUserInfo.Country.SetValue(data.Country), APDBDef.WeiXinUserInfo.CreateDate.SetValue(data.CreateDate)).where((APDBDef.WeiXinUserInfo.Id == data.Id));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long id, Object metadata) {
                var query = APQuery.update(APDBDef.WeiXinUserInfo).values(APSqlSetPhraseSelector.Select(APDBDef.WeiXinUserInfo, metadata)).where((APDBDef.WeiXinUserInfo.Id == id));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long id) {
                var query = APQuery.delete(APDBDef.WeiXinUserInfo).where((APDBDef.WeiXinUserInfo.Id == id));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.WeiXinUserInfo).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.WeiXinUserInfo.Asterisk.Count()).from(APDBDef.WeiXinUserInfo).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual WeiXinUserInfo PrimaryGet(long id) {
                var query = APQuery.select(APDBDef.WeiXinUserInfo.Asterisk).from(APDBDef.WeiXinUserInfo).where((APDBDef.WeiXinUserInfo.Id == id));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.WeiXinUserInfo.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<WeiXinUserInfo> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.WeiXinUserInfo.Asterisk).from(APDBDef.WeiXinUserInfo);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.WeiXinUserInfo.Id);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.WeiXinUserInfo.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<WeiXinUserInfo> GetInitData() {
                return new List<WeiXinUserInfo>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<WeiXinUserInfo> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    WeiXinUserInfo data = list[i];
                    if ((PrimaryGet(data.Id) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 微信用户 Dal
        /// </summary>
        public partial class WeiXinUserInfoDal : WeiXinUserInfoDalBase {
            
            public WeiXinUserInfoDal() {
            }
            
            public WeiXinUserInfoDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 微课点赞 DalBase
        /// </summary>
        public partial class WeiXinPraiseDalBase : APDal {
            
            public WeiXinPraiseDalBase() {
            }
            
            public WeiXinPraiseDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(WeiXinPraise data) {
                if ((data.OccurId == 0)) {
                    data.OccurId = ((long)(GetNewId(APDBDef.WeiXinPraise.OccurId)));
                }
                var query = APQuery.insert(APDBDef.WeiXinPraise).values(APDBDef.WeiXinPraise.OccurId.SetValue(data.OccurId), APDBDef.WeiXinPraise.OpenId.SetValue(data.OpenId), APDBDef.WeiXinPraise.ResId.SetValue(data.ResId), APDBDef.WeiXinPraise.OccurTime.SetValue(data.OccurTime));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(WeiXinPraise data) {
                var query = APQuery.update(APDBDef.WeiXinPraise).values(APDBDef.WeiXinPraise.OpenId.SetValue(data.OpenId), APDBDef.WeiXinPraise.ResId.SetValue(data.ResId), APDBDef.WeiXinPraise.OccurTime.SetValue(data.OccurTime)).where((APDBDef.WeiXinPraise.OccurId == data.OccurId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long occurId, Object metadata) {
                var query = APQuery.update(APDBDef.WeiXinPraise).values(APSqlSetPhraseSelector.Select(APDBDef.WeiXinPraise, metadata)).where((APDBDef.WeiXinPraise.OccurId == occurId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long occurId) {
                var query = APQuery.delete(APDBDef.WeiXinPraise).where((APDBDef.WeiXinPraise.OccurId == occurId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.WeiXinPraise).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.WeiXinPraise.Asterisk.Count()).from(APDBDef.WeiXinPraise).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual WeiXinPraise PrimaryGet(long occurId) {
                var query = APQuery.select(APDBDef.WeiXinPraise.Asterisk).from(APDBDef.WeiXinPraise).where((APDBDef.WeiXinPraise.OccurId == occurId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.WeiXinPraise.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<WeiXinPraise> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.WeiXinPraise.Asterisk).from(APDBDef.WeiXinPraise);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.WeiXinPraise.OccurId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.WeiXinPraise.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<WeiXinPraise> GetInitData() {
                return new List<WeiXinPraise>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<WeiXinPraise> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    WeiXinPraise data = list[i];
                    if ((PrimaryGet(data.OccurId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 微课点赞 Dal
        /// </summary>
        public partial class WeiXinPraiseDal : WeiXinPraiseDalBase {
            
            public WeiXinPraiseDal() {
            }
            
            public WeiXinPraiseDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 微课收藏 DalBase
        /// </summary>
        public partial class WeiXinFavoriteDalBase : APDal {
            
            public WeiXinFavoriteDalBase() {
            }
            
            public WeiXinFavoriteDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(WeiXinFavorite data) {
                if ((data.OccurId == 0)) {
                    data.OccurId = ((long)(GetNewId(APDBDef.WeiXinFavorite.OccurId)));
                }
                var query = APQuery.insert(APDBDef.WeiXinFavorite).values(APDBDef.WeiXinFavorite.OccurId.SetValue(data.OccurId), APDBDef.WeiXinFavorite.OpenId.SetValue(data.OpenId), APDBDef.WeiXinFavorite.ResId.SetValue(data.ResId), APDBDef.WeiXinFavorite.OccurTime.SetValue(data.OccurTime));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(WeiXinFavorite data) {
                var query = APQuery.update(APDBDef.WeiXinFavorite).values(APDBDef.WeiXinFavorite.OpenId.SetValue(data.OpenId), APDBDef.WeiXinFavorite.ResId.SetValue(data.ResId), APDBDef.WeiXinFavorite.OccurTime.SetValue(data.OccurTime)).where((APDBDef.WeiXinFavorite.OccurId == data.OccurId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long occurId, Object metadata) {
                var query = APQuery.update(APDBDef.WeiXinFavorite).values(APSqlSetPhraseSelector.Select(APDBDef.WeiXinFavorite, metadata)).where((APDBDef.WeiXinFavorite.OccurId == occurId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long occurId) {
                var query = APQuery.delete(APDBDef.WeiXinFavorite).where((APDBDef.WeiXinFavorite.OccurId == occurId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.WeiXinFavorite).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.WeiXinFavorite.Asterisk.Count()).from(APDBDef.WeiXinFavorite).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual WeiXinFavorite PrimaryGet(long occurId) {
                var query = APQuery.select(APDBDef.WeiXinFavorite.Asterisk).from(APDBDef.WeiXinFavorite).where((APDBDef.WeiXinFavorite.OccurId == occurId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.WeiXinFavorite.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<WeiXinFavorite> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.WeiXinFavorite.Asterisk).from(APDBDef.WeiXinFavorite);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.WeiXinFavorite.OccurId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.WeiXinFavorite.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<WeiXinFavorite> GetInitData() {
                return new List<WeiXinFavorite>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<WeiXinFavorite> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    WeiXinFavorite data = list[i];
                    if ((PrimaryGet(data.OccurId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 微课收藏 Dal
        /// </summary>
        public partial class WeiXinFavoriteDal : WeiXinFavoriteDalBase {
            
            public WeiXinFavoriteDal() {
            }
            
            public WeiXinFavoriteDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 微课点击 DalBase
        /// </summary>
        public partial class WeiXinPlayCountDalBase : APDal {
            
            public WeiXinPlayCountDalBase() {
            }
            
            public WeiXinPlayCountDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(WeiXinPlayCount data) {
                if ((data.OccurId == 0)) {
                    data.OccurId = ((long)(GetNewId(APDBDef.WeiXinPlayCount.OccurId)));
                }
                var query = APQuery.insert(APDBDef.WeiXinPlayCount).values(APDBDef.WeiXinPlayCount.OccurId.SetValue(data.OccurId), APDBDef.WeiXinPlayCount.OpenId.SetValue(data.OpenId), APDBDef.WeiXinPlayCount.ResourceId.SetValue(data.ResourceId), APDBDef.WeiXinPlayCount.CourseId.SetValue(data.CourseId), APDBDef.WeiXinPlayCount.OccurTime.SetValue(data.OccurTime));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(WeiXinPlayCount data) {
                var query = APQuery.update(APDBDef.WeiXinPlayCount).values(APDBDef.WeiXinPlayCount.OpenId.SetValue(data.OpenId), APDBDef.WeiXinPlayCount.ResourceId.SetValue(data.ResourceId), APDBDef.WeiXinPlayCount.CourseId.SetValue(data.CourseId), APDBDef.WeiXinPlayCount.OccurTime.SetValue(data.OccurTime)).where((APDBDef.WeiXinPlayCount.OccurId == data.OccurId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long occurId, Object metadata) {
                var query = APQuery.update(APDBDef.WeiXinPlayCount).values(APSqlSetPhraseSelector.Select(APDBDef.WeiXinPlayCount, metadata)).where((APDBDef.WeiXinPlayCount.OccurId == occurId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long occurId) {
                var query = APQuery.delete(APDBDef.WeiXinPlayCount).where((APDBDef.WeiXinPlayCount.OccurId == occurId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.WeiXinPlayCount).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.WeiXinPlayCount.Asterisk.Count()).from(APDBDef.WeiXinPlayCount).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual WeiXinPlayCount PrimaryGet(long occurId) {
                var query = APQuery.select(APDBDef.WeiXinPlayCount.Asterisk).from(APDBDef.WeiXinPlayCount).where((APDBDef.WeiXinPlayCount.OccurId == occurId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.WeiXinPlayCount.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<WeiXinPlayCount> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.WeiXinPlayCount.Asterisk).from(APDBDef.WeiXinPlayCount);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.WeiXinPlayCount.OccurId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.WeiXinPlayCount.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<WeiXinPlayCount> GetInitData() {
                return new List<WeiXinPlayCount>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<WeiXinPlayCount> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    WeiXinPlayCount data = list[i];
                    if ((PrimaryGet(data.OccurId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 微课点击 Dal
        /// </summary>
        public partial class WeiXinPlayCountDal : WeiXinPlayCountDalBase {
            
            public WeiXinPlayCountDal() {
            }
            
            public WeiXinPlayCountDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 消息 DalBase
        /// </summary>
        public partial class NoticeDalBase : APDal {
            
            public NoticeDalBase() {
            }
            
            public NoticeDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(Notice data) {
                if ((data.NoticeId == 0)) {
                    data.NoticeId = ((long)(GetNewId(APDBDef.Notice.NoticeId)));
                }
                var query = APQuery.insert(APDBDef.Notice).values(APDBDef.Notice.NoticeId.SetValue(data.NoticeId), APDBDef.Notice.Title.SetValue(data.Title), APDBDef.Notice.Content.SetValue(data.Content), APDBDef.Notice.PublishDate.SetValue(data.PublishDate));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(Notice data) {
                var query = APQuery.update(APDBDef.Notice).values(APDBDef.Notice.Title.SetValue(data.Title), APDBDef.Notice.Content.SetValue(data.Content), APDBDef.Notice.PublishDate.SetValue(data.PublishDate)).where((APDBDef.Notice.NoticeId == data.NoticeId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long noticeId, Object metadata) {
                var query = APQuery.update(APDBDef.Notice).values(APSqlSetPhraseSelector.Select(APDBDef.Notice, metadata)).where((APDBDef.Notice.NoticeId == noticeId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long noticeId) {
                var query = APQuery.delete(APDBDef.Notice).where((APDBDef.Notice.NoticeId == noticeId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.Notice).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.Notice.Asterisk.Count()).from(APDBDef.Notice).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual Notice PrimaryGet(long noticeId) {
                var query = APQuery.select(APDBDef.Notice.Asterisk).from(APDBDef.Notice).where((APDBDef.Notice.NoticeId == noticeId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.Notice.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<Notice> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.Notice.Asterisk).from(APDBDef.Notice);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.Notice.NoticeId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.Notice.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<Notice> GetInitData() {
                return new List<Notice>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<Notice> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    Notice data = list[i];
                    if ((PrimaryGet(data.NoticeId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 消息 Dal
        /// </summary>
        public partial class NoticeDal : NoticeDalBase {
            
            public NoticeDal() {
            }
            
            public NoticeDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 微信专家表 DalBase
        /// </summary>
        public partial class WeiXinExpertDalBase : APDal {
            
            public WeiXinExpertDalBase() {
            }
            
            public WeiXinExpertDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(WeiXinExpert data) {
                if ((data.WxExpertId == 0)) {
                    data.WxExpertId = ((long)(GetNewId(APDBDef.WeiXinExpert.WxExpertId)));
                }
                var query = APQuery.insert(APDBDef.WeiXinExpert).values(APDBDef.WeiXinExpert.WxExpertId.SetValue(data.WxExpertId), APDBDef.WeiXinExpert.OpenId.SetValue(data.OpenId), APDBDef.WeiXinExpert.UserId.SetValue(data.UserId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(WeiXinExpert data) {
                var query = APQuery.update(APDBDef.WeiXinExpert).values(APDBDef.WeiXinExpert.OpenId.SetValue(data.OpenId), APDBDef.WeiXinExpert.UserId.SetValue(data.UserId)).where((APDBDef.WeiXinExpert.WxExpertId == data.WxExpertId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long wxExpertId, Object metadata) {
                var query = APQuery.update(APDBDef.WeiXinExpert).values(APSqlSetPhraseSelector.Select(APDBDef.WeiXinExpert, metadata)).where((APDBDef.WeiXinExpert.WxExpertId == wxExpertId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long wxExpertId) {
                var query = APQuery.delete(APDBDef.WeiXinExpert).where((APDBDef.WeiXinExpert.WxExpertId == wxExpertId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.WeiXinExpert).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.WeiXinExpert.Asterisk.Count()).from(APDBDef.WeiXinExpert).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual WeiXinExpert PrimaryGet(long wxExpertId) {
                var query = APQuery.select(APDBDef.WeiXinExpert.Asterisk).from(APDBDef.WeiXinExpert).where((APDBDef.WeiXinExpert.WxExpertId == wxExpertId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.WeiXinExpert.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<WeiXinExpert> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.WeiXinExpert.Asterisk).from(APDBDef.WeiXinExpert);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.WeiXinExpert.WxExpertId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.WeiXinExpert.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<WeiXinExpert> GetInitData() {
                return new List<WeiXinExpert>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<WeiXinExpert> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    WeiXinExpert data = list[i];
                    if ((PrimaryGet(data.WxExpertId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 微信专家表 Dal
        /// </summary>
        public partial class WeiXinExpertDal : WeiXinExpertDalBase {
            
            public WeiXinExpertDal() {
            }
            
            public WeiXinExpertDal(APDatabase db) : 
                    base(db) {
            }
        }
    }
    
    /// <summary>
    /// APBplDef 是一个自动生成的具有 Partial 修饰的类，用于定义所有的 Bpl 类。你可以 添加同名的 Partial 类来扩充功能。
    /// </summary>
    public partial class APBplDef {
        
        /// <summary>
        /// 选项列表 BplBase
        /// </summary>
        public partial class ResPickListBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(ResPickList data) {
                APDBDef db = new APDBDef();
                try {
                    db.ResPickListDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(ResPickList data) {
                APDBDef db = new APDBDef();
                try {
                    db.ResPickListDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long pickListId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.ResPickListDal.UpdatePartial(pickListId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long pickListId) {
                APDBDef db = new APDBDef();
                try {
                    db.ResPickListDal.PrimaryDelete(pickListId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.ResPickListDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.ResPickListDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static ResPickList PrimaryGet(long pickListId) {
                APDBDef db = new APDBDef();
                try {
                    return db.ResPickListDal.PrimaryGet(pickListId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<ResPickList> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.ResPickListDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<ResPickList> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.ResPickListDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<ResPickList> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.ResPickListDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<ResPickList> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 选项列表 Dal
        /// </summary>
        public partial class ResPickListBpl : ResPickListBplBase {
        }
        
        /// <summary>
        /// 选项列表项 BplBase
        /// </summary>
        public partial class ResPickListItemBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(ResPickListItem data) {
                APDBDef db = new APDBDef();
                try {
                    db.ResPickListItemDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(ResPickListItem data) {
                APDBDef db = new APDBDef();
                try {
                    db.ResPickListItemDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long pickListItemId, long pickListId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.ResPickListItemDal.UpdatePartial(pickListItemId, pickListId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long pickListItemId, long pickListId) {
                APDBDef db = new APDBDef();
                try {
                    db.ResPickListItemDal.PrimaryDelete(pickListItemId, pickListId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.ResPickListItemDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.ResPickListItemDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static ResPickListItem PrimaryGet(long pickListItemId, long pickListId) {
                APDBDef db = new APDBDef();
                try {
                    return db.ResPickListItemDal.PrimaryGet(pickListItemId, pickListId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<ResPickListItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.ResPickListItemDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<ResPickListItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.ResPickListItemDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<ResPickListItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.ResPickListItemDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<ResPickListItem> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 选项列表项 Dal
        /// </summary>
        public partial class ResPickListItemBpl : ResPickListItemBplBase {
        }
        
        /// <summary>
        /// 项目 BplBase
        /// </summary>
        public partial class ActiveBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(Active data) {
                APDBDef db = new APDBDef();
                try {
                    db.ActiveDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(Active data) {
                APDBDef db = new APDBDef();
                try {
                    db.ActiveDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long activeId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.ActiveDal.UpdatePartial(activeId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long activeId) {
                APDBDef db = new APDBDef();
                try {
                    db.ActiveDal.PrimaryDelete(activeId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.ActiveDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.ActiveDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static Active PrimaryGet(long activeId) {
                APDBDef db = new APDBDef();
                try {
                    return db.ActiveDal.PrimaryGet(activeId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Active> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.ActiveDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Active> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.ActiveDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Active> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.ActiveDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<Active> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 项目 Dal
        /// </summary>
        public partial class ActiveBpl : ActiveBplBase {
        }
        
        /// <summary>
        /// 用户 BplBase
        /// </summary>
        public partial class ResUserBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(ResUser data) {
                APDBDef db = new APDBDef();
                try {
                    db.ResUserDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(ResUser data) {
                APDBDef db = new APDBDef();
                try {
                    db.ResUserDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long userId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.ResUserDal.UpdatePartial(userId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long userId) {
                APDBDef db = new APDBDef();
                try {
                    db.ResUserDal.PrimaryDelete(userId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.ResUserDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.ResUserDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static ResUser PrimaryGet(long userId) {
                APDBDef db = new APDBDef();
                try {
                    return db.ResUserDal.PrimaryGet(userId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<ResUser> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.ResUserDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<ResUser> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.ResUserDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<ResUser> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.ResUserDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<ResUser> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 用户 Dal
        /// </summary>
        public partial class ResUserBpl : ResUserBplBase {
        }
        
        /// <summary>
        /// 单位 BplBase
        /// </summary>
        public partial class ResCompanyBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(ResCompany data) {
                APDBDef db = new APDBDef();
                try {
                    db.ResCompanyDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(ResCompany data) {
                APDBDef db = new APDBDef();
                try {
                    db.ResCompanyDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long companyId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.ResCompanyDal.UpdatePartial(companyId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long companyId) {
                APDBDef db = new APDBDef();
                try {
                    db.ResCompanyDal.PrimaryDelete(companyId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.ResCompanyDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.ResCompanyDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static ResCompany PrimaryGet(long companyId) {
                APDBDef db = new APDBDef();
                try {
                    return db.ResCompanyDal.PrimaryGet(companyId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<ResCompany> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.ResCompanyDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<ResCompany> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.ResCompanyDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<ResCompany> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.ResCompanyDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<ResCompany> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 单位 Dal
        /// </summary>
        public partial class ResCompanyBpl : ResCompanyBplBase {
        }
        
        /// <summary>
        /// 微课作品 BplBase
        /// </summary>
        public partial class CroResourceBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(CroResource data) {
                APDBDef db = new APDBDef();
                try {
                    db.CroResourceDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(CroResource data) {
                APDBDef db = new APDBDef();
                try {
                    db.CroResourceDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long crosourceId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.CroResourceDal.UpdatePartial(crosourceId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long crosourceId) {
                APDBDef db = new APDBDef();
                try {
                    db.CroResourceDal.PrimaryDelete(crosourceId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.CroResourceDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.CroResourceDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static CroResource PrimaryGet(long crosourceId) {
                APDBDef db = new APDBDef();
                try {
                    return db.CroResourceDal.PrimaryGet(crosourceId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<CroResource> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.CroResourceDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<CroResource> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.CroResourceDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<CroResource> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.CroResourceDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<CroResource> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 微课作品 Dal
        /// </summary>
        public partial class CroResourceBpl : CroResourceBplBase {
        }
        
        /// <summary>
        /// 课程 BplBase
        /// </summary>
        public partial class MicroCourseBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(MicroCourse data) {
                APDBDef db = new APDBDef();
                try {
                    db.MicroCourseDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(MicroCourse data) {
                APDBDef db = new APDBDef();
                try {
                    db.MicroCourseDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long courseId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.MicroCourseDal.UpdatePartial(courseId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long courseId) {
                APDBDef db = new APDBDef();
                try {
                    db.MicroCourseDal.PrimaryDelete(courseId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.MicroCourseDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.MicroCourseDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static MicroCourse PrimaryGet(long courseId) {
                APDBDef db = new APDBDef();
                try {
                    return db.MicroCourseDal.PrimaryGet(courseId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<MicroCourse> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.MicroCourseDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<MicroCourse> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.MicroCourseDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<MicroCourse> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.MicroCourseDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<MicroCourse> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 课程 Dal
        /// </summary>
        public partial class MicroCourseBpl : MicroCourseBplBase {
        }
        
        /// <summary>
        ///  BplBase
        /// </summary>
        public partial class FilesBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(Files data) {
                APDBDef db = new APDBDef();
                try {
                    db.FilesDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(Files data) {
                APDBDef db = new APDBDef();
                try {
                    db.FilesDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long fileId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.FilesDal.UpdatePartial(fileId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long fileId) {
                APDBDef db = new APDBDef();
                try {
                    db.FilesDal.PrimaryDelete(fileId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.FilesDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.FilesDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static Files PrimaryGet(long fileId) {
                APDBDef db = new APDBDef();
                try {
                    return db.FilesDal.PrimaryGet(fileId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Files> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.FilesDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Files> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.FilesDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Files> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.FilesDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<Files> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        ///  Dal
        /// </summary>
        public partial class FilesBpl : FilesBplBase {
        }
        
        /// <summary>
        /// 评审指标 BplBase
        /// </summary>
        public partial class IndicationBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(Indication data) {
                APDBDef db = new APDBDef();
                try {
                    db.IndicationDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(Indication data) {
                APDBDef db = new APDBDef();
                try {
                    db.IndicationDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long indicationId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.IndicationDal.UpdatePartial(indicationId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long indicationId) {
                APDBDef db = new APDBDef();
                try {
                    db.IndicationDal.PrimaryDelete(indicationId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.IndicationDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.IndicationDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static Indication PrimaryGet(long indicationId) {
                APDBDef db = new APDBDef();
                try {
                    return db.IndicationDal.PrimaryGet(indicationId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Indication> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.IndicationDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Indication> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.IndicationDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Indication> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.IndicationDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<Indication> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 评审指标 Dal
        /// </summary>
        public partial class IndicationBpl : IndicationBplBase {
        }
        
        /// <summary>
        /// 评审组 BplBase
        /// </summary>
        public partial class EvalGroupBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(EvalGroup data) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalGroupDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(EvalGroup data) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalGroupDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long groupId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalGroupDal.UpdatePartial(groupId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long groupId) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalGroupDal.PrimaryDelete(groupId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalGroupDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalGroupDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static EvalGroup PrimaryGet(long groupId) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalGroupDal.PrimaryGet(groupId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalGroup> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalGroupDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalGroup> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalGroupDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalGroup> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalGroupDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<EvalGroup> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 评审组 Dal
        /// </summary>
        public partial class EvalGroupBpl : EvalGroupBplBase {
        }
        
        /// <summary>
        /// 专家-考核结果 BplBase
        /// </summary>
        public partial class EvalResultBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(EvalResult data) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalResultDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(EvalResult data) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalResultDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long resultId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalResultDal.UpdatePartial(resultId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long resultId) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalResultDal.PrimaryDelete(resultId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalResultDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalResultDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static EvalResult PrimaryGet(long resultId) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalResultDal.PrimaryGet(resultId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalResultDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalResultDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalResultDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<EvalResult> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 专家-考核结果 Dal
        /// </summary>
        public partial class EvalResultBpl : EvalResultBplBase {
        }
        
        /// <summary>
        /// 考核-结果-结果项 BplBase
        /// </summary>
        public partial class EvalResultItemBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(EvalResultItem data) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalResultItemDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(EvalResultItem data) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalResultItemDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long resultItemId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalResultItemDal.UpdatePartial(resultItemId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long resultItemId) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalResultItemDal.PrimaryDelete(resultItemId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalResultItemDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalResultItemDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static EvalResultItem PrimaryGet(long resultItemId) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalResultItemDal.PrimaryGet(resultItemId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalResultItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalResultItemDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalResultItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalResultItemDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalResultItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalResultItemDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<EvalResultItem> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 考核-结果-结果项 Dal
        /// </summary>
        public partial class EvalResultItemBpl : EvalResultItemBplBase {
        }
        
        /// <summary>
        /// 微信用户 BplBase
        /// </summary>
        public partial class WeiXinUserInfoBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(WeiXinUserInfo data) {
                APDBDef db = new APDBDef();
                try {
                    db.WeiXinUserInfoDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(WeiXinUserInfo data) {
                APDBDef db = new APDBDef();
                try {
                    db.WeiXinUserInfoDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long id, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.WeiXinUserInfoDal.UpdatePartial(id, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long id) {
                APDBDef db = new APDBDef();
                try {
                    db.WeiXinUserInfoDal.PrimaryDelete(id);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.WeiXinUserInfoDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.WeiXinUserInfoDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static WeiXinUserInfo PrimaryGet(long id) {
                APDBDef db = new APDBDef();
                try {
                    return db.WeiXinUserInfoDal.PrimaryGet(id);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<WeiXinUserInfo> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.WeiXinUserInfoDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<WeiXinUserInfo> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.WeiXinUserInfoDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<WeiXinUserInfo> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.WeiXinUserInfoDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<WeiXinUserInfo> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 微信用户 Dal
        /// </summary>
        public partial class WeiXinUserInfoBpl : WeiXinUserInfoBplBase {
        }
        
        /// <summary>
        /// 微课点赞 BplBase
        /// </summary>
        public partial class WeiXinPraiseBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(WeiXinPraise data) {
                APDBDef db = new APDBDef();
                try {
                    db.WeiXinPraiseDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(WeiXinPraise data) {
                APDBDef db = new APDBDef();
                try {
                    db.WeiXinPraiseDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long occurId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.WeiXinPraiseDal.UpdatePartial(occurId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long occurId) {
                APDBDef db = new APDBDef();
                try {
                    db.WeiXinPraiseDal.PrimaryDelete(occurId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.WeiXinPraiseDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.WeiXinPraiseDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static WeiXinPraise PrimaryGet(long occurId) {
                APDBDef db = new APDBDef();
                try {
                    return db.WeiXinPraiseDal.PrimaryGet(occurId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<WeiXinPraise> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.WeiXinPraiseDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<WeiXinPraise> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.WeiXinPraiseDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<WeiXinPraise> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.WeiXinPraiseDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<WeiXinPraise> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 微课点赞 Dal
        /// </summary>
        public partial class WeiXinPraiseBpl : WeiXinPraiseBplBase {
        }
        
        /// <summary>
        /// 微课收藏 BplBase
        /// </summary>
        public partial class WeiXinFavoriteBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(WeiXinFavorite data) {
                APDBDef db = new APDBDef();
                try {
                    db.WeiXinFavoriteDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(WeiXinFavorite data) {
                APDBDef db = new APDBDef();
                try {
                    db.WeiXinFavoriteDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long occurId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.WeiXinFavoriteDal.UpdatePartial(occurId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long occurId) {
                APDBDef db = new APDBDef();
                try {
                    db.WeiXinFavoriteDal.PrimaryDelete(occurId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.WeiXinFavoriteDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.WeiXinFavoriteDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static WeiXinFavorite PrimaryGet(long occurId) {
                APDBDef db = new APDBDef();
                try {
                    return db.WeiXinFavoriteDal.PrimaryGet(occurId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<WeiXinFavorite> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.WeiXinFavoriteDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<WeiXinFavorite> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.WeiXinFavoriteDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<WeiXinFavorite> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.WeiXinFavoriteDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<WeiXinFavorite> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 微课收藏 Dal
        /// </summary>
        public partial class WeiXinFavoriteBpl : WeiXinFavoriteBplBase {
        }
        
        /// <summary>
        /// 微课点击 BplBase
        /// </summary>
        public partial class WeiXinPlayCountBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(WeiXinPlayCount data) {
                APDBDef db = new APDBDef();
                try {
                    db.WeiXinPlayCountDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(WeiXinPlayCount data) {
                APDBDef db = new APDBDef();
                try {
                    db.WeiXinPlayCountDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long occurId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.WeiXinPlayCountDal.UpdatePartial(occurId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long occurId) {
                APDBDef db = new APDBDef();
                try {
                    db.WeiXinPlayCountDal.PrimaryDelete(occurId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.WeiXinPlayCountDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.WeiXinPlayCountDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static WeiXinPlayCount PrimaryGet(long occurId) {
                APDBDef db = new APDBDef();
                try {
                    return db.WeiXinPlayCountDal.PrimaryGet(occurId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<WeiXinPlayCount> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.WeiXinPlayCountDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<WeiXinPlayCount> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.WeiXinPlayCountDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<WeiXinPlayCount> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.WeiXinPlayCountDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<WeiXinPlayCount> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 微课点击 Dal
        /// </summary>
        public partial class WeiXinPlayCountBpl : WeiXinPlayCountBplBase {
        }
        
        /// <summary>
        /// 消息 BplBase
        /// </summary>
        public partial class NoticeBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(Notice data) {
                APDBDef db = new APDBDef();
                try {
                    db.NoticeDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(Notice data) {
                APDBDef db = new APDBDef();
                try {
                    db.NoticeDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long noticeId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.NoticeDal.UpdatePartial(noticeId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long noticeId) {
                APDBDef db = new APDBDef();
                try {
                    db.NoticeDal.PrimaryDelete(noticeId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.NoticeDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.NoticeDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static Notice PrimaryGet(long noticeId) {
                APDBDef db = new APDBDef();
                try {
                    return db.NoticeDal.PrimaryGet(noticeId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Notice> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.NoticeDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Notice> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.NoticeDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Notice> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.NoticeDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<Notice> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 消息 Dal
        /// </summary>
        public partial class NoticeBpl : NoticeBplBase {
        }
        
        /// <summary>
        /// 微信专家表 BplBase
        /// </summary>
        public partial class WeiXinExpertBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(WeiXinExpert data) {
                APDBDef db = new APDBDef();
                try {
                    db.WeiXinExpertDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(WeiXinExpert data) {
                APDBDef db = new APDBDef();
                try {
                    db.WeiXinExpertDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long wxExpertId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.WeiXinExpertDal.UpdatePartial(wxExpertId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long wxExpertId) {
                APDBDef db = new APDBDef();
                try {
                    db.WeiXinExpertDal.PrimaryDelete(wxExpertId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.WeiXinExpertDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.WeiXinExpertDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static WeiXinExpert PrimaryGet(long wxExpertId) {
                APDBDef db = new APDBDef();
                try {
                    return db.WeiXinExpertDal.PrimaryGet(wxExpertId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<WeiXinExpert> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.WeiXinExpertDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<WeiXinExpert> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.WeiXinExpertDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<WeiXinExpert> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.WeiXinExpertDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<WeiXinExpert> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 微信专家表 Dal
        /// </summary>
        public partial class WeiXinExpertBpl : WeiXinExpertBplBase {
        }
    }
    
    /// <summary>
    /// 选项列表 Base
    /// </summary>
    [Serializable()]
    public abstract partial class ResPickListBase {
        
        /// <summary>
        /// PickListId
        /// </summary>
        private long _pickListId;
        
        /// <summary>
        /// InnerKey
        /// </summary>
        private string _innerKey = string.Empty;
        
        /// <summary>
        /// Name
        /// </summary>
        private string _name = string.Empty;
        
        /// <summary>
        /// Adjustable
        /// </summary>
        private bool _adjustable;
        
        /// <summary>
        /// Strengthen
        /// </summary>
        private bool _strengthen;
        
        /// <summary>
        /// Description
        /// </summary>
        private string _description = string.Empty;
        
        /// <summary>
        /// Creator
        /// </summary>
        private long _creator;
        
        /// <summary>
        /// CreatedTime
        /// </summary>
        private System.DateTime _createdTime;
        
        /// <summary>
        /// LastModifier
        /// </summary>
        private long _lastModifier;
        
        /// <summary>
        /// LastModifiedTime
        /// </summary>
        private System.DateTime _lastModifiedTime;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public ResPickListBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public ResPickListBase(long pickListId, string innerKey, string name, bool adjustable, bool strengthen, string description, long creator, System.DateTime createdTime, long lastModifier, System.DateTime lastModifiedTime) {
            _pickListId = pickListId;
            _innerKey = innerKey;
            _name = name;
            _adjustable = adjustable;
            _strengthen = strengthen;
            _description = description;
            _creator = creator;
            _createdTime = createdTime;
            _lastModifier = lastModifier;
            _lastModifiedTime = lastModifiedTime;
        }
        
        /// <summary>
        /// PickListId
        /// </summary>
        public virtual long PickListId {
            get {
                return _pickListId;
            }
            set {
                _pickListId = value;
            }
        }
        
        /// <summary>
        /// PickListId APColumnDef
        /// </summary>
        public static Int64APColumnDef PickListIdDef {
            get {
                return APDBDef.ResPickList.PickListId;
            }
        }
        
        /// <summary>
        /// InnerKey
        /// </summary>
        [StringLength(40)]
        public virtual string InnerKey {
            get {
                return _innerKey;
            }
            set {
                _innerKey = value;
            }
        }
        
        /// <summary>
        /// InnerKey APColumnDef
        /// </summary>
        public static StringAPColumnDef InnerKeyDef {
            get {
                return APDBDef.ResPickList.InnerKey;
            }
        }
        
        /// <summary>
        /// Name
        /// </summary>
        [StringLength(255)]
        public virtual string Name {
            get {
                return _name;
            }
            set {
                _name = value;
            }
        }
        
        /// <summary>
        /// Name APColumnDef
        /// </summary>
        public static StringAPColumnDef NameDef {
            get {
                return APDBDef.ResPickList.Name;
            }
        }
        
        /// <summary>
        /// Adjustable
        /// </summary>
        public virtual bool Adjustable {
            get {
                return _adjustable;
            }
            set {
                _adjustable = value;
            }
        }
        
        /// <summary>
        /// Adjustable APColumnDef
        /// </summary>
        public static BooleanAPColumnDef AdjustableDef {
            get {
                return APDBDef.ResPickList.Adjustable;
            }
        }
        
        /// <summary>
        /// Strengthen
        /// </summary>
        public virtual bool Strengthen {
            get {
                return _strengthen;
            }
            set {
                _strengthen = value;
            }
        }
        
        /// <summary>
        /// Strengthen APColumnDef
        /// </summary>
        public static BooleanAPColumnDef StrengthenDef {
            get {
                return APDBDef.ResPickList.Strengthen;
            }
        }
        
        /// <summary>
        /// Description
        /// </summary>
        [StringLength(1000)]
        public virtual string Description {
            get {
                return _description;
            }
            set {
                _description = value;
            }
        }
        
        /// <summary>
        /// Description APColumnDef
        /// </summary>
        public static StringAPColumnDef DescriptionDef {
            get {
                return APDBDef.ResPickList.Description;
            }
        }
        
        /// <summary>
        /// Creator
        /// </summary>
        public virtual long Creator {
            get {
                return _creator;
            }
            set {
                _creator = value;
            }
        }
        
        /// <summary>
        /// Creator APColumnDef
        /// </summary>
        public static Int64APColumnDef CreatorDef {
            get {
                return APDBDef.ResPickList.Creator;
            }
        }
        
        /// <summary>
        /// CreatedTime
        /// </summary>
        public virtual System.DateTime CreatedTime {
            get {
                return _createdTime;
            }
            set {
                _createdTime = value;
            }
        }
        
        /// <summary>
        /// CreatedTime APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef CreatedTimeDef {
            get {
                return APDBDef.ResPickList.CreatedTime;
            }
        }
        
        /// <summary>
        /// LastModifier
        /// </summary>
        public virtual long LastModifier {
            get {
                return _lastModifier;
            }
            set {
                _lastModifier = value;
            }
        }
        
        /// <summary>
        /// LastModifier APColumnDef
        /// </summary>
        public static Int64APColumnDef LastModifierDef {
            get {
                return APDBDef.ResPickList.LastModifier;
            }
        }
        
        /// <summary>
        /// LastModifiedTime
        /// </summary>
        public virtual System.DateTime LastModifiedTime {
            get {
                return _lastModifiedTime;
            }
            set {
                _lastModifiedTime = value;
            }
        }
        
        /// <summary>
        /// LastModifiedTime APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef LastModifiedTimeDef {
            get {
                return APDBDef.ResPickList.LastModifiedTime;
            }
        }
        
        /// <summary>
        /// ResPickListTableDef APTableDef
        /// </summary>
        public static APDBDef.ResPickListTableDef TableDef {
            get {
                return APDBDef.ResPickList;
            }
        }
        
        /// <summary>
        /// ResPickListTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.ResPickList.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(ResPickList data) {
            PickListId = data.PickListId;
            InnerKey = data.InnerKey;
            Name = data.Name;
            Adjustable = data.Adjustable;
            Strengthen = data.Strengthen;
            Description = data.Description;
            Creator = data.Creator;
            CreatedTime = data.CreatedTime;
            LastModifier = data.LastModifier;
            LastModifiedTime = data.LastModifiedTime;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(ResPickList data) {
            if ((PickListId != data.PickListId)) {
                return false;
            }
            if ((InnerKey != data.InnerKey)) {
                return false;
            }
            if ((Name != data.Name)) {
                return false;
            }
            if ((Adjustable != data.Adjustable)) {
                return false;
            }
            if ((Strengthen != data.Strengthen)) {
                return false;
            }
            if ((Description != data.Description)) {
                return false;
            }
            if ((Creator != data.Creator)) {
                return false;
            }
            if ((CreatedTime != data.CreatedTime)) {
                return false;
            }
            if ((LastModifier != data.LastModifier)) {
                return false;
            }
            if ((LastModifiedTime != data.LastModifiedTime)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.ResPickListBpl.Insert(((ResPickList)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.ResPickListBpl.Update(((ResPickList)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long pickListId, Object metadata) {
            APBplDef.ResPickListBpl.UpdatePartial(pickListId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long pickListId) {
            APBplDef.ResPickListBpl.PrimaryDelete(pickListId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.ResPickListBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.ResPickListBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static ResPickList PrimaryGet(long pickListId) {
            return APBplDef.ResPickListBpl.PrimaryGet(pickListId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<ResPickList> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.ResPickListBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<ResPickList> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.ResPickListBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<ResPickList> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.ResPickListBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<ResPickList> GetAll() {
            return APBplDef.ResPickListBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 选项列表
    /// </summary>
    [Serializable()]
    public partial class ResPickList : ResPickListBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public ResPickList() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public ResPickList(long pickListId, string innerKey, string name, bool adjustable, bool strengthen, string description, long creator, System.DateTime createdTime, long lastModifier, System.DateTime lastModifiedTime) : 
                base(pickListId, innerKey, name, adjustable, strengthen, description, creator, createdTime, lastModifier, lastModifiedTime) {
        }
    }
    
    /// <summary>
    /// 选项列表项 Base
    /// </summary>
    [Serializable()]
    public abstract partial class ResPickListItemBase {
        
        /// <summary>
        /// PickListItemId
        /// </summary>
        private long _pickListItemId;
        
        /// <summary>
        /// Associated with CrmPickList.PickListId
        /// </summary>
        private long _pickListId;
        
        /// <summary>
        /// Name
        /// </summary>
        private string _name = string.Empty;
        
        /// <summary>
        /// StrengthenValue
        /// </summary>
        private long _strengthenValue;
        
        /// <summary>
        /// Code
        /// </summary>
        private string _code = string.Empty;
        
        /// <summary>
        /// IsDefault
        /// </summary>
        private bool _isDefault;
        
        /// <summary>
        /// Creator
        /// </summary>
        private long _creator;
        
        /// <summary>
        /// CreatedTime
        /// </summary>
        private System.DateTime _createdTime;
        
        /// <summary>
        /// LastModifier
        /// </summary>
        private long _lastModifier;
        
        /// <summary>
        /// LastModifiedTime
        /// </summary>
        private System.DateTime _lastModifiedTime;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public ResPickListItemBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public ResPickListItemBase(long pickListItemId, long pickListId, string name, long strengthenValue, string code, bool isDefault, long creator, System.DateTime createdTime, long lastModifier, System.DateTime lastModifiedTime) {
            _pickListItemId = pickListItemId;
            _pickListId = pickListId;
            _name = name;
            _strengthenValue = strengthenValue;
            _code = code;
            _isDefault = isDefault;
            _creator = creator;
            _createdTime = createdTime;
            _lastModifier = lastModifier;
            _lastModifiedTime = lastModifiedTime;
        }
        
        /// <summary>
        /// PickListItemId
        /// </summary>
        public virtual long PickListItemId {
            get {
                return _pickListItemId;
            }
            set {
                _pickListItemId = value;
            }
        }
        
        /// <summary>
        /// PickListItemId APColumnDef
        /// </summary>
        public static Int64APColumnDef PickListItemIdDef {
            get {
                return APDBDef.ResPickListItem.PickListItemId;
            }
        }
        
        /// <summary>
        /// Associated with CrmPickList.PickListId
        /// </summary>
        public virtual long PickListId {
            get {
                return _pickListId;
            }
            set {
                _pickListId = value;
            }
        }
        
        /// <summary>
        /// Associated with CrmPickList.PickListId APColumnDef
        /// </summary>
        public static Int64APColumnDef PickListIdDef {
            get {
                return APDBDef.ResPickListItem.PickListId;
            }
        }
        
        /// <summary>
        /// Name
        /// </summary>
        [StringLength(255)]
        public virtual string Name {
            get {
                return _name;
            }
            set {
                _name = value;
            }
        }
        
        /// <summary>
        /// Name APColumnDef
        /// </summary>
        public static StringAPColumnDef NameDef {
            get {
                return APDBDef.ResPickListItem.Name;
            }
        }
        
        /// <summary>
        /// StrengthenValue
        /// </summary>
        public virtual long StrengthenValue {
            get {
                return _strengthenValue;
            }
            set {
                _strengthenValue = value;
            }
        }
        
        /// <summary>
        /// StrengthenValue APColumnDef
        /// </summary>
        public static Int64APColumnDef StrengthenValueDef {
            get {
                return APDBDef.ResPickListItem.StrengthenValue;
            }
        }
        
        /// <summary>
        /// Code
        /// </summary>
        [StringLength(100)]
        public virtual string Code {
            get {
                return _code;
            }
            set {
                _code = value;
            }
        }
        
        /// <summary>
        /// Code APColumnDef
        /// </summary>
        public static StringAPColumnDef CodeDef {
            get {
                return APDBDef.ResPickListItem.Code;
            }
        }
        
        /// <summary>
        /// IsDefault
        /// </summary>
        public virtual bool IsDefault {
            get {
                return _isDefault;
            }
            set {
                _isDefault = value;
            }
        }
        
        /// <summary>
        /// IsDefault APColumnDef
        /// </summary>
        public static BooleanAPColumnDef IsDefaultDef {
            get {
                return APDBDef.ResPickListItem.IsDefault;
            }
        }
        
        /// <summary>
        /// Creator
        /// </summary>
        public virtual long Creator {
            get {
                return _creator;
            }
            set {
                _creator = value;
            }
        }
        
        /// <summary>
        /// Creator APColumnDef
        /// </summary>
        public static Int64APColumnDef CreatorDef {
            get {
                return APDBDef.ResPickListItem.Creator;
            }
        }
        
        /// <summary>
        /// CreatedTime
        /// </summary>
        public virtual System.DateTime CreatedTime {
            get {
                return _createdTime;
            }
            set {
                _createdTime = value;
            }
        }
        
        /// <summary>
        /// CreatedTime APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef CreatedTimeDef {
            get {
                return APDBDef.ResPickListItem.CreatedTime;
            }
        }
        
        /// <summary>
        /// LastModifier
        /// </summary>
        public virtual long LastModifier {
            get {
                return _lastModifier;
            }
            set {
                _lastModifier = value;
            }
        }
        
        /// <summary>
        /// LastModifier APColumnDef
        /// </summary>
        public static Int64APColumnDef LastModifierDef {
            get {
                return APDBDef.ResPickListItem.LastModifier;
            }
        }
        
        /// <summary>
        /// LastModifiedTime
        /// </summary>
        public virtual System.DateTime LastModifiedTime {
            get {
                return _lastModifiedTime;
            }
            set {
                _lastModifiedTime = value;
            }
        }
        
        /// <summary>
        /// LastModifiedTime APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef LastModifiedTimeDef {
            get {
                return APDBDef.ResPickListItem.LastModifiedTime;
            }
        }
        
        /// <summary>
        /// ResPickListItemTableDef APTableDef
        /// </summary>
        public static APDBDef.ResPickListItemTableDef TableDef {
            get {
                return APDBDef.ResPickListItem;
            }
        }
        
        /// <summary>
        /// ResPickListItemTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.ResPickListItem.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(ResPickListItem data) {
            PickListItemId = data.PickListItemId;
            PickListId = data.PickListId;
            Name = data.Name;
            StrengthenValue = data.StrengthenValue;
            Code = data.Code;
            IsDefault = data.IsDefault;
            Creator = data.Creator;
            CreatedTime = data.CreatedTime;
            LastModifier = data.LastModifier;
            LastModifiedTime = data.LastModifiedTime;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(ResPickListItem data) {
            if ((PickListItemId != data.PickListItemId)) {
                return false;
            }
            if ((PickListId != data.PickListId)) {
                return false;
            }
            if ((Name != data.Name)) {
                return false;
            }
            if ((StrengthenValue != data.StrengthenValue)) {
                return false;
            }
            if ((Code != data.Code)) {
                return false;
            }
            if ((IsDefault != data.IsDefault)) {
                return false;
            }
            if ((Creator != data.Creator)) {
                return false;
            }
            if ((CreatedTime != data.CreatedTime)) {
                return false;
            }
            if ((LastModifier != data.LastModifier)) {
                return false;
            }
            if ((LastModifiedTime != data.LastModifiedTime)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.ResPickListItemBpl.Insert(((ResPickListItem)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.ResPickListItemBpl.Update(((ResPickListItem)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long pickListItemId, long pickListId, Object metadata) {
            APBplDef.ResPickListItemBpl.UpdatePartial(pickListItemId, pickListId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long pickListItemId, long pickListId) {
            APBplDef.ResPickListItemBpl.PrimaryDelete(pickListItemId, pickListId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.ResPickListItemBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.ResPickListItemBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static ResPickListItem PrimaryGet(long pickListItemId, long pickListId) {
            return APBplDef.ResPickListItemBpl.PrimaryGet(pickListItemId, pickListId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<ResPickListItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.ResPickListItemBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<ResPickListItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.ResPickListItemBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<ResPickListItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.ResPickListItemBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<ResPickListItem> GetAll() {
            return APBplDef.ResPickListItemBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 选项列表项
    /// </summary>
    [Serializable()]
    public partial class ResPickListItem : ResPickListItemBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public ResPickListItem() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public ResPickListItem(long pickListItemId, long pickListId, string name, long strengthenValue, string code, bool isDefault, long creator, System.DateTime createdTime, long lastModifier, System.DateTime lastModifiedTime) : 
                base(pickListItemId, pickListId, name, strengthenValue, code, isDefault, creator, createdTime, lastModifier, lastModifiedTime) {
        }
    }
    
    /// <summary>
    /// 项目 Base
    /// </summary>
    [Serializable()]
    public abstract partial class ActiveBase {
        
        /// <summary>
        /// ActiveId
        /// </summary>
        private long _activeId;
        
        /// <summary>
        /// ActiveName
        /// </summary>
        private string _activeName = string.Empty;
        
        /// <summary>
        /// Description
        /// </summary>
        private string _description = string.Empty;
        
        /// <summary>
        /// Year
        /// </summary>
        private int _year;
        
        /// <summary>
        /// Company
        /// </summary>
        private string _company = string.Empty;
        
        /// <summary>
        /// LevelPKID
        /// </summary>
        private long _levelPKID;
        
        /// <summary>
        /// SemesterPKID
        /// </summary>
        private long _semesterPKID;
        
        /// <summary>
        /// PickList - APEdu.net key is PLKey_PublicState
        /// </summary>
        private long _publicStatePKID = 10450;
        
        /// <summary>
        /// PickList - APEdu.net key is PLKey_DownloadState
        /// </summary>
        private long _downloadStatePKID = 10452;
        
        /// <summary>
        /// StartDate
        /// </summary>
        private System.DateTime _startDate;
        
        /// <summary>
        /// EndDate
        /// </summary>
        private System.DateTime _endDate;
        
        /// <summary>
        /// UploadStartDate
        /// </summary>
        private System.DateTime _uploadStartDate;
        
        /// <summary>
        /// UploadEndDate
        /// </summary>
        private System.DateTime _uploadEndDate;
        
        /// <summary>
        /// IsCurrent
        /// </summary>
        private bool _isCurrent;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public ActiveBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public ActiveBase(long activeId, string activeName, string description, int year, string company, long levelPKID, long semesterPKID, long publicStatePKID, long downloadStatePKID, System.DateTime startDate, System.DateTime endDate, System.DateTime uploadStartDate, System.DateTime uploadEndDate, bool isCurrent) {
            _activeId = activeId;
            _activeName = activeName;
            _description = description;
            _year = year;
            _company = company;
            _levelPKID = levelPKID;
            _semesterPKID = semesterPKID;
            _publicStatePKID = publicStatePKID;
            _downloadStatePKID = downloadStatePKID;
            _startDate = startDate;
            _endDate = endDate;
            _uploadStartDate = uploadStartDate;
            _uploadEndDate = uploadEndDate;
            _isCurrent = isCurrent;
        }
        
        /// <summary>
        /// ActiveId
        /// </summary>
        [Display(Name="项目ID")]
        public virtual long ActiveId {
            get {
                return _activeId;
            }
            set {
                _activeId = value;
            }
        }
        
        /// <summary>
        /// ActiveId APColumnDef
        /// </summary>
        public static Int64APColumnDef ActiveIdDef {
            get {
                return APDBDef.Active.ActiveId;
            }
        }
        
        /// <summary>
        /// ActiveName
        /// </summary>
        [Display(Name="项目名称")]
        [Required()]
        [StringLength(100)]
        public virtual string ActiveName {
            get {
                return _activeName;
            }
            set {
                _activeName = value;
            }
        }
        
        /// <summary>
        /// ActiveName APColumnDef
        /// </summary>
        public static StringAPColumnDef ActiveNameDef {
            get {
                return APDBDef.Active.ActiveName;
            }
        }
        
        /// <summary>
        /// Description
        /// </summary>
        [Display(Name="描述")]
        [Required()]
        [StringLength(255)]
        public virtual string Description {
            get {
                return _description;
            }
            set {
                _description = value;
            }
        }
        
        /// <summary>
        /// Description APColumnDef
        /// </summary>
        public static StringAPColumnDef DescriptionDef {
            get {
                return APDBDef.Active.Description;
            }
        }
        
        /// <summary>
        /// Year
        /// </summary>
        [Display(Name="项目年份")]
        [Required()]
        public virtual int Year {
            get {
                return _year;
            }
            set {
                _year = value;
            }
        }
        
        /// <summary>
        /// Year APColumnDef
        /// </summary>
        public static Int32APColumnDef YearDef {
            get {
                return APDBDef.Active.Year;
            }
        }
        
        /// <summary>
        /// Company
        /// </summary>
        [Display(Name="主办单位")]
        [Required()]
        [StringLength(100)]
        public virtual string Company {
            get {
                return _company;
            }
            set {
                _company = value;
            }
        }
        
        /// <summary>
        /// Company APColumnDef
        /// </summary>
        public static StringAPColumnDef CompanyDef {
            get {
                return APDBDef.Active.Company;
            }
        }
        
        /// <summary>
        /// LevelPKID
        /// </summary>
        [Display(Name="项目级别")]
        public virtual long LevelPKID {
            get {
                return _levelPKID;
            }
            set {
                _levelPKID = value;
            }
        }
        
        /// <summary>
        /// LevelPKID APColumnDef
        /// </summary>
        public static Int64APColumnDef LevelPKIDDef {
            get {
                return APDBDef.Active.LevelPKID;
            }
        }
        
        /// <summary>
        /// SemesterPKID
        /// </summary>
        [Display(Name="学期")]
        public virtual long SemesterPKID {
            get {
                return _semesterPKID;
            }
            set {
                _semesterPKID = value;
            }
        }
        
        /// <summary>
        /// SemesterPKID APColumnDef
        /// </summary>
        public static Int64APColumnDef SemesterPKIDDef {
            get {
                return APDBDef.Active.SemesterPKID;
            }
        }
        
        /// <summary>
        /// PickList - APEdu.net key is PLKey_PublicState
        /// </summary>
        [Display(Name="公开设置")]
        public virtual long PublicStatePKID {
            get {
                return _publicStatePKID;
            }
            set {
                _publicStatePKID = value;
            }
        }
        
        /// <summary>
        /// PickList - APEdu.net key is PLKey_PublicState APColumnDef
        /// </summary>
        public static Int64APColumnDef PublicStatePKIDDef {
            get {
                return APDBDef.Active.PublicStatePKID;
            }
        }
        
        /// <summary>
        /// PickList - APEdu.net key is PLKey_DownloadState
        /// </summary>
        [Display(Name="下载设置")]
        public virtual long DownloadStatePKID {
            get {
                return _downloadStatePKID;
            }
            set {
                _downloadStatePKID = value;
            }
        }
        
        /// <summary>
        /// PickList - APEdu.net key is PLKey_DownloadState APColumnDef
        /// </summary>
        public static Int64APColumnDef DownloadStatePKIDDef {
            get {
                return APDBDef.Active.DownloadStatePKID;
            }
        }
        
        /// <summary>
        /// StartDate
        /// </summary>
        [Display(Name="起始时间")]
        public virtual System.DateTime StartDate {
            get {
                return _startDate;
            }
            set {
                _startDate = value;
            }
        }
        
        /// <summary>
        /// StartDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef StartDateDef {
            get {
                return APDBDef.Active.StartDate;
            }
        }
        
        /// <summary>
        /// EndDate
        /// </summary>
        [Display(Name="结束时间")]
        public virtual System.DateTime EndDate {
            get {
                return _endDate;
            }
            set {
                _endDate = value;
            }
        }
        
        /// <summary>
        /// EndDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef EndDateDef {
            get {
                return APDBDef.Active.EndDate;
            }
        }
        
        /// <summary>
        /// UploadStartDate
        /// </summary>
        [Display(Name="上传起始时间")]
        public virtual System.DateTime UploadStartDate {
            get {
                return _uploadStartDate;
            }
            set {
                _uploadStartDate = value;
            }
        }
        
        /// <summary>
        /// UploadStartDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef UploadStartDateDef {
            get {
                return APDBDef.Active.UploadStartDate;
            }
        }
        
        /// <summary>
        /// UploadEndDate
        /// </summary>
        [Display(Name="上传结束时间")]
        public virtual System.DateTime UploadEndDate {
            get {
                return _uploadEndDate;
            }
            set {
                _uploadEndDate = value;
            }
        }
        
        /// <summary>
        /// UploadEndDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef UploadEndDateDef {
            get {
                return APDBDef.Active.UploadEndDate;
            }
        }
        
        /// <summary>
        /// IsCurrent
        /// </summary>
        [Display(Name="是否当前项目")]
        public virtual bool IsCurrent {
            get {
                return _isCurrent;
            }
            set {
                _isCurrent = value;
            }
        }
        
        /// <summary>
        /// IsCurrent APColumnDef
        /// </summary>
        public static BooleanAPColumnDef IsCurrentDef {
            get {
                return APDBDef.Active.IsCurrent;
            }
        }
        
        /// <summary>
        /// ActiveTableDef APTableDef
        /// </summary>
        public static APDBDef.ActiveTableDef TableDef {
            get {
                return APDBDef.Active;
            }
        }
        
        /// <summary>
        /// ActiveTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.Active.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(Active data) {
            ActiveId = data.ActiveId;
            ActiveName = data.ActiveName;
            Description = data.Description;
            Year = data.Year;
            Company = data.Company;
            LevelPKID = data.LevelPKID;
            SemesterPKID = data.SemesterPKID;
            PublicStatePKID = data.PublicStatePKID;
            DownloadStatePKID = data.DownloadStatePKID;
            StartDate = data.StartDate;
            EndDate = data.EndDate;
            UploadStartDate = data.UploadStartDate;
            UploadEndDate = data.UploadEndDate;
            IsCurrent = data.IsCurrent;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(Active data) {
            if ((ActiveId != data.ActiveId)) {
                return false;
            }
            if ((ActiveName != data.ActiveName)) {
                return false;
            }
            if ((Description != data.Description)) {
                return false;
            }
            if ((Year != data.Year)) {
                return false;
            }
            if ((Company != data.Company)) {
                return false;
            }
            if ((LevelPKID != data.LevelPKID)) {
                return false;
            }
            if ((SemesterPKID != data.SemesterPKID)) {
                return false;
            }
            if ((PublicStatePKID != data.PublicStatePKID)) {
                return false;
            }
            if ((DownloadStatePKID != data.DownloadStatePKID)) {
                return false;
            }
            if ((StartDate != data.StartDate)) {
                return false;
            }
            if ((EndDate != data.EndDate)) {
                return false;
            }
            if ((UploadStartDate != data.UploadStartDate)) {
                return false;
            }
            if ((UploadEndDate != data.UploadEndDate)) {
                return false;
            }
            if ((IsCurrent != data.IsCurrent)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.ActiveBpl.Insert(((Active)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.ActiveBpl.Update(((Active)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long activeId, Object metadata) {
            APBplDef.ActiveBpl.UpdatePartial(activeId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long activeId) {
            APBplDef.ActiveBpl.PrimaryDelete(activeId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.ActiveBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.ActiveBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static Active PrimaryGet(long activeId) {
            return APBplDef.ActiveBpl.PrimaryGet(activeId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Active> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.ActiveBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Active> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.ActiveBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Active> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.ActiveBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<Active> GetAll() {
            return APBplDef.ActiveBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 项目
    /// </summary>
    [Serializable()]
    public partial class Active : ActiveBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public Active() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public Active(long activeId, string activeName, string description, int year, string company, long levelPKID, long semesterPKID, long publicStatePKID, long downloadStatePKID, System.DateTime startDate, System.DateTime endDate, System.DateTime uploadStartDate, System.DateTime uploadEndDate, bool isCurrent) : 
                base(activeId, activeName, description, year, company, levelPKID, semesterPKID, publicStatePKID, downloadStatePKID, startDate, endDate, uploadStartDate, uploadEndDate, isCurrent) {
        }
    }
    
    /// <summary>
    /// 用户 Base
    /// </summary>
    [Serializable()]
    public abstract partial class ResUserBase {
        
        /// <summary>
        /// UserId
        /// </summary>
        private long _userId;
        
        /// <summary>
        /// UserName
        /// </summary>
        private string _userName = string.Empty;
        
        /// <summary>
        /// Password
        /// </summary>
        private string _password = string.Empty;
        
        /// <summary>
        /// PasswordHash
        /// </summary>
        private string _passwordHash = string.Empty;
        
        /// <summary>
        /// SecurityStamp
        /// </summary>
        private string _securityStamp = string.Empty;
        
        /// <summary>
        /// Question
        /// </summary>
        private string _question = string.Empty;
        
        /// <summary>
        /// Answer
        /// </summary>
        private string _answer = string.Empty;
        
        /// <summary>
        /// UserTypePKID
        /// </summary>
        private long _userTypePKID;
        
        /// <summary>
        /// RealName
        /// </summary>
        private string _realName = string.Empty;
        
        /// <summary>
        /// PhotoPath
        /// </summary>
        private string _photoPath = string.Empty;
        
        /// <summary>
        /// PickList - APEdu.net key is PLKey_Gender
        /// </summary>
        private long _genderPKID;
        
        /// <summary>
        /// IDCard
        /// </summary>
        private string _iDCard = string.Empty;
        
        /// <summary>
        /// Email
        /// </summary>
        private string _email = string.Empty;
        
        /// <summary>
        /// 单位
        /// </summary>
        private long _companyId;
        
        /// <summary>
        /// 省份
        /// </summary>
        private long _provinceId;
        
        /// <summary>
        /// 区县
        /// </summary>
        private long _areaId;
        
        /// <summary>
        /// Actived
        /// </summary>
        private bool _actived;
        
        /// <summary>
        /// Removed
        /// </summary>
        private bool _removed;
        
        /// <summary>
        /// RegisterTime
        /// </summary>
        private System.DateTime _registerTime;
        
        /// <summary>
        /// LastLoginTime
        /// </summary>
        private System.DateTime _lastLoginTime;
        
        /// <summary>
        /// LoginCount
        /// </summary>
        private int _loginCount;
        
        /// <summary>
        /// MD5
        /// </summary>
        private string _mD5 = string.Empty;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public ResUserBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public ResUserBase(
                    long userId, 
                    string userName, 
                    string password, 
                    string passwordHash, 
                    string securityStamp, 
                    string question, 
                    string answer, 
                    long userTypePKID, 
                    string realName, 
                    string photoPath, 
                    long genderPKID, 
                    string iDCard, 
                    string email, 
                    long companyId, 
                    long provinceId, 
                    long areaId, 
                    bool actived, 
                    bool removed, 
                    System.DateTime registerTime, 
                    System.DateTime lastLoginTime, 
                    int loginCount, 
                    string mD5) {
            _userId = userId;
            _userName = userName;
            _password = password;
            _passwordHash = passwordHash;
            _securityStamp = securityStamp;
            _question = question;
            _answer = answer;
            _userTypePKID = userTypePKID;
            _realName = realName;
            _photoPath = photoPath;
            _genderPKID = genderPKID;
            _iDCard = iDCard;
            _email = email;
            _companyId = companyId;
            _provinceId = provinceId;
            _areaId = areaId;
            _actived = actived;
            _removed = removed;
            _registerTime = registerTime;
            _lastLoginTime = lastLoginTime;
            _loginCount = loginCount;
            _mD5 = mD5;
        }
        
        /// <summary>
        /// UserId
        /// </summary>
        [Display(Name="用户ID")]
        public virtual long UserId {
            get {
                return _userId;
            }
            set {
                _userId = value;
            }
        }
        
        /// <summary>
        /// UserId APColumnDef
        /// </summary>
        public static Int64APColumnDef UserIdDef {
            get {
                return APDBDef.ResUser.UserId;
            }
        }
        
        /// <summary>
        /// UserName
        /// </summary>
        [Display(Name="用户名")]
        [Required()]
        [StringLength(255)]
        public virtual string UserName {
            get {
                return _userName;
            }
            set {
                _userName = value;
            }
        }
        
        /// <summary>
        /// UserName APColumnDef
        /// </summary>
        public static StringAPColumnDef UserNameDef {
            get {
                return APDBDef.ResUser.UserName;
            }
        }
        
        /// <summary>
        /// Password
        /// </summary>
        [Display(Name="密码")]
        [Required()]
        [StringLength(255)]
        public virtual string Password {
            get {
                return _password;
            }
            set {
                _password = value;
            }
        }
        
        /// <summary>
        /// Password APColumnDef
        /// </summary>
        public static StringAPColumnDef PasswordDef {
            get {
                return APDBDef.ResUser.Password;
            }
        }
        
        /// <summary>
        /// PasswordHash
        /// </summary>
        [Display(Name="密码哈希")]
        [StringLength(255)]
        public virtual string PasswordHash {
            get {
                return _passwordHash;
            }
            set {
                _passwordHash = value;
            }
        }
        
        /// <summary>
        /// PasswordHash APColumnDef
        /// </summary>
        public static StringAPColumnDef PasswordHashDef {
            get {
                return APDBDef.ResUser.PasswordHash;
            }
        }
        
        /// <summary>
        /// SecurityStamp
        /// </summary>
        [Display(Name="Salt")]
        [StringLength(255)]
        public virtual string SecurityStamp {
            get {
                return _securityStamp;
            }
            set {
                _securityStamp = value;
            }
        }
        
        /// <summary>
        /// SecurityStamp APColumnDef
        /// </summary>
        public static StringAPColumnDef SecurityStampDef {
            get {
                return APDBDef.ResUser.SecurityStamp;
            }
        }
        
        /// <summary>
        /// Question
        /// </summary>
        [Display(Name="密码问题")]
        [StringLength(255)]
        public virtual string Question {
            get {
                return _question;
            }
            set {
                _question = value;
            }
        }
        
        /// <summary>
        /// Question APColumnDef
        /// </summary>
        public static StringAPColumnDef QuestionDef {
            get {
                return APDBDef.ResUser.Question;
            }
        }
        
        /// <summary>
        /// Answer
        /// </summary>
        [Display(Name="密码答案")]
        [StringLength(255)]
        public virtual string Answer {
            get {
                return _answer;
            }
            set {
                _answer = value;
            }
        }
        
        /// <summary>
        /// Answer APColumnDef
        /// </summary>
        public static StringAPColumnDef AnswerDef {
            get {
                return APDBDef.ResUser.Answer;
            }
        }
        
        /// <summary>
        /// UserTypePKID
        /// </summary>
        [Display(Name="用户角色")]
        public virtual long UserTypePKID {
            get {
                return _userTypePKID;
            }
            set {
                _userTypePKID = value;
            }
        }
        
        /// <summary>
        /// UserTypePKID APColumnDef
        /// </summary>
        public static Int64APColumnDef UserTypePKIDDef {
            get {
                return APDBDef.ResUser.UserTypePKID;
            }
        }
        
        /// <summary>
        /// RealName
        /// </summary>
        [Display(Name="实名")]
        [StringLength(255)]
        public virtual string RealName {
            get {
                return _realName;
            }
            set {
                _realName = value;
            }
        }
        
        /// <summary>
        /// RealName APColumnDef
        /// </summary>
        public static StringAPColumnDef RealNameDef {
            get {
                return APDBDef.ResUser.RealName;
            }
        }
        
        /// <summary>
        /// PhotoPath
        /// </summary>
        [Display(Name="头像")]
        [StringLength(255)]
        public virtual string PhotoPath {
            get {
                return _photoPath;
            }
            set {
                _photoPath = value;
            }
        }
        
        /// <summary>
        /// PhotoPath APColumnDef
        /// </summary>
        public static StringAPColumnDef PhotoPathDef {
            get {
                return APDBDef.ResUser.PhotoPath;
            }
        }
        
        /// <summary>
        /// PickList - APEdu.net key is PLKey_Gender
        /// </summary>
        [Display(Name="性别")]
        [Required()]
        public virtual long GenderPKID {
            get {
                return _genderPKID;
            }
            set {
                _genderPKID = value;
            }
        }
        
        /// <summary>
        /// PickList - APEdu.net key is PLKey_Gender APColumnDef
        /// </summary>
        public static Int64APColumnDef GenderPKIDDef {
            get {
                return APDBDef.ResUser.GenderPKID;
            }
        }
        
        /// <summary>
        /// IDCard
        /// </summary>
        [Display(Name="身份证")]
        [StringLength(255)]
        public virtual string IDCard {
            get {
                return _iDCard;
            }
            set {
                _iDCard = value;
            }
        }
        
        /// <summary>
        /// IDCard APColumnDef
        /// </summary>
        public static StringAPColumnDef IDCardDef {
            get {
                return APDBDef.ResUser.IDCard;
            }
        }
        
        /// <summary>
        /// Email
        /// </summary>
        [Display(Name="电子邮件")]
        [StringLength(255)]
        public virtual string Email {
            get {
                return _email;
            }
            set {
                _email = value;
            }
        }
        
        /// <summary>
        /// Email APColumnDef
        /// </summary>
        public static StringAPColumnDef EmailDef {
            get {
                return APDBDef.ResUser.Email;
            }
        }
        
        /// <summary>
        /// 单位
        /// </summary>
        public virtual long CompanyId {
            get {
                return _companyId;
            }
            set {
                _companyId = value;
            }
        }
        
        /// <summary>
        /// 单位 APColumnDef
        /// </summary>
        public static Int64APColumnDef CompanyIdDef {
            get {
                return APDBDef.ResUser.CompanyId;
            }
        }
        
        /// <summary>
        /// 省份
        /// </summary>
        public virtual long ProvinceId {
            get {
                return _provinceId;
            }
            set {
                _provinceId = value;
            }
        }
        
        /// <summary>
        /// 省份 APColumnDef
        /// </summary>
        public static Int64APColumnDef ProvinceIdDef {
            get {
                return APDBDef.ResUser.ProvinceId;
            }
        }
        
        /// <summary>
        /// 区县
        /// </summary>
        public virtual long AreaId {
            get {
                return _areaId;
            }
            set {
                _areaId = value;
            }
        }
        
        /// <summary>
        /// 区县 APColumnDef
        /// </summary>
        public static Int64APColumnDef AreaIdDef {
            get {
                return APDBDef.ResUser.AreaId;
            }
        }
        
        /// <summary>
        /// Actived
        /// </summary>
        [Display(Name="有效")]
        public virtual bool Actived {
            get {
                return _actived;
            }
            set {
                _actived = value;
            }
        }
        
        /// <summary>
        /// Actived APColumnDef
        /// </summary>
        public static BooleanAPColumnDef ActivedDef {
            get {
                return APDBDef.ResUser.Actived;
            }
        }
        
        /// <summary>
        /// Removed
        /// </summary>
        [Display(Name="删除")]
        public virtual bool Removed {
            get {
                return _removed;
            }
            set {
                _removed = value;
            }
        }
        
        /// <summary>
        /// Removed APColumnDef
        /// </summary>
        public static BooleanAPColumnDef RemovedDef {
            get {
                return APDBDef.ResUser.Removed;
            }
        }
        
        /// <summary>
        /// RegisterTime
        /// </summary>
        [Display(Name="注册时间")]
        public virtual System.DateTime RegisterTime {
            get {
                return _registerTime;
            }
            set {
                _registerTime = value;
            }
        }
        
        /// <summary>
        /// RegisterTime APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef RegisterTimeDef {
            get {
                return APDBDef.ResUser.RegisterTime;
            }
        }
        
        /// <summary>
        /// LastLoginTime
        /// </summary>
        [Display(Name="最后登录时间")]
        public virtual System.DateTime LastLoginTime {
            get {
                return _lastLoginTime;
            }
            set {
                _lastLoginTime = value;
            }
        }
        
        /// <summary>
        /// LastLoginTime APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef LastLoginTimeDef {
            get {
                return APDBDef.ResUser.LastLoginTime;
            }
        }
        
        /// <summary>
        /// LoginCount
        /// </summary>
        [Display(Name="登录次数")]
        public virtual int LoginCount {
            get {
                return _loginCount;
            }
            set {
                _loginCount = value;
            }
        }
        
        /// <summary>
        /// LoginCount APColumnDef
        /// </summary>
        public static Int32APColumnDef LoginCountDef {
            get {
                return APDBDef.ResUser.LoginCount;
            }
        }
        
        /// <summary>
        /// MD5
        /// </summary>
        [Display(Name="MD5")]
        [StringLength(255)]
        public virtual string MD5 {
            get {
                return _mD5;
            }
            set {
                _mD5 = value;
            }
        }
        
        /// <summary>
        /// MD5 APColumnDef
        /// </summary>
        public static StringAPColumnDef MD5Def {
            get {
                return APDBDef.ResUser.MD5;
            }
        }
        
        /// <summary>
        /// ResUserTableDef APTableDef
        /// </summary>
        public static APDBDef.ResUserTableDef TableDef {
            get {
                return APDBDef.ResUser;
            }
        }
        
        /// <summary>
        /// ResUserTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.ResUser.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(ResUser data) {
            UserId = data.UserId;
            UserName = data.UserName;
            Password = data.Password;
            PasswordHash = data.PasswordHash;
            SecurityStamp = data.SecurityStamp;
            Question = data.Question;
            Answer = data.Answer;
            UserTypePKID = data.UserTypePKID;
            RealName = data.RealName;
            PhotoPath = data.PhotoPath;
            GenderPKID = data.GenderPKID;
            IDCard = data.IDCard;
            Email = data.Email;
            CompanyId = data.CompanyId;
            ProvinceId = data.ProvinceId;
            AreaId = data.AreaId;
            Actived = data.Actived;
            Removed = data.Removed;
            RegisterTime = data.RegisterTime;
            LastLoginTime = data.LastLoginTime;
            LoginCount = data.LoginCount;
            MD5 = data.MD5;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(ResUser data) {
            if ((UserId != data.UserId)) {
                return false;
            }
            if ((UserName != data.UserName)) {
                return false;
            }
            if ((Password != data.Password)) {
                return false;
            }
            if ((PasswordHash != data.PasswordHash)) {
                return false;
            }
            if ((SecurityStamp != data.SecurityStamp)) {
                return false;
            }
            if ((Question != data.Question)) {
                return false;
            }
            if ((Answer != data.Answer)) {
                return false;
            }
            if ((UserTypePKID != data.UserTypePKID)) {
                return false;
            }
            if ((RealName != data.RealName)) {
                return false;
            }
            if ((PhotoPath != data.PhotoPath)) {
                return false;
            }
            if ((GenderPKID != data.GenderPKID)) {
                return false;
            }
            if ((IDCard != data.IDCard)) {
                return false;
            }
            if ((Email != data.Email)) {
                return false;
            }
            if ((CompanyId != data.CompanyId)) {
                return false;
            }
            if ((ProvinceId != data.ProvinceId)) {
                return false;
            }
            if ((AreaId != data.AreaId)) {
                return false;
            }
            if ((Actived != data.Actived)) {
                return false;
            }
            if ((Removed != data.Removed)) {
                return false;
            }
            if ((RegisterTime != data.RegisterTime)) {
                return false;
            }
            if ((LastLoginTime != data.LastLoginTime)) {
                return false;
            }
            if ((LoginCount != data.LoginCount)) {
                return false;
            }
            if ((MD5 != data.MD5)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.ResUserBpl.Insert(((ResUser)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.ResUserBpl.Update(((ResUser)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long userId, Object metadata) {
            APBplDef.ResUserBpl.UpdatePartial(userId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long userId) {
            APBplDef.ResUserBpl.PrimaryDelete(userId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.ResUserBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.ResUserBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static ResUser PrimaryGet(long userId) {
            return APBplDef.ResUserBpl.PrimaryGet(userId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<ResUser> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.ResUserBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<ResUser> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.ResUserBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<ResUser> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.ResUserBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<ResUser> GetAll() {
            return APBplDef.ResUserBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 用户
    /// </summary>
    [Serializable()]
    public partial class ResUser : ResUserBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public ResUser() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public ResUser(
                    long userId, 
                    string userName, 
                    string password, 
                    string passwordHash, 
                    string securityStamp, 
                    string question, 
                    string answer, 
                    long userTypePKID, 
                    string realName, 
                    string photoPath, 
                    long genderPKID, 
                    string iDCard, 
                    string email, 
                    long companyId, 
                    long provinceId, 
                    long areaId, 
                    bool actived, 
                    bool removed, 
                    System.DateTime registerTime, 
                    System.DateTime lastLoginTime, 
                    int loginCount, 
                    string mD5) : 
                base(userId, userName, password, passwordHash, securityStamp, question, answer, userTypePKID, realName, photoPath, genderPKID, iDCard, email, companyId, provinceId, areaId, actived, removed, registerTime, lastLoginTime, loginCount, mD5) {
        }
    }
    
    /// <summary>
    /// 单位 Base
    /// </summary>
    [Serializable()]
    public abstract partial class ResCompanyBase {
        
        /// <summary>
        /// CompanyId
        /// </summary>
        private long _companyId;
        
        /// <summary>
        /// ParentId
        /// </summary>
        private long _parentId;
        
        /// <summary>
        /// Path
        /// </summary>
        private string _path = string.Empty;
        
        /// <summary>
        /// CompanyName
        /// </summary>
        private string _companyName = string.Empty;
        
        /// <summary>
        /// Address
        /// </summary>
        private string _address = string.Empty;
        
        /// <summary>
        /// Email
        /// </summary>
        private string _email = string.Empty;
        
        /// <summary>
        /// Phone
        /// </summary>
        private string _phone = string.Empty;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public ResCompanyBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public ResCompanyBase(long companyId, long parentId, string path, string companyName, string address, string email, string phone) {
            _companyId = companyId;
            _parentId = parentId;
            _path = path;
            _companyName = companyName;
            _address = address;
            _email = email;
            _phone = phone;
        }
        
        /// <summary>
        /// CompanyId
        /// </summary>
        [Display(Name="单位ID")]
        public virtual long CompanyId {
            get {
                return _companyId;
            }
            set {
                _companyId = value;
            }
        }
        
        /// <summary>
        /// CompanyId APColumnDef
        /// </summary>
        public static Int64APColumnDef CompanyIdDef {
            get {
                return APDBDef.ResCompany.CompanyId;
            }
        }
        
        /// <summary>
        /// ParentId
        /// </summary>
        [Display(Name="父ID")]
        public virtual long ParentId {
            get {
                return _parentId;
            }
            set {
                _parentId = value;
            }
        }
        
        /// <summary>
        /// ParentId APColumnDef
        /// </summary>
        public static Int64APColumnDef ParentIdDef {
            get {
                return APDBDef.ResCompany.ParentId;
            }
        }
        
        /// <summary>
        /// Path
        /// </summary>
        [Display(Name="路径")]
        [Required()]
        [StringLength(500)]
        public virtual string Path {
            get {
                return _path;
            }
            set {
                _path = value;
            }
        }
        
        /// <summary>
        /// Path APColumnDef
        /// </summary>
        public static StringAPColumnDef PathDef {
            get {
                return APDBDef.ResCompany.Path;
            }
        }
        
        /// <summary>
        /// CompanyName
        /// </summary>
        [Display(Name="单位名称")]
        [Required()]
        [StringLength(255)]
        public virtual string CompanyName {
            get {
                return _companyName;
            }
            set {
                _companyName = value;
            }
        }
        
        /// <summary>
        /// CompanyName APColumnDef
        /// </summary>
        public static StringAPColumnDef CompanyNameDef {
            get {
                return APDBDef.ResCompany.CompanyName;
            }
        }
        
        /// <summary>
        /// Address
        /// </summary>
        [Display(Name="地址")]
        [StringLength(255)]
        public virtual string Address {
            get {
                return _address;
            }
            set {
                _address = value;
            }
        }
        
        /// <summary>
        /// Address APColumnDef
        /// </summary>
        public static StringAPColumnDef AddressDef {
            get {
                return APDBDef.ResCompany.Address;
            }
        }
        
        /// <summary>
        /// Email
        /// </summary>
        [Display(Name="电子邮件")]
        [StringLength(255)]
        public virtual string Email {
            get {
                return _email;
            }
            set {
                _email = value;
            }
        }
        
        /// <summary>
        /// Email APColumnDef
        /// </summary>
        public static StringAPColumnDef EmailDef {
            get {
                return APDBDef.ResCompany.Email;
            }
        }
        
        /// <summary>
        /// Phone
        /// </summary>
        [Display(Name="电话")]
        [StringLength(255)]
        public virtual string Phone {
            get {
                return _phone;
            }
            set {
                _phone = value;
            }
        }
        
        /// <summary>
        /// Phone APColumnDef
        /// </summary>
        public static StringAPColumnDef PhoneDef {
            get {
                return APDBDef.ResCompany.Phone;
            }
        }
        
        /// <summary>
        /// ResCompanyTableDef APTableDef
        /// </summary>
        public static APDBDef.ResCompanyTableDef TableDef {
            get {
                return APDBDef.ResCompany;
            }
        }
        
        /// <summary>
        /// ResCompanyTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.ResCompany.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(ResCompany data) {
            CompanyId = data.CompanyId;
            ParentId = data.ParentId;
            Path = data.Path;
            CompanyName = data.CompanyName;
            Address = data.Address;
            Email = data.Email;
            Phone = data.Phone;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(ResCompany data) {
            if ((CompanyId != data.CompanyId)) {
                return false;
            }
            if ((ParentId != data.ParentId)) {
                return false;
            }
            if ((Path != data.Path)) {
                return false;
            }
            if ((CompanyName != data.CompanyName)) {
                return false;
            }
            if ((Address != data.Address)) {
                return false;
            }
            if ((Email != data.Email)) {
                return false;
            }
            if ((Phone != data.Phone)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.ResCompanyBpl.Insert(((ResCompany)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.ResCompanyBpl.Update(((ResCompany)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long companyId, Object metadata) {
            APBplDef.ResCompanyBpl.UpdatePartial(companyId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long companyId) {
            APBplDef.ResCompanyBpl.PrimaryDelete(companyId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.ResCompanyBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.ResCompanyBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static ResCompany PrimaryGet(long companyId) {
            return APBplDef.ResCompanyBpl.PrimaryGet(companyId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<ResCompany> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.ResCompanyBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<ResCompany> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.ResCompanyBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<ResCompany> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.ResCompanyBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<ResCompany> GetAll() {
            return APBplDef.ResCompanyBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 单位
    /// </summary>
    [Serializable()]
    public partial class ResCompany : ResCompanyBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public ResCompany() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public ResCompany(long companyId, long parentId, string path, string companyName, string address, string email, string phone) : 
                base(companyId, parentId, path, companyName, address, email, phone) {
        }
    }
    
    /// <summary>
    /// 微课作品 Base
    /// </summary>
    [Serializable()]
    public abstract partial class CroResourceBase {
        
        /// <summary>
        /// CrosourceId
        /// </summary>
        private long _crosourceId;
        
        /// <summary>
        /// Title
        /// </summary>
        private string _title = string.Empty;
        
        /// <summary>
        /// Author
        /// </summary>
        private string _author = string.Empty;
        
        /// <summary>
        /// Keywords
        /// </summary>
        private string _keywords = string.Empty;
        
        /// <summary>
        /// Description
        /// </summary>
        private string _description = string.Empty;
        
        /// <summary>
        /// ProvinceId
        /// </summary>
        private long _provinceId;
        
        /// <summary>
        /// AreaId
        /// </summary>
        private long _areaId;
        
        /// <summary>
        /// CompanyId
        /// </summary>
        private long _companyId;
        
        /// <summary>
        /// ActiveId
        /// </summary>
        private long _activeId;
        
        /// <summary>
        /// AuthorCompany
        /// </summary>
        private string _authorCompany = string.Empty;
        
        /// <summary>
        /// AuthorAddress
        /// </summary>
        private string _authorAddress = string.Empty;
        
        /// <summary>
        /// AuthorEmail
        /// </summary>
        private string _authorEmail = string.Empty;
        
        /// <summary>
        /// AuthorPhone
        /// </summary>
        private string _authorPhone = string.Empty;
        
        /// <summary>
        /// PickList - APEdu.net key is PLKey_ResourceStage
        /// </summary>
        private long _stagePKID;
        
        /// <summary>
        /// PickList - APEdu.net key is PLKey_ResourceGrade
        /// </summary>
        private long _gradePKID;
        
        /// <summary>
        /// PickList - APEdu.net key is PLKey_ResourceType
        /// </summary>
        private long _resourceTypePKID;
        
        /// <summary>
        /// PickList - APEdu.net key is PLKey_ResourceSubject
        /// </summary>
        private long _subjectPKID;
        
        /// <summary>
        /// PickList - APEdu.net key is PLKey_CourseType
        /// </summary>
        private long _courseTypePKID;
        
        /// <summary>
        /// PickList - APEdu.net key is PLKey_ResourceState
        /// </summary>
        private long _statePKID;
        
        /// <summary>
        /// PickList - APEdu.net key is PLKey_PublicState
        /// </summary>
        private long _publicStatePKID = 10450;
        
        /// <summary>
        /// PickList - APEdu.net key is PLKey_DownloadState
        /// </summary>
        private long _downloadStatePKID = 10452;
        
        /// <summary>
        /// PickList - APEdu.net key is PLKey_WinLevel
        /// </summary>
        private long _winLevelPKID = 0;
        
        /// <summary>
        /// DownCount
        /// </summary>
        private int _downCount;
        
        /// <summary>
        /// FavoriteCount
        /// </summary>
        private int _favoriteCount;
        
        /// <summary>
        /// ViewCount
        /// </summary>
        private int _viewCount;
        
        /// <summary>
        /// CommentCount
        /// </summary>
        private int _commentCount;
        
        /// <summary>
        /// EliteScore
        /// </summary>
        private int _eliteScore;
        
        /// <summary>
        /// PraiseCount
        /// </summary>
        private int _praiseCount = 0;
        
        /// <summary>
        /// Auditor
        /// </summary>
        private long _auditor;
        
        /// <summary>
        /// AuditedTime
        /// </summary>
        private System.DateTime _auditedTime;
        
        /// <summary>
        /// AuditOpinion
        /// </summary>
        private string _auditOpinion = string.Empty;
        
        /// <summary>
        /// Creator
        /// </summary>
        private long _creator;
        
        /// <summary>
        /// CreatedTime
        /// </summary>
        private System.DateTime _createdTime;
        
        /// <summary>
        /// LastModifier
        /// </summary>
        private long _lastModifier;
        
        /// <summary>
        /// LastModifiedTime
        /// </summary>
        private System.DateTime _lastModifiedTime;
        
        /// <summary>
        /// Score
        /// </summary>
        private double _score;
        
        /// <summary>
        /// WeiXinFavoriteCount
        /// </summary>
        private int _weiXinFavoriteCount;
        
        /// <summary>
        /// WeiXInPraiseCount
        /// </summary>
        private int _weiXInPraiseCount = 0;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public CroResourceBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public CroResourceBase(
                    long crosourceId, 
                    string title, 
                    string author, 
                    string keywords, 
                    string description, 
                    long provinceId, 
                    long areaId, 
                    long companyId, 
                    long activeId, 
                    string authorCompany, 
                    string authorAddress, 
                    string authorEmail, 
                    string authorPhone, 
                    long stagePKID, 
                    long gradePKID, 
                    long resourceTypePKID, 
                    long subjectPKID, 
                    long courseTypePKID, 
                    long statePKID, 
                    long publicStatePKID, 
                    long downloadStatePKID, 
                    long winLevelPKID, 
                    int downCount, 
                    int favoriteCount, 
                    int viewCount, 
                    int commentCount, 
                    int eliteScore, 
                    int praiseCount, 
                    long auditor, 
                    System.DateTime auditedTime, 
                    string auditOpinion, 
                    long creator, 
                    System.DateTime createdTime, 
                    long lastModifier, 
                    System.DateTime lastModifiedTime, 
                    double score, 
                    int weiXinFavoriteCount, 
                    int weiXInPraiseCount) {
            _crosourceId = crosourceId;
            _title = title;
            _author = author;
            _keywords = keywords;
            _description = description;
            _provinceId = provinceId;
            _areaId = areaId;
            _companyId = companyId;
            _activeId = activeId;
            _authorCompany = authorCompany;
            _authorAddress = authorAddress;
            _authorEmail = authorEmail;
            _authorPhone = authorPhone;
            _stagePKID = stagePKID;
            _gradePKID = gradePKID;
            _resourceTypePKID = resourceTypePKID;
            _subjectPKID = subjectPKID;
            _courseTypePKID = courseTypePKID;
            _statePKID = statePKID;
            _publicStatePKID = publicStatePKID;
            _downloadStatePKID = downloadStatePKID;
            _winLevelPKID = winLevelPKID;
            _downCount = downCount;
            _favoriteCount = favoriteCount;
            _viewCount = viewCount;
            _commentCount = commentCount;
            _eliteScore = eliteScore;
            _praiseCount = praiseCount;
            _auditor = auditor;
            _auditedTime = auditedTime;
            _auditOpinion = auditOpinion;
            _creator = creator;
            _createdTime = createdTime;
            _lastModifier = lastModifier;
            _lastModifiedTime = lastModifiedTime;
            _score = score;
            _weiXinFavoriteCount = weiXinFavoriteCount;
            _weiXInPraiseCount = weiXInPraiseCount;
        }
        
        /// <summary>
        /// CrosourceId
        /// </summary>
        [Display(Name="作品ID")]
        public virtual long CrosourceId {
            get {
                return _crosourceId;
            }
            set {
                _crosourceId = value;
            }
        }
        
        /// <summary>
        /// CrosourceId APColumnDef
        /// </summary>
        public static Int64APColumnDef CrosourceIdDef {
            get {
                return APDBDef.CroResource.CrosourceId;
            }
        }
        
        /// <summary>
        /// Title
        /// </summary>
        [Display(Name="标题")]
        [Required()]
        [StringLength(250)]
        public virtual string Title {
            get {
                return _title;
            }
            set {
                _title = value;
            }
        }
        
        /// <summary>
        /// Title APColumnDef
        /// </summary>
        public static StringAPColumnDef TitleDef {
            get {
                return APDBDef.CroResource.Title;
            }
        }
        
        /// <summary>
        /// Author
        /// </summary>
        [Display(Name="作者")]
        [Required()]
        [StringLength(50)]
        public virtual string Author {
            get {
                return _author;
            }
            set {
                _author = value;
            }
        }
        
        /// <summary>
        /// Author APColumnDef
        /// </summary>
        public static StringAPColumnDef AuthorDef {
            get {
                return APDBDef.CroResource.Author;
            }
        }
        
        /// <summary>
        /// Keywords
        /// </summary>
        [Display(Name="关键字")]
        [Required()]
        [StringLength(50)]
        public virtual string Keywords {
            get {
                return _keywords;
            }
            set {
                _keywords = value;
            }
        }
        
        /// <summary>
        /// Keywords APColumnDef
        /// </summary>
        public static StringAPColumnDef KeywordsDef {
            get {
                return APDBDef.CroResource.Keywords;
            }
        }
        
        /// <summary>
        /// Description
        /// </summary>
        [Display(Name="微课信息简介")]
        [StringLength(30000)]
        public virtual string Description {
            get {
                return _description;
            }
            set {
                _description = value;
            }
        }
        
        /// <summary>
        /// Description APColumnDef
        /// </summary>
        public static StringAPColumnDef DescriptionDef {
            get {
                return APDBDef.CroResource.Description;
            }
        }
        
        /// <summary>
        /// ProvinceId
        /// </summary>
        [Display(Name="所属省份")]
        public virtual long ProvinceId {
            get {
                return _provinceId;
            }
            set {
                _provinceId = value;
            }
        }
        
        /// <summary>
        /// ProvinceId APColumnDef
        /// </summary>
        public static Int64APColumnDef ProvinceIdDef {
            get {
                return APDBDef.CroResource.ProvinceId;
            }
        }
        
        /// <summary>
        /// AreaId
        /// </summary>
        [Display(Name="所属地区")]
        public virtual long AreaId {
            get {
                return _areaId;
            }
            set {
                _areaId = value;
            }
        }
        
        /// <summary>
        /// AreaId APColumnDef
        /// </summary>
        public static Int64APColumnDef AreaIdDef {
            get {
                return APDBDef.CroResource.AreaId;
            }
        }
        
        /// <summary>
        /// CompanyId
        /// </summary>
        [Display(Name="所属学校")]
        public virtual long CompanyId {
            get {
                return _companyId;
            }
            set {
                _companyId = value;
            }
        }
        
        /// <summary>
        /// CompanyId APColumnDef
        /// </summary>
        public static Int64APColumnDef CompanyIdDef {
            get {
                return APDBDef.CroResource.CompanyId;
            }
        }
        
        /// <summary>
        /// ActiveId
        /// </summary>
        [Display(Name="所属项目")]
        public virtual long ActiveId {
            get {
                return _activeId;
            }
            set {
                _activeId = value;
            }
        }
        
        /// <summary>
        /// ActiveId APColumnDef
        /// </summary>
        public static Int64APColumnDef ActiveIdDef {
            get {
                return APDBDef.CroResource.ActiveId;
            }
        }
        
        /// <summary>
        /// AuthorCompany
        /// </summary>
        [Display(Name="作者单位")]
        [Required()]
        [StringLength(50)]
        public virtual string AuthorCompany {
            get {
                return _authorCompany;
            }
            set {
                _authorCompany = value;
            }
        }
        
        /// <summary>
        /// AuthorCompany APColumnDef
        /// </summary>
        public static StringAPColumnDef AuthorCompanyDef {
            get {
                return APDBDef.CroResource.AuthorCompany;
            }
        }
        
        /// <summary>
        /// AuthorAddress
        /// </summary>
        [Display(Name="指导教师")]
        [StringLength(50)]
        public virtual string AuthorAddress {
            get {
                return _authorAddress;
            }
            set {
                _authorAddress = value;
            }
        }
        
        /// <summary>
        /// AuthorAddress APColumnDef
        /// </summary>
        public static StringAPColumnDef AuthorAddressDef {
            get {
                return APDBDef.CroResource.AuthorAddress;
            }
        }
        
        /// <summary>
        /// AuthorEmail
        /// </summary>
        [Display(Name="作者邮箱")]
        [StringLength(50)]
        public virtual string AuthorEmail {
            get {
                return _authorEmail;
            }
            set {
                _authorEmail = value;
            }
        }
        
        /// <summary>
        /// AuthorEmail APColumnDef
        /// </summary>
        public static StringAPColumnDef AuthorEmailDef {
            get {
                return APDBDef.CroResource.AuthorEmail;
            }
        }
        
        /// <summary>
        /// AuthorPhone
        /// </summary>
        [Display(Name="作者电话")]
        [StringLength(50)]
        public virtual string AuthorPhone {
            get {
                return _authorPhone;
            }
            set {
                _authorPhone = value;
            }
        }
        
        /// <summary>
        /// AuthorPhone APColumnDef
        /// </summary>
        public static StringAPColumnDef AuthorPhoneDef {
            get {
                return APDBDef.CroResource.AuthorPhone;
            }
        }
        
        /// <summary>
        /// PickList - APEdu.net key is PLKey_ResourceStage
        /// </summary>
        [Display(Name="学段")]
        [Required()]
        public virtual long StagePKID {
            get {
                return _stagePKID;
            }
            set {
                _stagePKID = value;
            }
        }
        
        /// <summary>
        /// PickList - APEdu.net key is PLKey_ResourceStage APColumnDef
        /// </summary>
        public static Int64APColumnDef StagePKIDDef {
            get {
                return APDBDef.CroResource.StagePKID;
            }
        }
        
        /// <summary>
        /// PickList - APEdu.net key is PLKey_ResourceGrade
        /// </summary>
        [Display(Name="年级")]
        [Required()]
        public virtual long GradePKID {
            get {
                return _gradePKID;
            }
            set {
                _gradePKID = value;
            }
        }
        
        /// <summary>
        /// PickList - APEdu.net key is PLKey_ResourceGrade APColumnDef
        /// </summary>
        public static Int64APColumnDef GradePKIDDef {
            get {
                return APDBDef.CroResource.GradePKID;
            }
        }
        
        /// <summary>
        /// PickList - APEdu.net key is PLKey_ResourceType
        /// </summary>
        [Display(Name="作品类型")]
        public virtual long ResourceTypePKID {
            get {
                return _resourceTypePKID;
            }
            set {
                _resourceTypePKID = value;
            }
        }
        
        /// <summary>
        /// PickList - APEdu.net key is PLKey_ResourceType APColumnDef
        /// </summary>
        public static Int64APColumnDef ResourceTypePKIDDef {
            get {
                return APDBDef.CroResource.ResourceTypePKID;
            }
        }
        
        /// <summary>
        /// PickList - APEdu.net key is PLKey_ResourceSubject
        /// </summary>
        [Display(Name="学科")]
        [Required()]
        public virtual long SubjectPKID {
            get {
                return _subjectPKID;
            }
            set {
                _subjectPKID = value;
            }
        }
        
        /// <summary>
        /// PickList - APEdu.net key is PLKey_ResourceSubject APColumnDef
        /// </summary>
        public static Int64APColumnDef SubjectPKIDDef {
            get {
                return APDBDef.CroResource.SubjectPKID;
            }
        }
        
        /// <summary>
        /// PickList - APEdu.net key is PLKey_CourseType
        /// </summary>
        [Display(Name="微课类型")]
        [Required()]
        public virtual long CourseTypePKID {
            get {
                return _courseTypePKID;
            }
            set {
                _courseTypePKID = value;
            }
        }
        
        /// <summary>
        /// PickList - APEdu.net key is PLKey_CourseType APColumnDef
        /// </summary>
        public static Int64APColumnDef CourseTypePKIDDef {
            get {
                return APDBDef.CroResource.CourseTypePKID;
            }
        }
        
        /// <summary>
        /// PickList - APEdu.net key is PLKey_ResourceState
        /// </summary>
        [Display(Name="状态")]
        public virtual long StatePKID {
            get {
                return _statePKID;
            }
            set {
                _statePKID = value;
            }
        }
        
        /// <summary>
        /// PickList - APEdu.net key is PLKey_ResourceState APColumnDef
        /// </summary>
        public static Int64APColumnDef StatePKIDDef {
            get {
                return APDBDef.CroResource.StatePKID;
            }
        }
        
        /// <summary>
        /// PickList - APEdu.net key is PLKey_PublicState
        /// </summary>
        [Display(Name="公开设置")]
        public virtual long PublicStatePKID {
            get {
                return _publicStatePKID;
            }
            set {
                _publicStatePKID = value;
            }
        }
        
        /// <summary>
        /// PickList - APEdu.net key is PLKey_PublicState APColumnDef
        /// </summary>
        public static Int64APColumnDef PublicStatePKIDDef {
            get {
                return APDBDef.CroResource.PublicStatePKID;
            }
        }
        
        /// <summary>
        /// PickList - APEdu.net key is PLKey_DownloadState
        /// </summary>
        [Display(Name="下载设置")]
        public virtual long DownloadStatePKID {
            get {
                return _downloadStatePKID;
            }
            set {
                _downloadStatePKID = value;
            }
        }
        
        /// <summary>
        /// PickList - APEdu.net key is PLKey_DownloadState APColumnDef
        /// </summary>
        public static Int64APColumnDef DownloadStatePKIDDef {
            get {
                return APDBDef.CroResource.DownloadStatePKID;
            }
        }
        
        /// <summary>
        /// PickList - APEdu.net key is PLKey_WinLevel
        /// </summary>
        [Display(Name="获奖等级")]
        public virtual long WinLevelPKID {
            get {
                return _winLevelPKID;
            }
            set {
                _winLevelPKID = value;
            }
        }
        
        /// <summary>
        /// PickList - APEdu.net key is PLKey_WinLevel APColumnDef
        /// </summary>
        public static Int64APColumnDef WinLevelPKIDDef {
            get {
                return APDBDef.CroResource.WinLevelPKID;
            }
        }
        
        /// <summary>
        /// DownCount
        /// </summary>
        [Display(Name="下载次数")]
        public virtual int DownCount {
            get {
                return _downCount;
            }
            set {
                _downCount = value;
            }
        }
        
        /// <summary>
        /// DownCount APColumnDef
        /// </summary>
        public static Int32APColumnDef DownCountDef {
            get {
                return APDBDef.CroResource.DownCount;
            }
        }
        
        /// <summary>
        /// FavoriteCount
        /// </summary>
        [Display(Name="收藏次数")]
        public virtual int FavoriteCount {
            get {
                return _favoriteCount;
            }
            set {
                _favoriteCount = value;
            }
        }
        
        /// <summary>
        /// FavoriteCount APColumnDef
        /// </summary>
        public static Int32APColumnDef FavoriteCountDef {
            get {
                return APDBDef.CroResource.FavoriteCount;
            }
        }
        
        /// <summary>
        /// ViewCount
        /// </summary>
        [Display(Name="点击次数")]
        public virtual int ViewCount {
            get {
                return _viewCount;
            }
            set {
                _viewCount = value;
            }
        }
        
        /// <summary>
        /// ViewCount APColumnDef
        /// </summary>
        public static Int32APColumnDef ViewCountDef {
            get {
                return APDBDef.CroResource.ViewCount;
            }
        }
        
        /// <summary>
        /// CommentCount
        /// </summary>
        [Display(Name="评论次数")]
        public virtual int CommentCount {
            get {
                return _commentCount;
            }
            set {
                _commentCount = value;
            }
        }
        
        /// <summary>
        /// CommentCount APColumnDef
        /// </summary>
        public static Int32APColumnDef CommentCountDef {
            get {
                return APDBDef.CroResource.CommentCount;
            }
        }
        
        /// <summary>
        /// EliteScore
        /// </summary>
        [Display(Name="加精分数")]
        public virtual int EliteScore {
            get {
                return _eliteScore;
            }
            set {
                _eliteScore = value;
            }
        }
        
        /// <summary>
        /// EliteScore APColumnDef
        /// </summary>
        public static Int32APColumnDef EliteScoreDef {
            get {
                return APDBDef.CroResource.EliteScore;
            }
        }
        
        /// <summary>
        /// PraiseCount
        /// </summary>
        [Display(Name="点赞次数")]
        public virtual int PraiseCount {
            get {
                return _praiseCount;
            }
            set {
                _praiseCount = value;
            }
        }
        
        /// <summary>
        /// PraiseCount APColumnDef
        /// </summary>
        public static Int32APColumnDef PraiseCountDef {
            get {
                return APDBDef.CroResource.PraiseCount;
            }
        }
        
        /// <summary>
        /// Auditor
        /// </summary>
        [Display(Name="审核人ID")]
        public virtual long Auditor {
            get {
                return _auditor;
            }
            set {
                _auditor = value;
            }
        }
        
        /// <summary>
        /// Auditor APColumnDef
        /// </summary>
        public static Int64APColumnDef AuditorDef {
            get {
                return APDBDef.CroResource.Auditor;
            }
        }
        
        /// <summary>
        /// AuditedTime
        /// </summary>
        [Display(Name="审核时间")]
        public virtual System.DateTime AuditedTime {
            get {
                return _auditedTime;
            }
            set {
                _auditedTime = value;
            }
        }
        
        /// <summary>
        /// AuditedTime APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef AuditedTimeDef {
            get {
                return APDBDef.CroResource.AuditedTime;
            }
        }
        
        /// <summary>
        /// AuditOpinion
        /// </summary>
        [Display(Name="审核意见")]
        [StringLength(255)]
        public virtual string AuditOpinion {
            get {
                return _auditOpinion;
            }
            set {
                _auditOpinion = value;
            }
        }
        
        /// <summary>
        /// AuditOpinion APColumnDef
        /// </summary>
        public static StringAPColumnDef AuditOpinionDef {
            get {
                return APDBDef.CroResource.AuditOpinion;
            }
        }
        
        /// <summary>
        /// Creator
        /// </summary>
        public virtual long Creator {
            get {
                return _creator;
            }
            set {
                _creator = value;
            }
        }
        
        /// <summary>
        /// Creator APColumnDef
        /// </summary>
        public static Int64APColumnDef CreatorDef {
            get {
                return APDBDef.CroResource.Creator;
            }
        }
        
        /// <summary>
        /// CreatedTime
        /// </summary>
        public virtual System.DateTime CreatedTime {
            get {
                return _createdTime;
            }
            set {
                _createdTime = value;
            }
        }
        
        /// <summary>
        /// CreatedTime APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef CreatedTimeDef {
            get {
                return APDBDef.CroResource.CreatedTime;
            }
        }
        
        /// <summary>
        /// LastModifier
        /// </summary>
        public virtual long LastModifier {
            get {
                return _lastModifier;
            }
            set {
                _lastModifier = value;
            }
        }
        
        /// <summary>
        /// LastModifier APColumnDef
        /// </summary>
        public static Int64APColumnDef LastModifierDef {
            get {
                return APDBDef.CroResource.LastModifier;
            }
        }
        
        /// <summary>
        /// LastModifiedTime
        /// </summary>
        public virtual System.DateTime LastModifiedTime {
            get {
                return _lastModifiedTime;
            }
            set {
                _lastModifiedTime = value;
            }
        }
        
        /// <summary>
        /// LastModifiedTime APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef LastModifiedTimeDef {
            get {
                return APDBDef.CroResource.LastModifiedTime;
            }
        }
        
        /// <summary>
        /// Score
        /// </summary>
        [Display(Name="作品得分")]
        public virtual double Score {
            get {
                return _score;
            }
            set {
                _score = value;
            }
        }
        
        /// <summary>
        /// Score APColumnDef
        /// </summary>
        public static DoubleAPColumnDef ScoreDef {
            get {
                return APDBDef.CroResource.Score;
            }
        }
        
        /// <summary>
        /// WeiXinFavoriteCount
        /// </summary>
        [Display(Name="微信收藏次数")]
        public virtual int WeiXinFavoriteCount {
            get {
                return _weiXinFavoriteCount;
            }
            set {
                _weiXinFavoriteCount = value;
            }
        }
        
        /// <summary>
        /// WeiXinFavoriteCount APColumnDef
        /// </summary>
        public static Int32APColumnDef WeiXinFavoriteCountDef {
            get {
                return APDBDef.CroResource.WeiXinFavoriteCount;
            }
        }
        
        /// <summary>
        /// WeiXInPraiseCount
        /// </summary>
        [Display(Name="微信点赞次数")]
        public virtual int WeiXInPraiseCount {
            get {
                return _weiXInPraiseCount;
            }
            set {
                _weiXInPraiseCount = value;
            }
        }
        
        /// <summary>
        /// WeiXInPraiseCount APColumnDef
        /// </summary>
        public static Int32APColumnDef WeiXInPraiseCountDef {
            get {
                return APDBDef.CroResource.WeiXInPraiseCount;
            }
        }
        
        /// <summary>
        /// CroResourceTableDef APTableDef
        /// </summary>
        public static APDBDef.CroResourceTableDef TableDef {
            get {
                return APDBDef.CroResource;
            }
        }
        
        /// <summary>
        /// CroResourceTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.CroResource.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(CroResource data) {
            CrosourceId = data.CrosourceId;
            Title = data.Title;
            Author = data.Author;
            Keywords = data.Keywords;
            Description = data.Description;
            ProvinceId = data.ProvinceId;
            AreaId = data.AreaId;
            CompanyId = data.CompanyId;
            ActiveId = data.ActiveId;
            AuthorCompany = data.AuthorCompany;
            AuthorAddress = data.AuthorAddress;
            AuthorEmail = data.AuthorEmail;
            AuthorPhone = data.AuthorPhone;
            StagePKID = data.StagePKID;
            GradePKID = data.GradePKID;
            ResourceTypePKID = data.ResourceTypePKID;
            SubjectPKID = data.SubjectPKID;
            CourseTypePKID = data.CourseTypePKID;
            StatePKID = data.StatePKID;
            PublicStatePKID = data.PublicStatePKID;
            DownloadStatePKID = data.DownloadStatePKID;
            WinLevelPKID = data.WinLevelPKID;
            DownCount = data.DownCount;
            FavoriteCount = data.FavoriteCount;
            ViewCount = data.ViewCount;
            CommentCount = data.CommentCount;
            EliteScore = data.EliteScore;
            PraiseCount = data.PraiseCount;
            Auditor = data.Auditor;
            AuditedTime = data.AuditedTime;
            AuditOpinion = data.AuditOpinion;
            Creator = data.Creator;
            CreatedTime = data.CreatedTime;
            LastModifier = data.LastModifier;
            LastModifiedTime = data.LastModifiedTime;
            Score = data.Score;
            WeiXinFavoriteCount = data.WeiXinFavoriteCount;
            WeiXInPraiseCount = data.WeiXInPraiseCount;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(CroResource data) {
            if ((CrosourceId != data.CrosourceId)) {
                return false;
            }
            if ((Title != data.Title)) {
                return false;
            }
            if ((Author != data.Author)) {
                return false;
            }
            if ((Keywords != data.Keywords)) {
                return false;
            }
            if ((Description != data.Description)) {
                return false;
            }
            if ((ProvinceId != data.ProvinceId)) {
                return false;
            }
            if ((AreaId != data.AreaId)) {
                return false;
            }
            if ((CompanyId != data.CompanyId)) {
                return false;
            }
            if ((ActiveId != data.ActiveId)) {
                return false;
            }
            if ((AuthorCompany != data.AuthorCompany)) {
                return false;
            }
            if ((AuthorAddress != data.AuthorAddress)) {
                return false;
            }
            if ((AuthorEmail != data.AuthorEmail)) {
                return false;
            }
            if ((AuthorPhone != data.AuthorPhone)) {
                return false;
            }
            if ((StagePKID != data.StagePKID)) {
                return false;
            }
            if ((GradePKID != data.GradePKID)) {
                return false;
            }
            if ((ResourceTypePKID != data.ResourceTypePKID)) {
                return false;
            }
            if ((SubjectPKID != data.SubjectPKID)) {
                return false;
            }
            if ((CourseTypePKID != data.CourseTypePKID)) {
                return false;
            }
            if ((StatePKID != data.StatePKID)) {
                return false;
            }
            if ((PublicStatePKID != data.PublicStatePKID)) {
                return false;
            }
            if ((DownloadStatePKID != data.DownloadStatePKID)) {
                return false;
            }
            if ((WinLevelPKID != data.WinLevelPKID)) {
                return false;
            }
            if ((DownCount != data.DownCount)) {
                return false;
            }
            if ((FavoriteCount != data.FavoriteCount)) {
                return false;
            }
            if ((ViewCount != data.ViewCount)) {
                return false;
            }
            if ((CommentCount != data.CommentCount)) {
                return false;
            }
            if ((EliteScore != data.EliteScore)) {
                return false;
            }
            if ((PraiseCount != data.PraiseCount)) {
                return false;
            }
            if ((Auditor != data.Auditor)) {
                return false;
            }
            if ((AuditedTime != data.AuditedTime)) {
                return false;
            }
            if ((AuditOpinion != data.AuditOpinion)) {
                return false;
            }
            if ((Creator != data.Creator)) {
                return false;
            }
            if ((CreatedTime != data.CreatedTime)) {
                return false;
            }
            if ((LastModifier != data.LastModifier)) {
                return false;
            }
            if ((LastModifiedTime != data.LastModifiedTime)) {
                return false;
            }
            if ((Score != data.Score)) {
                return false;
            }
            if ((WeiXinFavoriteCount != data.WeiXinFavoriteCount)) {
                return false;
            }
            if ((WeiXInPraiseCount != data.WeiXInPraiseCount)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.CroResourceBpl.Insert(((CroResource)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.CroResourceBpl.Update(((CroResource)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long crosourceId, Object metadata) {
            APBplDef.CroResourceBpl.UpdatePartial(crosourceId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long crosourceId) {
            APBplDef.CroResourceBpl.PrimaryDelete(crosourceId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.CroResourceBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.CroResourceBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static CroResource PrimaryGet(long crosourceId) {
            return APBplDef.CroResourceBpl.PrimaryGet(crosourceId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<CroResource> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.CroResourceBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<CroResource> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.CroResourceBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<CroResource> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.CroResourceBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<CroResource> GetAll() {
            return APBplDef.CroResourceBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 微课作品
    /// </summary>
    [Serializable()]
    public partial class CroResource : CroResourceBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public CroResource() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public CroResource(
                    long crosourceId, 
                    string title, 
                    string author, 
                    string keywords, 
                    string description, 
                    long provinceId, 
                    long areaId, 
                    long companyId, 
                    long activeId, 
                    string authorCompany, 
                    string authorAddress, 
                    string authorEmail, 
                    string authorPhone, 
                    long stagePKID, 
                    long gradePKID, 
                    long resourceTypePKID, 
                    long subjectPKID, 
                    long courseTypePKID, 
                    long statePKID, 
                    long publicStatePKID, 
                    long downloadStatePKID, 
                    long winLevelPKID, 
                    int downCount, 
                    int favoriteCount, 
                    int viewCount, 
                    int commentCount, 
                    int eliteScore, 
                    int praiseCount, 
                    long auditor, 
                    System.DateTime auditedTime, 
                    string auditOpinion, 
                    long creator, 
                    System.DateTime createdTime, 
                    long lastModifier, 
                    System.DateTime lastModifiedTime, 
                    double score, 
                    int weiXinFavoriteCount, 
                    int weiXInPraiseCount) : 
                base(crosourceId, title, author, keywords, description, provinceId, areaId, companyId, activeId, authorCompany, authorAddress, authorEmail, authorPhone, stagePKID, gradePKID, resourceTypePKID, subjectPKID, courseTypePKID, statePKID, publicStatePKID, downloadStatePKID, winLevelPKID, downCount, favoriteCount, viewCount, commentCount, eliteScore, praiseCount, auditor, auditedTime, auditOpinion, creator, createdTime, lastModifier, lastModifiedTime, score, weiXinFavoriteCount, weiXInPraiseCount) {
        }
    }
    
    /// <summary>
    /// 课程 Base
    /// </summary>
    [Serializable()]
    public abstract partial class MicroCourseBase {
        
        /// <summary>
        /// CourseId
        /// </summary>
        private long _courseId;
        
        /// <summary>
        /// CourseTitle
        /// </summary>
        private string _courseTitle = string.Empty;
        
        /// <summary>
        /// ResourceId
        /// </summary>
        private long _resourceId;
        
        /// <summary>
        /// VideoId
        /// </summary>
        private long _videoId;
        
        /// <summary>
        /// CoverId
        /// </summary>
        private long _coverId;
        
        /// <summary>
        /// DesignId
        /// </summary>
        private long _designId;
        
        /// <summary>
        /// SummaryId
        /// </summary>
        private long _summaryId;
        
        /// <summary>
        /// CoursewareId
        /// </summary>
        private long _coursewareId;
        
        /// <summary>
        /// AttachmentId
        /// </summary>
        private long _attachmentId;
        
        /// <summary>
        /// CharpterSortId
        /// </summary>
        private long _charpterSortId;
        
        /// <summary>
        /// PlayCount
        /// </summary>
        private int _playCount;
        
        /// <summary>
        /// DownCount
        /// </summary>
        private int _downCount;
        
        /// <summary>
        /// StarCount
        /// </summary>
        private int _starCount;
        
        /// <summary>
        /// WeiXinPlayCount
        /// </summary>
        private int _weiXinPlayCount;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public MicroCourseBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public MicroCourseBase(long courseId, string courseTitle, long resourceId, long videoId, long coverId, long designId, long summaryId, long coursewareId, long attachmentId, long charpterSortId, int playCount, int downCount, int starCount, int weiXinPlayCount) {
            _courseId = courseId;
            _courseTitle = courseTitle;
            _resourceId = resourceId;
            _videoId = videoId;
            _coverId = coverId;
            _designId = designId;
            _summaryId = summaryId;
            _coursewareId = coursewareId;
            _attachmentId = attachmentId;
            _charpterSortId = charpterSortId;
            _playCount = playCount;
            _downCount = downCount;
            _starCount = starCount;
            _weiXinPlayCount = weiXinPlayCount;
        }
        
        /// <summary>
        /// CourseId
        /// </summary>
        public virtual long CourseId {
            get {
                return _courseId;
            }
            set {
                _courseId = value;
            }
        }
        
        /// <summary>
        /// CourseId APColumnDef
        /// </summary>
        public static Int64APColumnDef CourseIdDef {
            get {
                return APDBDef.MicroCourse.CourseId;
            }
        }
        
        /// <summary>
        /// CourseTitle
        /// </summary>
        [Display(Name="微课标题")]
        [Required()]
        [StringLength(50)]
        public virtual string CourseTitle {
            get {
                return _courseTitle;
            }
            set {
                _courseTitle = value;
            }
        }
        
        /// <summary>
        /// CourseTitle APColumnDef
        /// </summary>
        public static StringAPColumnDef CourseTitleDef {
            get {
                return APDBDef.MicroCourse.CourseTitle;
            }
        }
        
        /// <summary>
        /// ResourceId
        /// </summary>
        [Display(Name="微课程作品")]
        [Required()]
        public virtual long ResourceId {
            get {
                return _resourceId;
            }
            set {
                _resourceId = value;
            }
        }
        
        /// <summary>
        /// ResourceId APColumnDef
        /// </summary>
        public static Int64APColumnDef ResourceIdDef {
            get {
                return APDBDef.MicroCourse.ResourceId;
            }
        }
        
        /// <summary>
        /// VideoId
        /// </summary>
        [Display(Name="视频文件")]
        [Required()]
        public virtual long VideoId {
            get {
                return _videoId;
            }
            set {
                _videoId = value;
            }
        }
        
        /// <summary>
        /// VideoId APColumnDef
        /// </summary>
        public static Int64APColumnDef VideoIdDef {
            get {
                return APDBDef.MicroCourse.VideoId;
            }
        }
        
        /// <summary>
        /// CoverId
        /// </summary>
        [Display(Name="封面文件")]
        public virtual long CoverId {
            get {
                return _coverId;
            }
            set {
                _coverId = value;
            }
        }
        
        /// <summary>
        /// CoverId APColumnDef
        /// </summary>
        public static Int64APColumnDef CoverIdDef {
            get {
                return APDBDef.MicroCourse.CoverId;
            }
        }
        
        /// <summary>
        /// DesignId
        /// </summary>
        [Display(Name="设计")]
        public virtual long DesignId {
            get {
                return _designId;
            }
            set {
                _designId = value;
            }
        }
        
        /// <summary>
        /// DesignId APColumnDef
        /// </summary>
        public static Int64APColumnDef DesignIdDef {
            get {
                return APDBDef.MicroCourse.DesignId;
            }
        }
        
        /// <summary>
        /// SummaryId
        /// </summary>
        [Display(Name="反思")]
        public virtual long SummaryId {
            get {
                return _summaryId;
            }
            set {
                _summaryId = value;
            }
        }
        
        /// <summary>
        /// SummaryId APColumnDef
        /// </summary>
        public static Int64APColumnDef SummaryIdDef {
            get {
                return APDBDef.MicroCourse.SummaryId;
            }
        }
        
        /// <summary>
        /// CoursewareId
        /// </summary>
        [Display(Name="课件")]
        public virtual long CoursewareId {
            get {
                return _coursewareId;
            }
            set {
                _coursewareId = value;
            }
        }
        
        /// <summary>
        /// CoursewareId APColumnDef
        /// </summary>
        public static Int64APColumnDef CoursewareIdDef {
            get {
                return APDBDef.MicroCourse.CoursewareId;
            }
        }
        
        /// <summary>
        /// AttachmentId
        /// </summary>
        [Display(Name="附件")]
        public virtual long AttachmentId {
            get {
                return _attachmentId;
            }
            set {
                _attachmentId = value;
            }
        }
        
        /// <summary>
        /// AttachmentId APColumnDef
        /// </summary>
        public static Int64APColumnDef AttachmentIdDef {
            get {
                return APDBDef.MicroCourse.AttachmentId;
            }
        }
        
        /// <summary>
        /// CharpterSortId
        /// </summary>
        public virtual long CharpterSortId {
            get {
                return _charpterSortId;
            }
            set {
                _charpterSortId = value;
            }
        }
        
        /// <summary>
        /// CharpterSortId APColumnDef
        /// </summary>
        public static Int64APColumnDef CharpterSortIdDef {
            get {
                return APDBDef.MicroCourse.CharpterSortId;
            }
        }
        
        /// <summary>
        /// PlayCount
        /// </summary>
        [Display(Name="播放次数")]
        public virtual int PlayCount {
            get {
                return _playCount;
            }
            set {
                _playCount = value;
            }
        }
        
        /// <summary>
        /// PlayCount APColumnDef
        /// </summary>
        public static Int32APColumnDef PlayCountDef {
            get {
                return APDBDef.MicroCourse.PlayCount;
            }
        }
        
        /// <summary>
        /// DownCount
        /// </summary>
        [Display(Name="下载次数")]
        public virtual int DownCount {
            get {
                return _downCount;
            }
            set {
                _downCount = value;
            }
        }
        
        /// <summary>
        /// DownCount APColumnDef
        /// </summary>
        public static Int32APColumnDef DownCountDef {
            get {
                return APDBDef.MicroCourse.DownCount;
            }
        }
        
        /// <summary>
        /// StarCount
        /// </summary>
        [Display(Name="评分次数")]
        public virtual int StarCount {
            get {
                return _starCount;
            }
            set {
                _starCount = value;
            }
        }
        
        /// <summary>
        /// StarCount APColumnDef
        /// </summary>
        public static Int32APColumnDef StarCountDef {
            get {
                return APDBDef.MicroCourse.StarCount;
            }
        }
        
        /// <summary>
        /// WeiXinPlayCount
        /// </summary>
        [Display(Name="微信播放次数")]
        public virtual int WeiXinPlayCount {
            get {
                return _weiXinPlayCount;
            }
            set {
                _weiXinPlayCount = value;
            }
        }
        
        /// <summary>
        /// WeiXinPlayCount APColumnDef
        /// </summary>
        public static Int32APColumnDef WeiXinPlayCountDef {
            get {
                return APDBDef.MicroCourse.WeiXinPlayCount;
            }
        }
        
        /// <summary>
        /// MicroCourseTableDef APTableDef
        /// </summary>
        public static APDBDef.MicroCourseTableDef TableDef {
            get {
                return APDBDef.MicroCourse;
            }
        }
        
        /// <summary>
        /// MicroCourseTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.MicroCourse.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(MicroCourse data) {
            CourseId = data.CourseId;
            CourseTitle = data.CourseTitle;
            ResourceId = data.ResourceId;
            VideoId = data.VideoId;
            CoverId = data.CoverId;
            DesignId = data.DesignId;
            SummaryId = data.SummaryId;
            CoursewareId = data.CoursewareId;
            AttachmentId = data.AttachmentId;
            CharpterSortId = data.CharpterSortId;
            PlayCount = data.PlayCount;
            DownCount = data.DownCount;
            StarCount = data.StarCount;
            WeiXinPlayCount = data.WeiXinPlayCount;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(MicroCourse data) {
            if ((CourseId != data.CourseId)) {
                return false;
            }
            if ((CourseTitle != data.CourseTitle)) {
                return false;
            }
            if ((ResourceId != data.ResourceId)) {
                return false;
            }
            if ((VideoId != data.VideoId)) {
                return false;
            }
            if ((CoverId != data.CoverId)) {
                return false;
            }
            if ((DesignId != data.DesignId)) {
                return false;
            }
            if ((SummaryId != data.SummaryId)) {
                return false;
            }
            if ((CoursewareId != data.CoursewareId)) {
                return false;
            }
            if ((AttachmentId != data.AttachmentId)) {
                return false;
            }
            if ((CharpterSortId != data.CharpterSortId)) {
                return false;
            }
            if ((PlayCount != data.PlayCount)) {
                return false;
            }
            if ((DownCount != data.DownCount)) {
                return false;
            }
            if ((StarCount != data.StarCount)) {
                return false;
            }
            if ((WeiXinPlayCount != data.WeiXinPlayCount)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.MicroCourseBpl.Insert(((MicroCourse)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.MicroCourseBpl.Update(((MicroCourse)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long courseId, Object metadata) {
            APBplDef.MicroCourseBpl.UpdatePartial(courseId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long courseId) {
            APBplDef.MicroCourseBpl.PrimaryDelete(courseId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.MicroCourseBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.MicroCourseBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static MicroCourse PrimaryGet(long courseId) {
            return APBplDef.MicroCourseBpl.PrimaryGet(courseId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<MicroCourse> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.MicroCourseBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<MicroCourse> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.MicroCourseBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<MicroCourse> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.MicroCourseBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<MicroCourse> GetAll() {
            return APBplDef.MicroCourseBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 课程
    /// </summary>
    [Serializable()]
    public partial class MicroCourse : MicroCourseBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public MicroCourse() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public MicroCourse(long courseId, string courseTitle, long resourceId, long videoId, long coverId, long designId, long summaryId, long coursewareId, long attachmentId, long charpterSortId, int playCount, int downCount, int starCount, int weiXinPlayCount) : 
                base(courseId, courseTitle, resourceId, videoId, coverId, designId, summaryId, coursewareId, attachmentId, charpterSortId, playCount, downCount, starCount, weiXinPlayCount) {
        }
    }
    
    /// <summary>
    ///  Base
    /// </summary>
    [Serializable()]
    public abstract partial class FilesBase {
        
        /// <summary>
        /// FileId
        /// </summary>
        private long _fileId;
        
        /// <summary>
        /// FileName
        /// </summary>
        private string _fileName = string.Empty;
        
        /// <summary>
        /// ExtName
        /// </summary>
        private string _extName = string.Empty;
        
        /// <summary>
        /// FilePath
        /// </summary>
        private string _filePath = string.Empty;
        
        /// <summary>
        /// FileSize
        /// </summary>
        private long _fileSize;
        
        /// <summary>
        /// Md5
        /// </summary>
        private string _md5 = string.Empty;
        
        /// <summary>
        /// Code
        /// </summary>
        private string _code = string.Empty;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public FilesBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public FilesBase(long fileId, string fileName, string extName, string filePath, long fileSize, string md5, string code) {
            _fileId = fileId;
            _fileName = fileName;
            _extName = extName;
            _filePath = filePath;
            _fileSize = fileSize;
            _md5 = md5;
            _code = code;
        }
        
        /// <summary>
        /// FileId
        /// </summary>
        [Display(Name="文件ID")]
        public virtual long FileId {
            get {
                return _fileId;
            }
            set {
                _fileId = value;
            }
        }
        
        /// <summary>
        /// FileId APColumnDef
        /// </summary>
        public static Int64APColumnDef FileIdDef {
            get {
                return APDBDef.Files.FileId;
            }
        }
        
        /// <summary>
        /// FileName
        /// </summary>
        [Display(Name="文件名称")]
        [Required()]
        [StringLength(100)]
        public virtual string FileName {
            get {
                return _fileName;
            }
            set {
                _fileName = value;
            }
        }
        
        /// <summary>
        /// FileName APColumnDef
        /// </summary>
        public static StringAPColumnDef FileNameDef {
            get {
                return APDBDef.Files.FileName;
            }
        }
        
        /// <summary>
        /// ExtName
        /// </summary>
        [Display(Name="后缀名称")]
        [Required()]
        [StringLength(20)]
        public virtual string ExtName {
            get {
                return _extName;
            }
            set {
                _extName = value;
            }
        }
        
        /// <summary>
        /// ExtName APColumnDef
        /// </summary>
        public static StringAPColumnDef ExtNameDef {
            get {
                return APDBDef.Files.ExtName;
            }
        }
        
        /// <summary>
        /// FilePath
        /// </summary>
        [Display(Name="作品路径")]
        [Required()]
        [StringLength(255)]
        public virtual string FilePath {
            get {
                return _filePath;
            }
            set {
                _filePath = value;
            }
        }
        
        /// <summary>
        /// FilePath APColumnDef
        /// </summary>
        public static StringAPColumnDef FilePathDef {
            get {
                return APDBDef.Files.FilePath;
            }
        }
        
        /// <summary>
        /// FileSize
        /// </summary>
        [Display(Name="文件大小")]
        [Required()]
        public virtual long FileSize {
            get {
                return _fileSize;
            }
            set {
                _fileSize = value;
            }
        }
        
        /// <summary>
        /// FileSize APColumnDef
        /// </summary>
        public static Int64APColumnDef FileSizeDef {
            get {
                return APDBDef.Files.FileSize;
            }
        }
        
        /// <summary>
        /// Md5
        /// </summary>
        [Required()]
        [StringLength(50)]
        public virtual string Md5 {
            get {
                return _md5;
            }
            set {
                _md5 = value;
            }
        }
        
        /// <summary>
        /// Md5 APColumnDef
        /// </summary>
        public static StringAPColumnDef Md5Def {
            get {
                return APDBDef.Files.Md5;
            }
        }
        
        /// <summary>
        /// Code
        /// </summary>
        [StringLength(20)]
        public virtual string Code {
            get {
                return _code;
            }
            set {
                _code = value;
            }
        }
        
        /// <summary>
        /// Code APColumnDef
        /// </summary>
        public static StringAPColumnDef CodeDef {
            get {
                return APDBDef.Files.Code;
            }
        }
        
        /// <summary>
        /// FilesTableDef APTableDef
        /// </summary>
        public static APDBDef.FilesTableDef TableDef {
            get {
                return APDBDef.Files;
            }
        }
        
        /// <summary>
        /// FilesTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.Files.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(Files data) {
            FileId = data.FileId;
            FileName = data.FileName;
            ExtName = data.ExtName;
            FilePath = data.FilePath;
            FileSize = data.FileSize;
            Md5 = data.Md5;
            Code = data.Code;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(Files data) {
            if ((FileId != data.FileId)) {
                return false;
            }
            if ((FileName != data.FileName)) {
                return false;
            }
            if ((ExtName != data.ExtName)) {
                return false;
            }
            if ((FilePath != data.FilePath)) {
                return false;
            }
            if ((FileSize != data.FileSize)) {
                return false;
            }
            if ((Md5 != data.Md5)) {
                return false;
            }
            if ((Code != data.Code)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.FilesBpl.Insert(((Files)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.FilesBpl.Update(((Files)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long fileId, Object metadata) {
            APBplDef.FilesBpl.UpdatePartial(fileId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long fileId) {
            APBplDef.FilesBpl.PrimaryDelete(fileId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.FilesBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.FilesBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static Files PrimaryGet(long fileId) {
            return APBplDef.FilesBpl.PrimaryGet(fileId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Files> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.FilesBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Files> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.FilesBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Files> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.FilesBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<Files> GetAll() {
            return APBplDef.FilesBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 
    /// </summary>
    [Serializable()]
    public partial class Files : FilesBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public Files() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public Files(long fileId, string fileName, string extName, string filePath, long fileSize, string md5, string code) : 
                base(fileId, fileName, extName, filePath, fileSize, md5, code) {
        }
    }
    
    /// <summary>
    /// 评审指标 Base
    /// </summary>
    [Serializable()]
    public abstract partial class IndicationBase {
        
        /// <summary>
        /// IndicationId
        /// </summary>
        private long _indicationId;
        
        /// <summary>
        /// IndicationName
        /// </summary>
        private string _indicationName = string.Empty;
        
        /// <summary>
        /// Description
        /// </summary>
        private string _description = string.Empty;
        
        /// <summary>
        /// TypePKID
        /// </summary>
        private long _typePKID;
        
        /// <summary>
        /// LevelPKID
        /// </summary>
        private long _levelPKID;
        
        /// <summary>
        /// Score
        /// </summary>
        private int _score;
        
        /// <summary>
        /// Status
        /// </summary>
        private int _status;
        
        /// <summary>
        /// ActiveId
        /// </summary>
        private long _activeId;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public IndicationBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public IndicationBase(long indicationId, string indicationName, string description, long typePKID, long levelPKID, int score, int status, long activeId) {
            _indicationId = indicationId;
            _indicationName = indicationName;
            _description = description;
            _typePKID = typePKID;
            _levelPKID = levelPKID;
            _score = score;
            _status = status;
            _activeId = activeId;
        }
        
        /// <summary>
        /// IndicationId
        /// </summary>
        public virtual long IndicationId {
            get {
                return _indicationId;
            }
            set {
                _indicationId = value;
            }
        }
        
        /// <summary>
        /// IndicationId APColumnDef
        /// </summary>
        public static Int64APColumnDef IndicationIdDef {
            get {
                return APDBDef.Indication.IndicationId;
            }
        }
        
        /// <summary>
        /// IndicationName
        /// </summary>
        [Display(Name="指标子项")]
        [Required()]
        [StringLength(50)]
        public virtual string IndicationName {
            get {
                return _indicationName;
            }
            set {
                _indicationName = value;
            }
        }
        
        /// <summary>
        /// IndicationName APColumnDef
        /// </summary>
        public static StringAPColumnDef IndicationNameDef {
            get {
                return APDBDef.Indication.IndicationName;
            }
        }
        
        /// <summary>
        /// Description
        /// </summary>
        [Display(Name="指标描述")]
        [Required()]
        [StringLength(40000)]
        public virtual string Description {
            get {
                return _description;
            }
            set {
                _description = value;
            }
        }
        
        /// <summary>
        /// Description APColumnDef
        /// </summary>
        public static StringAPColumnDef DescriptionDef {
            get {
                return APDBDef.Indication.Description;
            }
        }
        
        /// <summary>
        /// TypePKID
        /// </summary>
        [Display(Name="评价项目")]
        public virtual long TypePKID {
            get {
                return _typePKID;
            }
            set {
                _typePKID = value;
            }
        }
        
        /// <summary>
        /// TypePKID APColumnDef
        /// </summary>
        public static Int64APColumnDef TypePKIDDef {
            get {
                return APDBDef.Indication.TypePKID;
            }
        }
        
        /// <summary>
        /// LevelPKID
        /// </summary>
        [Display(Name="评审级别")]
        public virtual long LevelPKID {
            get {
                return _levelPKID;
            }
            set {
                _levelPKID = value;
            }
        }
        
        /// <summary>
        /// LevelPKID APColumnDef
        /// </summary>
        public static Int64APColumnDef LevelPKIDDef {
            get {
                return APDBDef.Indication.LevelPKID;
            }
        }
        
        /// <summary>
        /// Score
        /// </summary>
        [Display(Name="最大分值")]
        public virtual int Score {
            get {
                return _score;
            }
            set {
                _score = value;
            }
        }
        
        /// <summary>
        /// Score APColumnDef
        /// </summary>
        public static Int32APColumnDef ScoreDef {
            get {
                return APDBDef.Indication.Score;
            }
        }
        
        /// <summary>
        /// Status
        /// </summary>
        public virtual int Status {
            get {
                return _status;
            }
            set {
                _status = value;
            }
        }
        
        /// <summary>
        /// Status APColumnDef
        /// </summary>
        public static Int32APColumnDef StatusDef {
            get {
                return APDBDef.Indication.Status;
            }
        }
        
        /// <summary>
        /// ActiveId
        /// </summary>
        [Display(Name="所属活动")]
        public virtual long ActiveId {
            get {
                return _activeId;
            }
            set {
                _activeId = value;
            }
        }
        
        /// <summary>
        /// ActiveId APColumnDef
        /// </summary>
        public static Int64APColumnDef ActiveIdDef {
            get {
                return APDBDef.Indication.ActiveId;
            }
        }
        
        /// <summary>
        /// IndicationTableDef APTableDef
        /// </summary>
        public static APDBDef.IndicationTableDef TableDef {
            get {
                return APDBDef.Indication;
            }
        }
        
        /// <summary>
        /// IndicationTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.Indication.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(Indication data) {
            IndicationId = data.IndicationId;
            IndicationName = data.IndicationName;
            Description = data.Description;
            TypePKID = data.TypePKID;
            LevelPKID = data.LevelPKID;
            Score = data.Score;
            Status = data.Status;
            ActiveId = data.ActiveId;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(Indication data) {
            if ((IndicationId != data.IndicationId)) {
                return false;
            }
            if ((IndicationName != data.IndicationName)) {
                return false;
            }
            if ((Description != data.Description)) {
                return false;
            }
            if ((TypePKID != data.TypePKID)) {
                return false;
            }
            if ((LevelPKID != data.LevelPKID)) {
                return false;
            }
            if ((Score != data.Score)) {
                return false;
            }
            if ((Status != data.Status)) {
                return false;
            }
            if ((ActiveId != data.ActiveId)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.IndicationBpl.Insert(((Indication)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.IndicationBpl.Update(((Indication)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long indicationId, Object metadata) {
            APBplDef.IndicationBpl.UpdatePartial(indicationId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long indicationId) {
            APBplDef.IndicationBpl.PrimaryDelete(indicationId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.IndicationBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.IndicationBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static Indication PrimaryGet(long indicationId) {
            return APBplDef.IndicationBpl.PrimaryGet(indicationId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Indication> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.IndicationBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Indication> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.IndicationBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Indication> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.IndicationBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<Indication> GetAll() {
            return APBplDef.IndicationBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 评审指标
    /// </summary>
    [Serializable()]
    public partial class Indication : IndicationBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public Indication() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public Indication(long indicationId, string indicationName, string description, long typePKID, long levelPKID, int score, int status, long activeId) : 
                base(indicationId, indicationName, description, typePKID, levelPKID, score, status, activeId) {
        }
    }
    
    /// <summary>
    /// 评审组 Base
    /// </summary>
    [Serializable()]
    public abstract partial class EvalGroupBase {
        
        /// <summary>
        /// GroupId
        /// </summary>
        private long _groupId;
        
        /// <summary>
        /// GroupName
        /// </summary>
        private string _groupName = string.Empty;
        
        /// <summary>
        /// LevelPKID
        /// </summary>
        private long _levelPKID;
        
        /// <summary>
        /// StartDate
        /// </summary>
        private System.DateTime _startDate;
        
        /// <summary>
        /// EndDate
        /// </summary>
        private System.DateTime _endDate;
        
        /// <summary>
        /// ActiveId
        /// </summary>
        private long _activeId;
        
        /// <summary>
        /// ProvinceId
        /// </summary>
        private long _provinceId;
        
        /// <summary>
        /// AreaId
        /// </summary>
        private long _areaId;
        
        /// <summary>
        /// CompanyId
        /// </summary>
        private long _companyId;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public EvalGroupBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public EvalGroupBase(long groupId, string groupName, long levelPKID, System.DateTime startDate, System.DateTime endDate, long activeId, long provinceId, long areaId, long companyId) {
            _groupId = groupId;
            _groupName = groupName;
            _levelPKID = levelPKID;
            _startDate = startDate;
            _endDate = endDate;
            _activeId = activeId;
            _provinceId = provinceId;
            _areaId = areaId;
            _companyId = companyId;
        }
        
        /// <summary>
        /// GroupId
        /// </summary>
        public virtual long GroupId {
            get {
                return _groupId;
            }
            set {
                _groupId = value;
            }
        }
        
        /// <summary>
        /// GroupId APColumnDef
        /// </summary>
        public static Int64APColumnDef GroupIdDef {
            get {
                return APDBDef.EvalGroup.GroupId;
            }
        }
        
        /// <summary>
        /// GroupName
        /// </summary>
        [Display(Name="组名称")]
        [Required()]
        [StringLength(100)]
        public virtual string GroupName {
            get {
                return _groupName;
            }
            set {
                _groupName = value;
            }
        }
        
        /// <summary>
        /// GroupName APColumnDef
        /// </summary>
        public static StringAPColumnDef GroupNameDef {
            get {
                return APDBDef.EvalGroup.GroupName;
            }
        }
        
        /// <summary>
        /// LevelPKID
        /// </summary>
        [Display(Name="评审级别")]
        public virtual long LevelPKID {
            get {
                return _levelPKID;
            }
            set {
                _levelPKID = value;
            }
        }
        
        /// <summary>
        /// LevelPKID APColumnDef
        /// </summary>
        public static Int64APColumnDef LevelPKIDDef {
            get {
                return APDBDef.EvalGroup.LevelPKID;
            }
        }
        
        /// <summary>
        /// StartDate
        /// </summary>
        [Display(Name="起始时间")]
        public virtual System.DateTime StartDate {
            get {
                return _startDate;
            }
            set {
                _startDate = value;
            }
        }
        
        /// <summary>
        /// StartDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef StartDateDef {
            get {
                return APDBDef.EvalGroup.StartDate;
            }
        }
        
        /// <summary>
        /// EndDate
        /// </summary>
        [Display(Name="结束时间")]
        public virtual System.DateTime EndDate {
            get {
                return _endDate;
            }
            set {
                _endDate = value;
            }
        }
        
        /// <summary>
        /// EndDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef EndDateDef {
            get {
                return APDBDef.EvalGroup.EndDate;
            }
        }
        
        /// <summary>
        /// ActiveId
        /// </summary>
        [Display(Name="所属活动")]
        public virtual long ActiveId {
            get {
                return _activeId;
            }
            set {
                _activeId = value;
            }
        }
        
        /// <summary>
        /// ActiveId APColumnDef
        /// </summary>
        public static Int64APColumnDef ActiveIdDef {
            get {
                return APDBDef.EvalGroup.ActiveId;
            }
        }
        
        /// <summary>
        /// ProvinceId
        /// </summary>
        [Display(Name="省份")]
        public virtual long ProvinceId {
            get {
                return _provinceId;
            }
            set {
                _provinceId = value;
            }
        }
        
        /// <summary>
        /// ProvinceId APColumnDef
        /// </summary>
        public static Int64APColumnDef ProvinceIdDef {
            get {
                return APDBDef.EvalGroup.ProvinceId;
            }
        }
        
        /// <summary>
        /// AreaId
        /// </summary>
        [Display(Name="地区")]
        public virtual long AreaId {
            get {
                return _areaId;
            }
            set {
                _areaId = value;
            }
        }
        
        /// <summary>
        /// AreaId APColumnDef
        /// </summary>
        public static Int64APColumnDef AreaIdDef {
            get {
                return APDBDef.EvalGroup.AreaId;
            }
        }
        
        /// <summary>
        /// CompanyId
        /// </summary>
        [Display(Name="单位")]
        public virtual long CompanyId {
            get {
                return _companyId;
            }
            set {
                _companyId = value;
            }
        }
        
        /// <summary>
        /// CompanyId APColumnDef
        /// </summary>
        public static Int64APColumnDef CompanyIdDef {
            get {
                return APDBDef.EvalGroup.CompanyId;
            }
        }
        
        /// <summary>
        /// EvalGroupTableDef APTableDef
        /// </summary>
        public static APDBDef.EvalGroupTableDef TableDef {
            get {
                return APDBDef.EvalGroup;
            }
        }
        
        /// <summary>
        /// EvalGroupTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.EvalGroup.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(EvalGroup data) {
            GroupId = data.GroupId;
            GroupName = data.GroupName;
            LevelPKID = data.LevelPKID;
            StartDate = data.StartDate;
            EndDate = data.EndDate;
            ActiveId = data.ActiveId;
            ProvinceId = data.ProvinceId;
            AreaId = data.AreaId;
            CompanyId = data.CompanyId;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(EvalGroup data) {
            if ((GroupId != data.GroupId)) {
                return false;
            }
            if ((GroupName != data.GroupName)) {
                return false;
            }
            if ((LevelPKID != data.LevelPKID)) {
                return false;
            }
            if ((StartDate != data.StartDate)) {
                return false;
            }
            if ((EndDate != data.EndDate)) {
                return false;
            }
            if ((ActiveId != data.ActiveId)) {
                return false;
            }
            if ((ProvinceId != data.ProvinceId)) {
                return false;
            }
            if ((AreaId != data.AreaId)) {
                return false;
            }
            if ((CompanyId != data.CompanyId)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.EvalGroupBpl.Insert(((EvalGroup)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.EvalGroupBpl.Update(((EvalGroup)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long groupId, Object metadata) {
            APBplDef.EvalGroupBpl.UpdatePartial(groupId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long groupId) {
            APBplDef.EvalGroupBpl.PrimaryDelete(groupId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.EvalGroupBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.EvalGroupBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static EvalGroup PrimaryGet(long groupId) {
            return APBplDef.EvalGroupBpl.PrimaryGet(groupId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalGroup> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.EvalGroupBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalGroup> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.EvalGroupBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalGroup> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.EvalGroupBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<EvalGroup> GetAll() {
            return APBplDef.EvalGroupBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 评审组
    /// </summary>
    [Serializable()]
    public partial class EvalGroup : EvalGroupBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public EvalGroup() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public EvalGroup(long groupId, string groupName, long levelPKID, System.DateTime startDate, System.DateTime endDate, long activeId, long provinceId, long areaId, long companyId) : 
                base(groupId, groupName, levelPKID, startDate, endDate, activeId, provinceId, areaId, companyId) {
        }
    }
    
    /// <summary>
    /// 专家-考核结果 Base
    /// </summary>
    [Serializable()]
    public abstract partial class EvalResultBase {
        
        /// <summary>
        /// ResultId
        /// </summary>
        private long _resultId;
        
        /// <summary>
        /// 评审人ID
        /// </summary>
        private long _expertId;
        
        /// <summary>
        /// GroupId
        /// </summary>
        private long _groupId;
        
        /// <summary>
        /// ResourceId
        /// </summary>
        private long _resourceId;
        
        /// <summary>
        /// AccessDate
        /// </summary>
        private System.DateTime _accessDate;
        
        /// <summary>
        /// Score
        /// </summary>
        private double _score;
        
        /// <summary>
        /// Comment
        /// </summary>
        private string _comment = string.Empty;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public EvalResultBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public EvalResultBase(long resultId, long expertId, long groupId, long resourceId, System.DateTime accessDate, double score, string comment) {
            _resultId = resultId;
            _expertId = expertId;
            _groupId = groupId;
            _resourceId = resourceId;
            _accessDate = accessDate;
            _score = score;
            _comment = comment;
        }
        
        /// <summary>
        /// ResultId
        /// </summary>
        [Display(Name="评价结果ID")]
        public virtual long ResultId {
            get {
                return _resultId;
            }
            set {
                _resultId = value;
            }
        }
        
        /// <summary>
        /// ResultId APColumnDef
        /// </summary>
        public static Int64APColumnDef ResultIdDef {
            get {
                return APDBDef.EvalResult.ResultId;
            }
        }
        
        /// <summary>
        /// 评审人ID
        /// </summary>
        [Display(Name="评审人")]
        public virtual long ExpertId {
            get {
                return _expertId;
            }
            set {
                _expertId = value;
            }
        }
        
        /// <summary>
        /// 评审人ID APColumnDef
        /// </summary>
        public static Int64APColumnDef ExpertIdDef {
            get {
                return APDBDef.EvalResult.ExpertId;
            }
        }
        
        /// <summary>
        /// GroupId
        /// </summary>
        [Display(Name="评审组ID")]
        public virtual long GroupId {
            get {
                return _groupId;
            }
            set {
                _groupId = value;
            }
        }
        
        /// <summary>
        /// GroupId APColumnDef
        /// </summary>
        public static Int64APColumnDef GroupIdDef {
            get {
                return APDBDef.EvalResult.GroupId;
            }
        }
        
        /// <summary>
        /// ResourceId
        /// </summary>
        [Display(Name="被考核作品ID")]
        public virtual long ResourceId {
            get {
                return _resourceId;
            }
            set {
                _resourceId = value;
            }
        }
        
        /// <summary>
        /// ResourceId APColumnDef
        /// </summary>
        public static Int64APColumnDef ResourceIdDef {
            get {
                return APDBDef.EvalResult.ResourceId;
            }
        }
        
        /// <summary>
        /// AccessDate
        /// </summary>
        [Display(Name="评审时间")]
        public virtual System.DateTime AccessDate {
            get {
                return _accessDate;
            }
            set {
                _accessDate = value;
            }
        }
        
        /// <summary>
        /// AccessDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef AccessDateDef {
            get {
                return APDBDef.EvalResult.AccessDate;
            }
        }
        
        /// <summary>
        /// Score
        /// </summary>
        [Display(Name="得分")]
        public virtual double Score {
            get {
                return _score;
            }
            set {
                _score = value;
            }
        }
        
        /// <summary>
        /// Score APColumnDef
        /// </summary>
        public static DoubleAPColumnDef ScoreDef {
            get {
                return APDBDef.EvalResult.Score;
            }
        }
        
        /// <summary>
        /// Comment
        /// </summary>
        [Display(Name="专家评语")]
        [StringLength(4000)]
        public virtual string Comment {
            get {
                return _comment;
            }
            set {
                _comment = value;
            }
        }
        
        /// <summary>
        /// Comment APColumnDef
        /// </summary>
        public static StringAPColumnDef CommentDef {
            get {
                return APDBDef.EvalResult.Comment;
            }
        }
        
        /// <summary>
        /// EvalResultTableDef APTableDef
        /// </summary>
        public static APDBDef.EvalResultTableDef TableDef {
            get {
                return APDBDef.EvalResult;
            }
        }
        
        /// <summary>
        /// EvalResultTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.EvalResult.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(EvalResult data) {
            ResultId = data.ResultId;
            ExpertId = data.ExpertId;
            GroupId = data.GroupId;
            ResourceId = data.ResourceId;
            AccessDate = data.AccessDate;
            Score = data.Score;
            Comment = data.Comment;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(EvalResult data) {
            if ((ResultId != data.ResultId)) {
                return false;
            }
            if ((ExpertId != data.ExpertId)) {
                return false;
            }
            if ((GroupId != data.GroupId)) {
                return false;
            }
            if ((ResourceId != data.ResourceId)) {
                return false;
            }
            if ((AccessDate != data.AccessDate)) {
                return false;
            }
            if ((Score != data.Score)) {
                return false;
            }
            if ((Comment != data.Comment)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.EvalResultBpl.Insert(((EvalResult)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.EvalResultBpl.Update(((EvalResult)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long resultId, Object metadata) {
            APBplDef.EvalResultBpl.UpdatePartial(resultId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long resultId) {
            APBplDef.EvalResultBpl.PrimaryDelete(resultId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.EvalResultBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.EvalResultBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static EvalResult PrimaryGet(long resultId) {
            return APBplDef.EvalResultBpl.PrimaryGet(resultId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.EvalResultBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.EvalResultBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.EvalResultBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<EvalResult> GetAll() {
            return APBplDef.EvalResultBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 专家-考核结果
    /// </summary>
    [Serializable()]
    public partial class EvalResult : EvalResultBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public EvalResult() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public EvalResult(long resultId, long expertId, long groupId, long resourceId, System.DateTime accessDate, double score, string comment) : 
                base(resultId, expertId, groupId, resourceId, accessDate, score, comment) {
        }
    }
    
    /// <summary>
    /// 考核-结果-结果项 Base
    /// </summary>
    [Serializable()]
    public abstract partial class EvalResultItemBase {
        
        /// <summary>
        /// ResultItemId
        /// </summary>
        private long _resultItemId;
        
        /// <summary>
        /// ResultId
        /// </summary>
        private long _resultId;
        
        /// <summary>
        /// IndicationId
        /// </summary>
        private long _indicationId;
        
        /// <summary>
        /// Score
        /// </summary>
        private double _score;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public EvalResultItemBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public EvalResultItemBase(long resultItemId, long resultId, long indicationId, double score) {
            _resultItemId = resultItemId;
            _resultId = resultId;
            _indicationId = indicationId;
            _score = score;
        }
        
        /// <summary>
        /// ResultItemId
        /// </summary>
        [Display(Name="结果项ID")]
        public virtual long ResultItemId {
            get {
                return _resultItemId;
            }
            set {
                _resultItemId = value;
            }
        }
        
        /// <summary>
        /// ResultItemId APColumnDef
        /// </summary>
        public static Int64APColumnDef ResultItemIdDef {
            get {
                return APDBDef.EvalResultItem.ResultItemId;
            }
        }
        
        /// <summary>
        /// ResultId
        /// </summary>
        [Display(Name="所属考核结果ID")]
        public virtual long ResultId {
            get {
                return _resultId;
            }
            set {
                _resultId = value;
            }
        }
        
        /// <summary>
        /// ResultId APColumnDef
        /// </summary>
        public static Int64APColumnDef ResultIdDef {
            get {
                return APDBDef.EvalResultItem.ResultId;
            }
        }
        
        /// <summary>
        /// IndicationId
        /// </summary>
        public virtual long IndicationId {
            get {
                return _indicationId;
            }
            set {
                _indicationId = value;
            }
        }
        
        /// <summary>
        /// IndicationId APColumnDef
        /// </summary>
        public static Int64APColumnDef IndicationIdDef {
            get {
                return APDBDef.EvalResultItem.IndicationId;
            }
        }
        
        /// <summary>
        /// Score
        /// </summary>
        [Display(Name="得分")]
        public virtual double Score {
            get {
                return _score;
            }
            set {
                _score = value;
            }
        }
        
        /// <summary>
        /// Score APColumnDef
        /// </summary>
        public static DoubleAPColumnDef ScoreDef {
            get {
                return APDBDef.EvalResultItem.Score;
            }
        }
        
        /// <summary>
        /// EvalResultItemTableDef APTableDef
        /// </summary>
        public static APDBDef.EvalResultItemTableDef TableDef {
            get {
                return APDBDef.EvalResultItem;
            }
        }
        
        /// <summary>
        /// EvalResultItemTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.EvalResultItem.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(EvalResultItem data) {
            ResultItemId = data.ResultItemId;
            ResultId = data.ResultId;
            IndicationId = data.IndicationId;
            Score = data.Score;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(EvalResultItem data) {
            if ((ResultItemId != data.ResultItemId)) {
                return false;
            }
            if ((ResultId != data.ResultId)) {
                return false;
            }
            if ((IndicationId != data.IndicationId)) {
                return false;
            }
            if ((Score != data.Score)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.EvalResultItemBpl.Insert(((EvalResultItem)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.EvalResultItemBpl.Update(((EvalResultItem)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long resultItemId, Object metadata) {
            APBplDef.EvalResultItemBpl.UpdatePartial(resultItemId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long resultItemId) {
            APBplDef.EvalResultItemBpl.PrimaryDelete(resultItemId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.EvalResultItemBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.EvalResultItemBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static EvalResultItem PrimaryGet(long resultItemId) {
            return APBplDef.EvalResultItemBpl.PrimaryGet(resultItemId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalResultItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.EvalResultItemBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalResultItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.EvalResultItemBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalResultItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.EvalResultItemBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<EvalResultItem> GetAll() {
            return APBplDef.EvalResultItemBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 考核-结果-结果项
    /// </summary>
    [Serializable()]
    public partial class EvalResultItem : EvalResultItemBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public EvalResultItem() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public EvalResultItem(long resultItemId, long resultId, long indicationId, double score) : 
                base(resultItemId, resultId, indicationId, score) {
        }
    }
    
    /// <summary>
    /// 微信用户 Base
    /// </summary>
    [Serializable()]
    public abstract partial class WeiXinUserInfoBase {
        
        /// <summary>
        /// Id
        /// </summary>
        private long _id;
        
        /// <summary>
        /// 微信用户OpenId
        /// </summary>
        private string _openId = string.Empty;
        
        /// <summary>
        /// NickName
        /// </summary>
        private string _nickName = string.Empty;
        
        /// <summary>
        /// Gender
        /// </summary>
        private int _gender;
        
        /// <summary>
        /// Prov
        /// </summary>
        private string _prov = string.Empty;
        
        /// <summary>
        /// City
        /// </summary>
        private string _city = string.Empty;
        
        /// <summary>
        /// Country
        /// </summary>
        private string _country = string.Empty;
        
        /// <summary>
        /// CreateDate
        /// </summary>
        private System.DateTime _createDate;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public WeiXinUserInfoBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public WeiXinUserInfoBase(long id, string openId, string nickName, int gender, string prov, string city, string country, System.DateTime createDate) {
            _id = id;
            _openId = openId;
            _nickName = nickName;
            _gender = gender;
            _prov = prov;
            _city = city;
            _country = country;
            _createDate = createDate;
        }
        
        /// <summary>
        /// Id
        /// </summary>
        [Display(Name="ID")]
        public virtual long Id {
            get {
                return _id;
            }
            set {
                _id = value;
            }
        }
        
        /// <summary>
        /// Id APColumnDef
        /// </summary>
        public static Int64APColumnDef IdDef {
            get {
                return APDBDef.WeiXinUserInfo.Id;
            }
        }
        
        /// <summary>
        /// 微信用户OpenId
        /// </summary>
        [StringLength(150)]
        public virtual string OpenId {
            get {
                return _openId;
            }
            set {
                _openId = value;
            }
        }
        
        /// <summary>
        /// 微信用户OpenId APColumnDef
        /// </summary>
        public static StringAPColumnDef OpenIdDef {
            get {
                return APDBDef.WeiXinUserInfo.OpenId;
            }
        }
        
        /// <summary>
        /// NickName
        /// </summary>
        [StringLength(100)]
        public virtual string NickName {
            get {
                return _nickName;
            }
            set {
                _nickName = value;
            }
        }
        
        /// <summary>
        /// NickName APColumnDef
        /// </summary>
        public static StringAPColumnDef NickNameDef {
            get {
                return APDBDef.WeiXinUserInfo.NickName;
            }
        }
        
        /// <summary>
        /// Gender
        /// </summary>
        public virtual int Gender {
            get {
                return _gender;
            }
            set {
                _gender = value;
            }
        }
        
        /// <summary>
        /// Gender APColumnDef
        /// </summary>
        public static Int32APColumnDef GenderDef {
            get {
                return APDBDef.WeiXinUserInfo.Gender;
            }
        }
        
        /// <summary>
        /// Prov
        /// </summary>
        [StringLength(100)]
        public virtual string Prov {
            get {
                return _prov;
            }
            set {
                _prov = value;
            }
        }
        
        /// <summary>
        /// Prov APColumnDef
        /// </summary>
        public static StringAPColumnDef ProvDef {
            get {
                return APDBDef.WeiXinUserInfo.Prov;
            }
        }
        
        /// <summary>
        /// City
        /// </summary>
        [StringLength(100)]
        public virtual string City {
            get {
                return _city;
            }
            set {
                _city = value;
            }
        }
        
        /// <summary>
        /// City APColumnDef
        /// </summary>
        public static StringAPColumnDef CityDef {
            get {
                return APDBDef.WeiXinUserInfo.City;
            }
        }
        
        /// <summary>
        /// Country
        /// </summary>
        [StringLength(100)]
        public virtual string Country {
            get {
                return _country;
            }
            set {
                _country = value;
            }
        }
        
        /// <summary>
        /// Country APColumnDef
        /// </summary>
        public static StringAPColumnDef CountryDef {
            get {
                return APDBDef.WeiXinUserInfo.Country;
            }
        }
        
        /// <summary>
        /// CreateDate
        /// </summary>
        [Display(Name="CreateDate")]
        public virtual System.DateTime CreateDate {
            get {
                return _createDate;
            }
            set {
                _createDate = value;
            }
        }
        
        /// <summary>
        /// CreateDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef CreateDateDef {
            get {
                return APDBDef.WeiXinUserInfo.CreateDate;
            }
        }
        
        /// <summary>
        /// WeiXinUserInfoTableDef APTableDef
        /// </summary>
        public static APDBDef.WeiXinUserInfoTableDef TableDef {
            get {
                return APDBDef.WeiXinUserInfo;
            }
        }
        
        /// <summary>
        /// WeiXinUserInfoTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.WeiXinUserInfo.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(WeiXinUserInfo data) {
            Id = data.Id;
            OpenId = data.OpenId;
            NickName = data.NickName;
            Gender = data.Gender;
            Prov = data.Prov;
            City = data.City;
            Country = data.Country;
            CreateDate = data.CreateDate;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(WeiXinUserInfo data) {
            if ((Id != data.Id)) {
                return false;
            }
            if ((OpenId != data.OpenId)) {
                return false;
            }
            if ((NickName != data.NickName)) {
                return false;
            }
            if ((Gender != data.Gender)) {
                return false;
            }
            if ((Prov != data.Prov)) {
                return false;
            }
            if ((City != data.City)) {
                return false;
            }
            if ((Country != data.Country)) {
                return false;
            }
            if ((CreateDate != data.CreateDate)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.WeiXinUserInfoBpl.Insert(((WeiXinUserInfo)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.WeiXinUserInfoBpl.Update(((WeiXinUserInfo)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long id, Object metadata) {
            APBplDef.WeiXinUserInfoBpl.UpdatePartial(id, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long id) {
            APBplDef.WeiXinUserInfoBpl.PrimaryDelete(id);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.WeiXinUserInfoBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.WeiXinUserInfoBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static WeiXinUserInfo PrimaryGet(long id) {
            return APBplDef.WeiXinUserInfoBpl.PrimaryGet(id);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<WeiXinUserInfo> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.WeiXinUserInfoBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<WeiXinUserInfo> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.WeiXinUserInfoBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<WeiXinUserInfo> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.WeiXinUserInfoBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<WeiXinUserInfo> GetAll() {
            return APBplDef.WeiXinUserInfoBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 微信用户
    /// </summary>
    [Serializable()]
    public partial class WeiXinUserInfo : WeiXinUserInfoBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public WeiXinUserInfo() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public WeiXinUserInfo(long id, string openId, string nickName, int gender, string prov, string city, string country, System.DateTime createDate) : 
                base(id, openId, nickName, gender, prov, city, country, createDate) {
        }
    }
    
    /// <summary>
    /// 微课点赞 Base
    /// </summary>
    [Serializable()]
    public abstract partial class WeiXinPraiseBase {
        
        /// <summary>
        /// OccurId
        /// </summary>
        private long _occurId;
        
        /// <summary>
        /// 微信用户OpenId
        /// </summary>
        private string _openId = string.Empty;
        
        /// <summary>
        /// 作品Id
        /// </summary>
        private long _resId;
        
        /// <summary>
        /// 用于排序使用
        /// </summary>
        private System.DateTime _occurTime;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public WeiXinPraiseBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public WeiXinPraiseBase(long occurId, string openId, long resId, System.DateTime occurTime) {
            _occurId = occurId;
            _openId = openId;
            _resId = resId;
            _occurTime = occurTime;
        }
        
        /// <summary>
        /// OccurId
        /// </summary>
        [Display(Name="ID")]
        public virtual long OccurId {
            get {
                return _occurId;
            }
            set {
                _occurId = value;
            }
        }
        
        /// <summary>
        /// OccurId APColumnDef
        /// </summary>
        public static Int64APColumnDef OccurIdDef {
            get {
                return APDBDef.WeiXinPraise.OccurId;
            }
        }
        
        /// <summary>
        /// 微信用户OpenId
        /// </summary>
        [StringLength(150)]
        public virtual string OpenId {
            get {
                return _openId;
            }
            set {
                _openId = value;
            }
        }
        
        /// <summary>
        /// 微信用户OpenId APColumnDef
        /// </summary>
        public static StringAPColumnDef OpenIdDef {
            get {
                return APDBDef.WeiXinPraise.OpenId;
            }
        }
        
        /// <summary>
        /// 作品Id
        /// </summary>
        public virtual long ResId {
            get {
                return _resId;
            }
            set {
                _resId = value;
            }
        }
        
        /// <summary>
        /// 作品Id APColumnDef
        /// </summary>
        public static Int64APColumnDef ResIdDef {
            get {
                return APDBDef.WeiXinPraise.ResId;
            }
        }
        
        /// <summary>
        /// 用于排序使用
        /// </summary>
        [Display(Name="时间")]
        public virtual System.DateTime OccurTime {
            get {
                return _occurTime;
            }
            set {
                _occurTime = value;
            }
        }
        
        /// <summary>
        /// 用于排序使用 APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef OccurTimeDef {
            get {
                return APDBDef.WeiXinPraise.OccurTime;
            }
        }
        
        /// <summary>
        /// WeiXinPraiseTableDef APTableDef
        /// </summary>
        public static APDBDef.WeiXinPraiseTableDef TableDef {
            get {
                return APDBDef.WeiXinPraise;
            }
        }
        
        /// <summary>
        /// WeiXinPraiseTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.WeiXinPraise.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(WeiXinPraise data) {
            OccurId = data.OccurId;
            OpenId = data.OpenId;
            ResId = data.ResId;
            OccurTime = data.OccurTime;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(WeiXinPraise data) {
            if ((OccurId != data.OccurId)) {
                return false;
            }
            if ((OpenId != data.OpenId)) {
                return false;
            }
            if ((ResId != data.ResId)) {
                return false;
            }
            if ((OccurTime != data.OccurTime)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.WeiXinPraiseBpl.Insert(((WeiXinPraise)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.WeiXinPraiseBpl.Update(((WeiXinPraise)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long occurId, Object metadata) {
            APBplDef.WeiXinPraiseBpl.UpdatePartial(occurId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long occurId) {
            APBplDef.WeiXinPraiseBpl.PrimaryDelete(occurId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.WeiXinPraiseBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.WeiXinPraiseBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static WeiXinPraise PrimaryGet(long occurId) {
            return APBplDef.WeiXinPraiseBpl.PrimaryGet(occurId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<WeiXinPraise> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.WeiXinPraiseBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<WeiXinPraise> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.WeiXinPraiseBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<WeiXinPraise> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.WeiXinPraiseBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<WeiXinPraise> GetAll() {
            return APBplDef.WeiXinPraiseBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 微课点赞
    /// </summary>
    [Serializable()]
    public partial class WeiXinPraise : WeiXinPraiseBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public WeiXinPraise() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public WeiXinPraise(long occurId, string openId, long resId, System.DateTime occurTime) : 
                base(occurId, openId, resId, occurTime) {
        }
    }
    
    /// <summary>
    /// 微课收藏 Base
    /// </summary>
    [Serializable()]
    public abstract partial class WeiXinFavoriteBase {
        
        /// <summary>
        /// OccurId
        /// </summary>
        private long _occurId;
        
        /// <summary>
        /// 微信用户OpenId
        /// </summary>
        private string _openId = string.Empty;
        
        /// <summary>
        /// 作品Id
        /// </summary>
        private long _resId;
        
        /// <summary>
        /// 用于排序使用
        /// </summary>
        private System.DateTime _occurTime;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public WeiXinFavoriteBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public WeiXinFavoriteBase(long occurId, string openId, long resId, System.DateTime occurTime) {
            _occurId = occurId;
            _openId = openId;
            _resId = resId;
            _occurTime = occurTime;
        }
        
        /// <summary>
        /// OccurId
        /// </summary>
        [Display(Name="ID")]
        public virtual long OccurId {
            get {
                return _occurId;
            }
            set {
                _occurId = value;
            }
        }
        
        /// <summary>
        /// OccurId APColumnDef
        /// </summary>
        public static Int64APColumnDef OccurIdDef {
            get {
                return APDBDef.WeiXinFavorite.OccurId;
            }
        }
        
        /// <summary>
        /// 微信用户OpenId
        /// </summary>
        [StringLength(150)]
        public virtual string OpenId {
            get {
                return _openId;
            }
            set {
                _openId = value;
            }
        }
        
        /// <summary>
        /// 微信用户OpenId APColumnDef
        /// </summary>
        public static StringAPColumnDef OpenIdDef {
            get {
                return APDBDef.WeiXinFavorite.OpenId;
            }
        }
        
        /// <summary>
        /// 作品Id
        /// </summary>
        [Display(Name="WksId")]
        public virtual long ResId {
            get {
                return _resId;
            }
            set {
                _resId = value;
            }
        }
        
        /// <summary>
        /// 作品Id APColumnDef
        /// </summary>
        public static Int64APColumnDef ResIdDef {
            get {
                return APDBDef.WeiXinFavorite.ResId;
            }
        }
        
        /// <summary>
        /// 用于排序使用
        /// </summary>
        [Display(Name="时间")]
        public virtual System.DateTime OccurTime {
            get {
                return _occurTime;
            }
            set {
                _occurTime = value;
            }
        }
        
        /// <summary>
        /// 用于排序使用 APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef OccurTimeDef {
            get {
                return APDBDef.WeiXinFavorite.OccurTime;
            }
        }
        
        /// <summary>
        /// WeiXinFavoriteTableDef APTableDef
        /// </summary>
        public static APDBDef.WeiXinFavoriteTableDef TableDef {
            get {
                return APDBDef.WeiXinFavorite;
            }
        }
        
        /// <summary>
        /// WeiXinFavoriteTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.WeiXinFavorite.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(WeiXinFavorite data) {
            OccurId = data.OccurId;
            OpenId = data.OpenId;
            ResId = data.ResId;
            OccurTime = data.OccurTime;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(WeiXinFavorite data) {
            if ((OccurId != data.OccurId)) {
                return false;
            }
            if ((OpenId != data.OpenId)) {
                return false;
            }
            if ((ResId != data.ResId)) {
                return false;
            }
            if ((OccurTime != data.OccurTime)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.WeiXinFavoriteBpl.Insert(((WeiXinFavorite)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.WeiXinFavoriteBpl.Update(((WeiXinFavorite)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long occurId, Object metadata) {
            APBplDef.WeiXinFavoriteBpl.UpdatePartial(occurId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long occurId) {
            APBplDef.WeiXinFavoriteBpl.PrimaryDelete(occurId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.WeiXinFavoriteBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.WeiXinFavoriteBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static WeiXinFavorite PrimaryGet(long occurId) {
            return APBplDef.WeiXinFavoriteBpl.PrimaryGet(occurId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<WeiXinFavorite> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.WeiXinFavoriteBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<WeiXinFavorite> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.WeiXinFavoriteBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<WeiXinFavorite> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.WeiXinFavoriteBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<WeiXinFavorite> GetAll() {
            return APBplDef.WeiXinFavoriteBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 微课收藏
    /// </summary>
    [Serializable()]
    public partial class WeiXinFavorite : WeiXinFavoriteBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public WeiXinFavorite() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public WeiXinFavorite(long occurId, string openId, long resId, System.DateTime occurTime) : 
                base(occurId, openId, resId, occurTime) {
        }
    }
    
    /// <summary>
    /// 微课点击 Base
    /// </summary>
    [Serializable()]
    public abstract partial class WeiXinPlayCountBase {
        
        /// <summary>
        /// OccurId
        /// </summary>
        private long _occurId;
        
        /// <summary>
        /// 微信用户OpenId
        /// </summary>
        private string _openId = string.Empty;
        
        /// <summary>
        /// ResourceId
        /// </summary>
        private long _resourceId;
        
        /// <summary>
        /// CourseId
        /// </summary>
        private long _courseId;
        
        /// <summary>
        /// 用于排序使用
        /// </summary>
        private System.DateTime _occurTime;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public WeiXinPlayCountBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public WeiXinPlayCountBase(long occurId, string openId, long resourceId, long courseId, System.DateTime occurTime) {
            _occurId = occurId;
            _openId = openId;
            _resourceId = resourceId;
            _courseId = courseId;
            _occurTime = occurTime;
        }
        
        /// <summary>
        /// OccurId
        /// </summary>
        [Display(Name="ID")]
        public virtual long OccurId {
            get {
                return _occurId;
            }
            set {
                _occurId = value;
            }
        }
        
        /// <summary>
        /// OccurId APColumnDef
        /// </summary>
        public static Int64APColumnDef OccurIdDef {
            get {
                return APDBDef.WeiXinPlayCount.OccurId;
            }
        }
        
        /// <summary>
        /// 微信用户OpenId
        /// </summary>
        [StringLength(150)]
        public virtual string OpenId {
            get {
                return _openId;
            }
            set {
                _openId = value;
            }
        }
        
        /// <summary>
        /// 微信用户OpenId APColumnDef
        /// </summary>
        public static StringAPColumnDef OpenIdDef {
            get {
                return APDBDef.WeiXinPlayCount.OpenId;
            }
        }
        
        /// <summary>
        /// ResourceId
        /// </summary>
        [Display(Name="作品ID")]
        [Required()]
        public virtual long ResourceId {
            get {
                return _resourceId;
            }
            set {
                _resourceId = value;
            }
        }
        
        /// <summary>
        /// ResourceId APColumnDef
        /// </summary>
        public static Int64APColumnDef ResourceIdDef {
            get {
                return APDBDef.WeiXinPlayCount.ResourceId;
            }
        }
        
        /// <summary>
        /// CourseId
        /// </summary>
        [Display(Name="微课ID")]
        [Required()]
        public virtual long CourseId {
            get {
                return _courseId;
            }
            set {
                _courseId = value;
            }
        }
        
        /// <summary>
        /// CourseId APColumnDef
        /// </summary>
        public static Int64APColumnDef CourseIdDef {
            get {
                return APDBDef.WeiXinPlayCount.CourseId;
            }
        }
        
        /// <summary>
        /// 用于排序使用
        /// </summary>
        [Display(Name="时间")]
        public virtual System.DateTime OccurTime {
            get {
                return _occurTime;
            }
            set {
                _occurTime = value;
            }
        }
        
        /// <summary>
        /// 用于排序使用 APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef OccurTimeDef {
            get {
                return APDBDef.WeiXinPlayCount.OccurTime;
            }
        }
        
        /// <summary>
        /// WeiXinPlayCountTableDef APTableDef
        /// </summary>
        public static APDBDef.WeiXinPlayCountTableDef TableDef {
            get {
                return APDBDef.WeiXinPlayCount;
            }
        }
        
        /// <summary>
        /// WeiXinPlayCountTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.WeiXinPlayCount.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(WeiXinPlayCount data) {
            OccurId = data.OccurId;
            OpenId = data.OpenId;
            ResourceId = data.ResourceId;
            CourseId = data.CourseId;
            OccurTime = data.OccurTime;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(WeiXinPlayCount data) {
            if ((OccurId != data.OccurId)) {
                return false;
            }
            if ((OpenId != data.OpenId)) {
                return false;
            }
            if ((ResourceId != data.ResourceId)) {
                return false;
            }
            if ((CourseId != data.CourseId)) {
                return false;
            }
            if ((OccurTime != data.OccurTime)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.WeiXinPlayCountBpl.Insert(((WeiXinPlayCount)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.WeiXinPlayCountBpl.Update(((WeiXinPlayCount)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long occurId, Object metadata) {
            APBplDef.WeiXinPlayCountBpl.UpdatePartial(occurId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long occurId) {
            APBplDef.WeiXinPlayCountBpl.PrimaryDelete(occurId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.WeiXinPlayCountBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.WeiXinPlayCountBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static WeiXinPlayCount PrimaryGet(long occurId) {
            return APBplDef.WeiXinPlayCountBpl.PrimaryGet(occurId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<WeiXinPlayCount> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.WeiXinPlayCountBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<WeiXinPlayCount> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.WeiXinPlayCountBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<WeiXinPlayCount> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.WeiXinPlayCountBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<WeiXinPlayCount> GetAll() {
            return APBplDef.WeiXinPlayCountBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 微课点击
    /// </summary>
    [Serializable()]
    public partial class WeiXinPlayCount : WeiXinPlayCountBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public WeiXinPlayCount() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public WeiXinPlayCount(long occurId, string openId, long resourceId, long courseId, System.DateTime occurTime) : 
                base(occurId, openId, resourceId, courseId, occurTime) {
        }
    }
    
    /// <summary>
    /// 消息 Base
    /// </summary>
    [Serializable()]
    public abstract partial class NoticeBase {
        
        /// <summary>
        /// NoticeId
        /// </summary>
        private long _noticeId;
        
        /// <summary>
        /// 消息标题
        /// </summary>
        private string _title = string.Empty;
        
        /// <summary>
        /// 消息内容
        /// </summary>
        private string _content = string.Empty;
        
        /// <summary>
        /// PublishDate
        /// </summary>
        private System.DateTime _publishDate;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public NoticeBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public NoticeBase(long noticeId, string title, string content, System.DateTime publishDate) {
            _noticeId = noticeId;
            _title = title;
            _content = content;
            _publishDate = publishDate;
        }
        
        /// <summary>
        /// NoticeId
        /// </summary>
        [Display(Name="NoticeId")]
        public virtual long NoticeId {
            get {
                return _noticeId;
            }
            set {
                _noticeId = value;
            }
        }
        
        /// <summary>
        /// NoticeId APColumnDef
        /// </summary>
        public static Int64APColumnDef NoticeIdDef {
            get {
                return APDBDef.Notice.NoticeId;
            }
        }
        
        /// <summary>
        /// 消息标题
        /// </summary>
        [StringLength(150)]
        public virtual string Title {
            get {
                return _title;
            }
            set {
                _title = value;
            }
        }
        
        /// <summary>
        /// 消息标题 APColumnDef
        /// </summary>
        public static StringAPColumnDef TitleDef {
            get {
                return APDBDef.Notice.Title;
            }
        }
        
        /// <summary>
        /// 消息内容
        /// </summary>
        [StringLength(20000)]
        public virtual string Content {
            get {
                return _content;
            }
            set {
                _content = value;
            }
        }
        
        /// <summary>
        /// 消息内容 APColumnDef
        /// </summary>
        public static StringAPColumnDef ContentDef {
            get {
                return APDBDef.Notice.Content;
            }
        }
        
        /// <summary>
        /// PublishDate
        /// </summary>
        [Display(Name="发布日期")]
        public virtual System.DateTime PublishDate {
            get {
                return _publishDate;
            }
            set {
                _publishDate = value;
            }
        }
        
        /// <summary>
        /// PublishDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef PublishDateDef {
            get {
                return APDBDef.Notice.PublishDate;
            }
        }
        
        /// <summary>
        /// NoticeTableDef APTableDef
        /// </summary>
        public static APDBDef.NoticeTableDef TableDef {
            get {
                return APDBDef.Notice;
            }
        }
        
        /// <summary>
        /// NoticeTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.Notice.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(Notice data) {
            NoticeId = data.NoticeId;
            Title = data.Title;
            Content = data.Content;
            PublishDate = data.PublishDate;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(Notice data) {
            if ((NoticeId != data.NoticeId)) {
                return false;
            }
            if ((Title != data.Title)) {
                return false;
            }
            if ((Content != data.Content)) {
                return false;
            }
            if ((PublishDate != data.PublishDate)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.NoticeBpl.Insert(((Notice)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.NoticeBpl.Update(((Notice)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long noticeId, Object metadata) {
            APBplDef.NoticeBpl.UpdatePartial(noticeId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long noticeId) {
            APBplDef.NoticeBpl.PrimaryDelete(noticeId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.NoticeBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.NoticeBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static Notice PrimaryGet(long noticeId) {
            return APBplDef.NoticeBpl.PrimaryGet(noticeId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Notice> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.NoticeBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Notice> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.NoticeBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Notice> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.NoticeBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<Notice> GetAll() {
            return APBplDef.NoticeBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 消息
    /// </summary>
    [Serializable()]
    public partial class Notice : NoticeBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public Notice() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public Notice(long noticeId, string title, string content, System.DateTime publishDate) : 
                base(noticeId, title, content, publishDate) {
        }
    }
    
    /// <summary>
    /// 微信专家表 Base
    /// </summary>
    [Serializable()]
    public abstract partial class WeiXinExpertBase {
        
        /// <summary>
        /// WxExpertId
        /// </summary>
        private long _wxExpertId;
        
        /// <summary>
        /// 微信用户OpenId
        /// </summary>
        private string _openId = string.Empty;
        
        /// <summary>
        /// UserId
        /// </summary>
        private long _userId;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public WeiXinExpertBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public WeiXinExpertBase(long wxExpertId, string openId, long userId) {
            _wxExpertId = wxExpertId;
            _openId = openId;
            _userId = userId;
        }
        
        /// <summary>
        /// WxExpertId
        /// </summary>
        public virtual long WxExpertId {
            get {
                return _wxExpertId;
            }
            set {
                _wxExpertId = value;
            }
        }
        
        /// <summary>
        /// WxExpertId APColumnDef
        /// </summary>
        public static Int64APColumnDef WxExpertIdDef {
            get {
                return APDBDef.WeiXinExpert.WxExpertId;
            }
        }
        
        /// <summary>
        /// 微信用户OpenId
        /// </summary>
        [Display(Name="OpenId")]
        [StringLength(150)]
        public virtual string OpenId {
            get {
                return _openId;
            }
            set {
                _openId = value;
            }
        }
        
        /// <summary>
        /// 微信用户OpenId APColumnDef
        /// </summary>
        public static StringAPColumnDef OpenIdDef {
            get {
                return APDBDef.WeiXinExpert.OpenId;
            }
        }
        
        /// <summary>
        /// UserId
        /// </summary>
        public virtual long UserId {
            get {
                return _userId;
            }
            set {
                _userId = value;
            }
        }
        
        /// <summary>
        /// UserId APColumnDef
        /// </summary>
        public static Int64APColumnDef UserIdDef {
            get {
                return APDBDef.WeiXinExpert.UserId;
            }
        }
        
        /// <summary>
        /// WeiXinExpertTableDef APTableDef
        /// </summary>
        public static APDBDef.WeiXinExpertTableDef TableDef {
            get {
                return APDBDef.WeiXinExpert;
            }
        }
        
        /// <summary>
        /// WeiXinExpertTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.WeiXinExpert.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(WeiXinExpert data) {
            WxExpertId = data.WxExpertId;
            OpenId = data.OpenId;
            UserId = data.UserId;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(WeiXinExpert data) {
            if ((WxExpertId != data.WxExpertId)) {
                return false;
            }
            if ((OpenId != data.OpenId)) {
                return false;
            }
            if ((UserId != data.UserId)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.WeiXinExpertBpl.Insert(((WeiXinExpert)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.WeiXinExpertBpl.Update(((WeiXinExpert)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long wxExpertId, Object metadata) {
            APBplDef.WeiXinExpertBpl.UpdatePartial(wxExpertId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long wxExpertId) {
            APBplDef.WeiXinExpertBpl.PrimaryDelete(wxExpertId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.WeiXinExpertBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.WeiXinExpertBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static WeiXinExpert PrimaryGet(long wxExpertId) {
            return APBplDef.WeiXinExpertBpl.PrimaryGet(wxExpertId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<WeiXinExpert> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.WeiXinExpertBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<WeiXinExpert> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.WeiXinExpertBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<WeiXinExpert> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.WeiXinExpertBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<WeiXinExpert> GetAll() {
            return APBplDef.WeiXinExpertBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 微信专家表
    /// </summary>
    [Serializable()]
    public partial class WeiXinExpert : WeiXinExpertBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public WeiXinExpert() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public WeiXinExpert(long wxExpertId, string openId, long userId) : 
                base(wxExpertId, openId, userId) {
        }
    }
}
